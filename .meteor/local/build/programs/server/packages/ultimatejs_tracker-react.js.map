{"version":3,"sources":["meteor://ðŸ’»app/packages/ultimatejs:tracker-react/main.js","meteor://ðŸ’»app/packages/ultimatejs:tracker-react/Tracker.js"],"names":["module","export","TrackerReactMixin","Tracker","watch","require","default","v","exportDefault","TrackerReact","Component","opt","Meteor","isServer","TrackerReactComponent","constructor","args","prototype","_isExtended","superComponentWillUnmount","componentWillUnmount","call","_renderComputation","stop","autorunRender","oldRender","render","autorunOnce","name","dataFunc","once","forceUpdate","componentWillMount","context","updateFunc","data","stopped","nonreactive","autorun","c","firstRun"],"mappings":"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","file":"/packages/ultimatejs_tracker-react.js","sourcesContent":["/**\n * Tracker is available as a global variable but is extended for one time computations/invalidation.\n * Implementation: See ./Tracker.js\n */\nimport Tracker from './Tracker';\n\n/**\n * autorunRender(): The magic behind this computation is it only ever runs once after each time `render` is called.\n * When it does run that 2nd time, it's used just to force an update. The reactive function it wraps isn't even called.\n * Then on the update, the cycle repeats, and the computation is stopped, and a new one is made.\n *\n * Also, because the autorun is recreated on all React-triggered re-renders, any new code-paths possibly\n * taken in `render` will automatically begin tracking reactive dependencies, thereby MERGING both models of reactivity:\n * Meteor's various reactive data sources AND React's functional + unidirectional re-running of\n * everything in component branches with state changes.\n */\n\n\n/**\n * Default. Provides a react component for inheritance as a clean alternative to mixins.\n * Implementation:\n *    \"class MyApp extends TrackerReact(React.Component) { (...)\"\n * @param Component {*} React Component\n */\nexport default TrackerReact = function (Component, opt) {\n  // No reactive computations needed for Server Side Rendering\n  if (Meteor.isServer) return Component;\n\n  class TrackerReactComponent extends Component {\n\n    constructor(...args) {\n      super(...args);\n\n      /*\n       Overloading the constructors `componentWillUnmount` method to ensure that computations are stopped and a\n       forceUpdate prevented, without overwriting the prototype. This is a potential bug, as of React 14.7 the\n       componentWillUnmount() method does not fire, if the top level component has one. It gets overwritten. This\n       implementation is however similar to what a transpiler would do anyway.\n\n       GitHub Issue: https://github.com/facebook/react/issues/6162\n       */\n      if (!this.constructor.prototype._isExtended) {\n        this.constructor.prototype._isExtended = true;\n        let superComponentWillUnmount = this.constructor.prototype.componentWillUnmount;\n\n        this.constructor.prototype.componentWillUnmount = function (...args) {\n          if (superComponentWillUnmount) {\n            superComponentWillUnmount.call(this, ...args);\n          }\n\n          this._renderComputation.stop();\n          this._renderComputation = null;\n        };\n      }\n\n      this.autorunRender();\n    }\n\n    autorunRender() {\n      let oldRender = this.render;\n\n      this.render = () => {\n        // Simple method we can offer in the `Meteor.Component` API\n        return this.autorunOnce('_renderComputation', oldRender);\n      };\n    }\n\n    autorunOnce(name, dataFunc) {\n      return Tracker.once(name, this, dataFunc, this.forceUpdate);\n    }\n  }\n\n  return TrackerReactComponent;\n};\n\n\n/**\n * Mixin. Use with ES7 / TypeScript Decorator or Mixin-Module.\n * Implementation:\n *   \"@TrackerReactMixin\n *    class MyApp extends React.Component { (...)\"\n * @type {{componentWillMount: (function()), componentWillUnmount: (function()), autorunRender: (function()),\n *   autorunOnce: (function(*=, *=))}}\n */\nexport const TrackerReactMixin = {\n  componentWillMount() {\n    // No reactive computations needed for Server Side Rendering\n    if (Meteor.isServer) return;\n\n    this.autorunRender();\n  },\n  componentWillUnmount() {\n    // No reactive computations needed for Server Side Rendering\n    if (Meteor.isServer) return;\n\n    this._renderComputation.stop();\n    this._renderComputation = null;\n  },\n  autorunRender() {\n    let oldRender = this.render;\n\n    this.render = () => {\n      // Simple method we can offer in the `Meteor.Component` API\n      return this.autorunOnce('_renderComputation', oldRender);\n    };\n  },\n  autorunOnce(name, dataFunc) {\n    return Tracker.once(name, this, dataFunc, this.forceUpdate);\n  }\n};\n","// Also available as a global\nimport {Tracker} from 'meteor/tracker';\n\n/**\n * Create \"one-time\" reactive computations with Tracker\n * @param name {string} Component Reactive Data Property for Computation\n * @param context {*} Target Component Instance\n * @param dataFunc {*} Data Context\n * @param updateFunc {*} Component ForceUpdate Method - To re-trigger render function\n * @returns {*} Symbol(react.element) - Result data-element composition\n */\nTracker.once = function (name, context, dataFunc, updateFunc) {\n  let data;\n\n  // Stop it just in case the autorun never re-ran\n  if (context[name] && !context[name].stopped) context[name].stop();\n\n  // NOTE: we may want to run this code in `setTimeout(func, 0)` so it doesn't impact the rendering phase at all\n  context[name] = Tracker.nonreactive(() => {\n    return Tracker.autorun(c => {\n      if (c.firstRun) {\n\n        data = dataFunc.call(context);\n\n      } else {\n\n        // Stop autorun here so rendering \"phase\" doesn't have extra work of also stopping autoruns; likely not too\n        // important though.\n        if (context[name]) context[name].stop();\n\n        // where `forceUpdate` will be called in above implementation\n        updateFunc.call(context);\n      }\n    });\n  });\n\n  return data;\n};\n\nexport default Tracker"]}