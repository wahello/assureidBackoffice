[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/themeteorchef_jquery-validation/packages/themeteorchef_jquery-validation.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {                                                                                                         // 1\n                                                                                                                       // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/themeteorchef:jquery-validation/lib/jquery-validation/src/core.js                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n$.extend($.fn, {                                                                                                    // 1\n\t// http://jqueryvalidation.org/validate/                                                                           // 2\n\tvalidate: function( options ) {                                                                                    // 3\n                                                                                                                    // 4\n\t\t// if nothing is selected, return nothing; can't chain anyway                                                     // 5\n\t\tif ( !this.length ) {                                                                                             // 6\n\t\t\tif ( options && options.debug && window.console ) {                                                              // 7\n\t\t\t\tconsole.warn( \"Nothing selected, can't validate, returning nothing.\" );                                         // 8\n\t\t\t}                                                                                                                // 9\n\t\t\treturn;                                                                                                          // 10\n\t\t}                                                                                                                 // 11\n                                                                                                                    // 12\n\t\t// check if a validator for this form was already created                                                         // 13\n\t\tvar validator = $.data( this[ 0 ], \"validator\" );                                                                 // 14\n\t\tif ( validator ) {                                                                                                // 15\n\t\t\treturn validator;                                                                                                // 16\n\t\t}                                                                                                                 // 17\n                                                                                                                    // 18\n\t\t// Add novalidate tag if HTML5.                                                                                   // 19\n\t\tthis.attr( \"novalidate\", \"novalidate\" );                                                                          // 20\n                                                                                                                    // 21\n\t\tvalidator = new $.validator( options, this[ 0 ] );                                                                // 22\n\t\t$.data( this[ 0 ], \"validator\", validator );                                                                      // 23\n                                                                                                                    // 24\n\t\tif ( validator.settings.onsubmit ) {                                                                              // 25\n                                                                                                                    // 26\n\t\t\tthis.on( \"click.validate\", \":submit\", function( event ) {                                                        // 27\n\t\t\t\tif ( validator.settings.submitHandler ) {                                                                       // 28\n\t\t\t\t\tvalidator.submitButton = event.target;                                                                         // 29\n\t\t\t\t}                                                                                                               // 30\n                                                                                                                    // 31\n\t\t\t\t// allow suppressing validation by adding a cancel class to the submit button                                   // 32\n\t\t\t\tif ( $( this ).hasClass( \"cancel\" ) ) {                                                                         // 33\n\t\t\t\t\tvalidator.cancelSubmit = true;                                                                                 // 34\n\t\t\t\t}                                                                                                               // 35\n                                                                                                                    // 36\n\t\t\t\t// allow suppressing validation by adding the html5 formnovalidate attribute to the submit button               // 37\n\t\t\t\tif ( $( this ).attr( \"formnovalidate\" ) !== undefined ) {                                                       // 38\n\t\t\t\t\tvalidator.cancelSubmit = true;                                                                                 // 39\n\t\t\t\t}                                                                                                               // 40\n\t\t\t});                                                                                                              // 41\n                                                                                                                    // 42\n\t\t\t// validate the form on submit                                                                                   // 43\n\t\t\tthis.on( \"submit.validate\", function( event ) {                                                                  // 44\n\t\t\t\tif ( validator.settings.debug ) {                                                                               // 45\n\t\t\t\t\t// prevent form submit to be able to see console output                                                        // 46\n\t\t\t\t\tevent.preventDefault();                                                                                        // 47\n\t\t\t\t}                                                                                                               // 48\n\t\t\t\tfunction handle() {                                                                                             // 49\n\t\t\t\t\tvar hidden, result;                                                                                            // 50\n\t\t\t\t\tif ( validator.settings.submitHandler ) {                                                                      // 51\n\t\t\t\t\t\tif ( validator.submitButton ) {                                                                               // 52\n\t\t\t\t\t\t\t// insert a hidden input as a replacement for the missing submit button                                      // 53\n\t\t\t\t\t\t\thidden = $( \"<input type='hidden'/>\" )                                                                       // 54\n\t\t\t\t\t\t\t\t.attr( \"name\", validator.submitButton.name )                                                                // 55\n\t\t\t\t\t\t\t\t.val( $( validator.submitButton ).val() )                                                                   // 56\n\t\t\t\t\t\t\t\t.appendTo( validator.currentForm );                                                                         // 57\n\t\t\t\t\t\t}                                                                                                             // 58\n\t\t\t\t\t\tresult = validator.settings.submitHandler.call( validator, validator.currentForm, event );                    // 59\n\t\t\t\t\t\tif ( validator.submitButton ) {                                                                               // 60\n\t\t\t\t\t\t\t// and clean up afterwards; thanks to no-block-scope, hidden can be referenced                               // 61\n\t\t\t\t\t\t\thidden.remove();                                                                                             // 62\n\t\t\t\t\t\t}                                                                                                             // 63\n\t\t\t\t\t\tif ( result !== undefined ) {                                                                                 // 64\n\t\t\t\t\t\t\treturn result;                                                                                               // 65\n\t\t\t\t\t\t}                                                                                                             // 66\n\t\t\t\t\t\treturn false;                                                                                                 // 67\n\t\t\t\t\t}                                                                                                              // 68\n\t\t\t\t\treturn true;                                                                                                   // 69\n\t\t\t\t}                                                                                                               // 70\n                                                                                                                    // 71\n\t\t\t\t// prevent submit for invalid forms or custom submit handlers                                                   // 72\n\t\t\t\tif ( validator.cancelSubmit ) {                                                                                 // 73\n\t\t\t\t\tvalidator.cancelSubmit = false;                                                                                // 74\n\t\t\t\t\treturn handle();                                                                                               // 75\n\t\t\t\t}                                                                                                               // 76\n\t\t\t\tif ( validator.form() ) {                                                                                       // 77\n\t\t\t\t\tif ( validator.pendingRequest ) {                                                                              // 78\n\t\t\t\t\t\tvalidator.formSubmitted = true;                                                                               // 79\n\t\t\t\t\t\treturn false;                                                                                                 // 80\n\t\t\t\t\t}                                                                                                              // 81\n\t\t\t\t\treturn handle();                                                                                               // 82\n\t\t\t\t} else {                                                                                                        // 83\n\t\t\t\t\tvalidator.focusInvalid();                                                                                      // 84\n\t\t\t\t\treturn false;                                                                                                  // 85\n\t\t\t\t}                                                                                                               // 86\n\t\t\t});                                                                                                              // 87\n\t\t}                                                                                                                 // 88\n                                                                                                                    // 89\n\t\treturn validator;                                                                                                 // 90\n\t},                                                                                                                 // 91\n\t// http://jqueryvalidation.org/valid/                                                                              // 92\n\tvalid: function() {                                                                                                // 93\n\t\tvar valid, validator, errorList;                                                                                  // 94\n                                                                                                                    // 95\n\t\tif ( $( this[ 0 ] ).is( \"form\" ) ) {                                                                              // 96\n\t\t\tvalid = this.validate().form();                                                                                  // 97\n\t\t} else {                                                                                                          // 98\n\t\t\terrorList = [];                                                                                                  // 99\n\t\t\tvalid = true;                                                                                                    // 100\n\t\t\tvalidator = $( this[ 0 ].form ).validate();                                                                      // 101\n\t\t\tthis.each( function() {                                                                                          // 102\n\t\t\t\tvalid = validator.element( this ) && valid;                                                                     // 103\n\t\t\t\terrorList = errorList.concat( validator.errorList );                                                            // 104\n\t\t\t});                                                                                                              // 105\n\t\t\tvalidator.errorList = errorList;                                                                                 // 106\n\t\t}                                                                                                                 // 107\n\t\treturn valid;                                                                                                     // 108\n\t},                                                                                                                 // 109\n                                                                                                                    // 110\n\t// http://jqueryvalidation.org/rules/                                                                              // 111\n\trules: function( command, argument ) {                                                                             // 112\n\t\tvar element = this[ 0 ],                                                                                          // 113\n\t\t\tsettings, staticRules, existingRules, data, param, filtered;                                                     // 114\n                                                                                                                    // 115\n\t\tif ( command ) {                                                                                                  // 116\n\t\t\tsettings = $.data( element.form, \"validator\" ).settings;                                                         // 117\n\t\t\tstaticRules = settings.rules;                                                                                    // 118\n\t\t\texistingRules = $.validator.staticRules( element );                                                              // 119\n\t\t\tswitch ( command ) {                                                                                             // 120\n\t\t\tcase \"add\":                                                                                                      // 121\n\t\t\t\t$.extend( existingRules, $.validator.normalizeRule( argument ) );                                               // 122\n\t\t\t\t// remove messages from rules, but allow them to be set separately                                              // 123\n\t\t\t\tdelete existingRules.messages;                                                                                  // 124\n\t\t\t\tstaticRules[ element.name ] = existingRules;                                                                    // 125\n\t\t\t\tif ( argument.messages ) {                                                                                      // 126\n\t\t\t\t\tsettings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );          // 127\n\t\t\t\t}                                                                                                               // 128\n\t\t\t\tbreak;                                                                                                          // 129\n\t\t\tcase \"remove\":                                                                                                   // 130\n\t\t\t\tif ( !argument ) {                                                                                              // 131\n\t\t\t\t\tdelete staticRules[ element.name ];                                                                            // 132\n\t\t\t\t\treturn existingRules;                                                                                          // 133\n\t\t\t\t}                                                                                                               // 134\n\t\t\t\tfiltered = {};                                                                                                  // 135\n\t\t\t\t$.each( argument.split( /\\s/ ), function( index, method ) {                                                     // 136\n\t\t\t\t\tfiltered[ method ] = existingRules[ method ];                                                                  // 137\n\t\t\t\t\tdelete existingRules[ method ];                                                                                // 138\n\t\t\t\t\tif ( method === \"required\" ) {                                                                                 // 139\n\t\t\t\t\t\t$( element ).removeAttr( \"aria-required\" );                                                                   // 140\n\t\t\t\t\t}                                                                                                              // 141\n\t\t\t\t});                                                                                                             // 142\n\t\t\t\treturn filtered;                                                                                                // 143\n\t\t\t}                                                                                                                // 144\n\t\t}                                                                                                                 // 145\n                                                                                                                    // 146\n\t\tdata = $.validator.normalizeRules(                                                                                // 147\n\t\t$.extend(                                                                                                         // 148\n\t\t\t{},                                                                                                              // 149\n\t\t\t$.validator.classRules( element ),                                                                               // 150\n\t\t\t$.validator.attributeRules( element ),                                                                           // 151\n\t\t\t$.validator.dataRules( element ),                                                                                // 152\n\t\t\t$.validator.staticRules( element )                                                                               // 153\n\t\t), element );                                                                                                     // 154\n                                                                                                                    // 155\n\t\t// make sure required is at front                                                                                 // 156\n\t\tif ( data.required ) {                                                                                            // 157\n\t\t\tparam = data.required;                                                                                           // 158\n\t\t\tdelete data.required;                                                                                            // 159\n\t\t\tdata = $.extend( { required: param }, data );                                                                    // 160\n\t\t\t$( element ).attr( \"aria-required\", \"true\" );                                                                    // 161\n\t\t}                                                                                                                 // 162\n                                                                                                                    // 163\n\t\t// make sure remote is at back                                                                                    // 164\n\t\tif ( data.remote ) {                                                                                              // 165\n\t\t\tparam = data.remote;                                                                                             // 166\n\t\t\tdelete data.remote;                                                                                              // 167\n\t\t\tdata = $.extend( data, { remote: param });                                                                       // 168\n\t\t}                                                                                                                 // 169\n                                                                                                                    // 170\n\t\treturn data;                                                                                                      // 171\n\t}                                                                                                                  // 172\n});                                                                                                                 // 173\n                                                                                                                    // 174\n// Custom selectors                                                                                                 // 175\n$.extend( $.expr[ \":\" ], {                                                                                          // 176\n\t// http://jqueryvalidation.org/blank-selector/                                                                     // 177\n\tblank: function( a ) {                                                                                             // 178\n\t\treturn !$.trim( \"\" + $( a ).val() );                                                                              // 179\n\t},                                                                                                                 // 180\n\t// http://jqueryvalidation.org/filled-selector/                                                                    // 181\n\tfilled: function( a ) {                                                                                            // 182\n\t\treturn !!$.trim( \"\" + $( a ).val() );                                                                             // 183\n\t},                                                                                                                 // 184\n\t// http://jqueryvalidation.org/unchecked-selector/                                                                 // 185\n\tunchecked: function( a ) {                                                                                         // 186\n\t\treturn !$( a ).prop( \"checked\" );                                                                                 // 187\n\t}                                                                                                                  // 188\n});                                                                                                                 // 189\n                                                                                                                    // 190\n// constructor for validator                                                                                        // 191\n$.validator = function( options, form ) {                                                                           // 192\n\tthis.settings = $.extend( true, {}, $.validator.defaults, options );                                               // 193\n\tthis.currentForm = form;                                                                                           // 194\n\tthis.init();                                                                                                       // 195\n};                                                                                                                  // 196\n                                                                                                                    // 197\n// http://jqueryvalidation.org/jQuery.validator.format/                                                             // 198\n$.validator.format = function( source, params ) {                                                                   // 199\n\tif ( arguments.length === 1 ) {                                                                                    // 200\n\t\treturn function() {                                                                                               // 201\n\t\t\tvar args = $.makeArray( arguments );                                                                             // 202\n\t\t\targs.unshift( source );                                                                                          // 203\n\t\t\treturn $.validator.format.apply( this, args );                                                                   // 204\n\t\t};                                                                                                                // 205\n\t}                                                                                                                  // 206\n\tif ( arguments.length > 2 && params.constructor !== Array  ) {                                                     // 207\n\t\tparams = $.makeArray( arguments ).slice( 1 );                                                                     // 208\n\t}                                                                                                                  // 209\n\tif ( params.constructor !== Array ) {                                                                              // 210\n\t\tparams = [ params ];                                                                                              // 211\n\t}                                                                                                                  // 212\n\t$.each( params, function( i, n ) {                                                                                 // 213\n\t\tsource = source.replace( new RegExp( \"\\\\{\" + i + \"\\\\}\", \"g\" ), function() {                                       // 214\n\t\t\treturn n;                                                                                                        // 215\n\t\t});                                                                                                               // 216\n\t});                                                                                                                // 217\n\treturn source;                                                                                                     // 218\n};                                                                                                                  // 219\n                                                                                                                    // 220\n$.extend( $.validator, {                                                                                            // 221\n                                                                                                                    // 222\n\tdefaults: {                                                                                                        // 223\n\t\tmessages: {},                                                                                                     // 224\n\t\tgroups: {},                                                                                                       // 225\n\t\trules: {},                                                                                                        // 226\n\t\terrorClass: \"error\",                                                                                              // 227\n\t\tvalidClass: \"valid\",                                                                                              // 228\n\t\terrorElement: \"label\",                                                                                            // 229\n\t\tfocusCleanup: false,                                                                                              // 230\n\t\tfocusInvalid: true,                                                                                               // 231\n\t\terrorContainer: $( [] ),                                                                                          // 232\n\t\terrorLabelContainer: $( [] ),                                                                                     // 233\n\t\tonsubmit: true,                                                                                                   // 234\n\t\tignore: \":hidden\",                                                                                                // 235\n\t\tignoreTitle: false,                                                                                               // 236\n\t\tonfocusin: function( element ) {                                                                                  // 237\n\t\t\tthis.lastActive = element;                                                                                       // 238\n                                                                                                                    // 239\n\t\t\t// Hide error label and remove error class on focus if enabled                                                   // 240\n\t\t\tif ( this.settings.focusCleanup ) {                                                                              // 241\n\t\t\t\tif ( this.settings.unhighlight ) {                                                                              // 242\n\t\t\t\t\tthis.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );           // 243\n\t\t\t\t}                                                                                                               // 244\n\t\t\t\tthis.hideThese( this.errorsFor( element ) );                                                                    // 245\n\t\t\t}                                                                                                                // 246\n\t\t},                                                                                                                // 247\n\t\tonfocusout: function( element ) {                                                                                 // 248\n\t\t\tif ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {           // 249\n\t\t\t\tthis.element( element );                                                                                        // 250\n\t\t\t}                                                                                                                // 251\n\t\t},                                                                                                                // 252\n\t\tonkeyup: function( element, event ) {                                                                             // 253\n\t\t\t// Avoid revalidate the field when pressing one of the following keys                                            // 254\n\t\t\t// Shift       => 16                                                                                             // 255\n\t\t\t// Ctrl        => 17                                                                                             // 256\n\t\t\t// Alt         => 18                                                                                             // 257\n\t\t\t// Caps lock   => 20                                                                                             // 258\n\t\t\t// End         => 35                                                                                             // 259\n\t\t\t// Home        => 36                                                                                             // 260\n\t\t\t// Left arrow  => 37                                                                                             // 261\n\t\t\t// Up arrow    => 38                                                                                             // 262\n\t\t\t// Right arrow => 39                                                                                             // 263\n\t\t\t// Down arrow  => 40                                                                                             // 264\n\t\t\t// Insert      => 45                                                                                             // 265\n\t\t\t// Num lock    => 144                                                                                            // 266\n\t\t\t// AltGr key   => 225                                                                                            // 267\n\t\t\tvar excludedKeys = [                                                                                             // 268\n\t\t\t\t16, 17, 18, 20, 35, 36, 37,                                                                                     // 269\n\t\t\t\t38, 39, 40, 45, 144, 225                                                                                        // 270\n\t\t\t];                                                                                                               // 271\n                                                                                                                    // 272\n\t\t\tif ( event.which === 9 && this.elementValue( element ) === \"\" || $.inArray( event.keyCode, excludedKeys ) !== -1 ) {\n\t\t\t\treturn;                                                                                                         // 274\n\t\t\t} else if ( element.name in this.submitted || element === this.lastElement ) {                                   // 275\n\t\t\t\tthis.element( element );                                                                                        // 276\n\t\t\t}                                                                                                                // 277\n\t\t},                                                                                                                // 278\n\t\tonclick: function( element ) {                                                                                    // 279\n\t\t\t// click on selects, radiobuttons and checkboxes                                                                 // 280\n\t\t\tif ( element.name in this.submitted ) {                                                                          // 281\n\t\t\t\tthis.element( element );                                                                                        // 282\n                                                                                                                    // 283\n\t\t\t// or option elements, check parent select in that case                                                          // 284\n\t\t\t} else if ( element.parentNode.name in this.submitted ) {                                                        // 285\n\t\t\t\tthis.element( element.parentNode );                                                                             // 286\n\t\t\t}                                                                                                                // 287\n\t\t},                                                                                                                // 288\n\t\thighlight: function( element, errorClass, validClass ) {                                                          // 289\n\t\t\tif ( element.type === \"radio\" ) {                                                                                // 290\n\t\t\t\tthis.findByName( element.name ).addClass( errorClass ).removeClass( validClass );                               // 291\n\t\t\t} else {                                                                                                         // 292\n\t\t\t\t$( element ).addClass( errorClass ).removeClass( validClass );                                                  // 293\n\t\t\t}                                                                                                                // 294\n\t\t},                                                                                                                // 295\n\t\tunhighlight: function( element, errorClass, validClass ) {                                                        // 296\n\t\t\tif ( element.type === \"radio\" ) {                                                                                // 297\n\t\t\t\tthis.findByName( element.name ).removeClass( errorClass ).addClass( validClass );                               // 298\n\t\t\t} else {                                                                                                         // 299\n\t\t\t\t$( element ).removeClass( errorClass ).addClass( validClass );                                                  // 300\n\t\t\t}                                                                                                                // 301\n\t\t}                                                                                                                 // 302\n\t},                                                                                                                 // 303\n                                                                                                                    // 304\n\t// http://jqueryvalidation.org/jQuery.validator.setDefaults/                                                       // 305\n\tsetDefaults: function( settings ) {                                                                                // 306\n\t\t$.extend( $.validator.defaults, settings );                                                                       // 307\n\t},                                                                                                                 // 308\n                                                                                                                    // 309\n\tmessages: {                                                                                                        // 310\n\t\trequired: \"This field is required.\",                                                                              // 311\n\t\tremote: \"Please fix this field.\",                                                                                 // 312\n\t\temail: \"Please enter a valid email address.\",                                                                     // 313\n\t\turl: \"Please enter a valid URL.\",                                                                                 // 314\n\t\tdate: \"Please enter a valid date.\",                                                                               // 315\n\t\tdateISO: \"Please enter a valid date ( ISO ).\",                                                                    // 316\n\t\tnumber: \"Please enter a valid number.\",                                                                           // 317\n\t\tdigits: \"Please enter only digits.\",                                                                              // 318\n\t\tcreditcard: \"Please enter a valid credit card number.\",                                                           // 319\n\t\tequalTo: \"Please enter the same value again.\",                                                                    // 320\n\t\tmaxlength: $.validator.format( \"Please enter no more than {0} characters.\" ),                                     // 321\n\t\tminlength: $.validator.format( \"Please enter at least {0} characters.\" ),                                         // 322\n\t\trangelength: $.validator.format( \"Please enter a value between {0} and {1} characters long.\" ),                   // 323\n\t\trange: $.validator.format( \"Please enter a value between {0} and {1}.\" ),                                         // 324\n\t\tmax: $.validator.format( \"Please enter a value less than or equal to {0}.\" ),                                     // 325\n\t\tmin: $.validator.format( \"Please enter a value greater than or equal to {0}.\" )                                   // 326\n\t},                                                                                                                 // 327\n                                                                                                                    // 328\n\tautoCreateRanges: false,                                                                                           // 329\n                                                                                                                    // 330\n\tprototype: {                                                                                                       // 331\n                                                                                                                    // 332\n\t\tinit: function() {                                                                                                // 333\n\t\t\tthis.labelContainer = $( this.settings.errorLabelContainer );                                                    // 334\n\t\t\tthis.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );                  // 335\n\t\t\tthis.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );                    // 336\n\t\t\tthis.submitted = {};                                                                                             // 337\n\t\t\tthis.valueCache = {};                                                                                            // 338\n\t\t\tthis.pendingRequest = 0;                                                                                         // 339\n\t\t\tthis.pending = {};                                                                                               // 340\n\t\t\tthis.invalid = {};                                                                                               // 341\n\t\t\tthis.reset();                                                                                                    // 342\n                                                                                                                    // 343\n\t\t\tvar groups = ( this.groups = {} ),                                                                               // 344\n\t\t\t\trules;                                                                                                          // 345\n\t\t\t$.each( this.settings.groups, function( key, value ) {                                                           // 346\n\t\t\t\tif ( typeof value === \"string\" ) {                                                                              // 347\n\t\t\t\t\tvalue = value.split( /\\s/ );                                                                                   // 348\n\t\t\t\t}                                                                                                               // 349\n\t\t\t\t$.each( value, function( index, name ) {                                                                        // 350\n\t\t\t\t\tgroups[ name ] = key;                                                                                          // 351\n\t\t\t\t});                                                                                                             // 352\n\t\t\t});                                                                                                              // 353\n\t\t\trules = this.settings.rules;                                                                                     // 354\n\t\t\t$.each( rules, function( key, value ) {                                                                          // 355\n\t\t\t\trules[ key ] = $.validator.normalizeRule( value );                                                              // 356\n\t\t\t});                                                                                                              // 357\n                                                                                                                    // 358\n\t\t\tfunction delegate( event ) {                                                                                     // 359\n\t\t\t\tvar validator = $.data( this.form, \"validator\" ),                                                               // 360\n\t\t\t\t\teventType = \"on\" + event.type.replace( /^validate/, \"\" ),                                                      // 361\n\t\t\t\t\tsettings = validator.settings;                                                                                 // 362\n\t\t\t\tif ( settings[ eventType ] && !$( this ).is( settings.ignore ) ) {                                              // 363\n\t\t\t\t\tsettings[ eventType ].call( validator, this, event );                                                          // 364\n\t\t\t\t}                                                                                                               // 365\n\t\t\t}                                                                                                                // 366\n                                                                                                                    // 367\n\t\t\t$( this.currentForm )                                                                                            // 368\n\t\t\t\t.on( \"focusin.validate focusout.validate keyup.validate\",                                                       // 369\n\t\t\t\t\t\":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], \" +              // 370\n\t\t\t\t\t\"[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], \" +             // 371\n\t\t\t\t\t\"[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], \" +                    // 372\n\t\t\t\t\t\"[type='radio'], [type='checkbox']\", delegate)                                                                 // 373\n\t\t\t\t// Support: Chrome, oldIE                                                                                       // 374\n\t\t\t\t// \"select\" is provided as event.target when clicking a option                                                  // 375\n\t\t\t\t.on(\"click.validate\", \"select, option, [type='radio'], [type='checkbox']\", delegate);                           // 376\n                                                                                                                    // 377\n\t\t\tif ( this.settings.invalidHandler ) {                                                                            // 378\n\t\t\t\t$( this.currentForm ).on( \"invalid-form.validate\", this.settings.invalidHandler );                              // 379\n\t\t\t}                                                                                                                // 380\n                                                                                                                    // 381\n\t\t\t// Add aria-required to any Static/Data/Class required fields before first validation                            // 382\n\t\t\t// Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html\n\t\t\t$( this.currentForm ).find( \"[required], [data-rule-required], .required\" ).attr( \"aria-required\", \"true\" );     // 384\n\t\t},                                                                                                                // 385\n                                                                                                                    // 386\n\t\t// http://jqueryvalidation.org/Validator.form/                                                                    // 387\n\t\tform: function() {                                                                                                // 388\n\t\t\tthis.checkForm();                                                                                                // 389\n\t\t\t$.extend( this.submitted, this.errorMap );                                                                       // 390\n\t\t\tthis.invalid = $.extend({}, this.errorMap );                                                                     // 391\n\t\t\tif ( !this.valid() ) {                                                                                           // 392\n\t\t\t\t$( this.currentForm ).triggerHandler( \"invalid-form\", [ this ]);                                                // 393\n\t\t\t}                                                                                                                // 394\n\t\t\tthis.showErrors();                                                                                               // 395\n\t\t\treturn this.valid();                                                                                             // 396\n\t\t},                                                                                                                // 397\n                                                                                                                    // 398\n\t\tcheckForm: function() {                                                                                           // 399\n\t\t\tthis.prepareForm();                                                                                              // 400\n\t\t\tfor ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {                   // 401\n\t\t\t\tthis.check( elements[ i ] );                                                                                    // 402\n\t\t\t}                                                                                                                // 403\n\t\t\treturn this.valid();                                                                                             // 404\n\t\t},                                                                                                                // 405\n                                                                                                                    // 406\n\t\t// http://jqueryvalidation.org/Validator.element/                                                                 // 407\n\t\telement: function( element ) {                                                                                    // 408\n\t\t\tvar cleanElement = this.clean( element ),                                                                        // 409\n\t\t\t\tcheckElement = this.validationTargetFor( cleanElement ),                                                        // 410\n\t\t\t\tresult = true;                                                                                                  // 411\n                                                                                                                    // 412\n\t\t\tthis.lastElement = checkElement;                                                                                 // 413\n                                                                                                                    // 414\n\t\t\tif ( checkElement === undefined ) {                                                                              // 415\n\t\t\t\tdelete this.invalid[ cleanElement.name ];                                                                       // 416\n\t\t\t} else {                                                                                                         // 417\n\t\t\t\tthis.prepareElement( checkElement );                                                                            // 418\n\t\t\t\tthis.currentElements = $( checkElement );                                                                       // 419\n                                                                                                                    // 420\n\t\t\t\tresult = this.check( checkElement ) !== false;                                                                  // 421\n\t\t\t\tif ( result ) {                                                                                                 // 422\n\t\t\t\t\tdelete this.invalid[ checkElement.name ];                                                                      // 423\n\t\t\t\t} else {                                                                                                        // 424\n\t\t\t\t\tthis.invalid[ checkElement.name ] = true;                                                                      // 425\n\t\t\t\t}                                                                                                               // 426\n\t\t\t}                                                                                                                // 427\n\t\t\t// Add aria-invalid status for screen readers                                                                    // 428\n\t\t\t$( element ).attr( \"aria-invalid\", !result );                                                                    // 429\n                                                                                                                    // 430\n\t\t\tif ( !this.numberOfInvalids() ) {                                                                                // 431\n\t\t\t\t// Hide error containers on last error                                                                          // 432\n\t\t\t\tthis.toHide = this.toHide.add( this.containers );                                                               // 433\n\t\t\t}                                                                                                                // 434\n\t\t\tthis.showErrors();                                                                                               // 435\n\t\t\treturn result;                                                                                                   // 436\n\t\t},                                                                                                                // 437\n                                                                                                                    // 438\n\t\t// http://jqueryvalidation.org/Validator.showErrors/                                                              // 439\n\t\tshowErrors: function( errors ) {                                                                                  // 440\n\t\t\tif ( errors ) {                                                                                                  // 441\n\t\t\t\t// add items to error list and map                                                                              // 442\n\t\t\t\t$.extend( this.errorMap, errors );                                                                              // 443\n\t\t\t\tthis.errorList = [];                                                                                            // 444\n\t\t\t\tfor ( var name in errors ) {                                                                                    // 445\n\t\t\t\t\tthis.errorList.push({                                                                                          // 446\n\t\t\t\t\t\tmessage: errors[ name ],                                                                                      // 447\n\t\t\t\t\t\telement: this.findByName( name )[ 0 ]                                                                         // 448\n\t\t\t\t\t});                                                                                                            // 449\n\t\t\t\t}                                                                                                               // 450\n\t\t\t\t// remove items from success list                                                                               // 451\n\t\t\t\tthis.successList = $.grep( this.successList, function( element ) {                                              // 452\n\t\t\t\t\treturn !( element.name in errors );                                                                            // 453\n\t\t\t\t});                                                                                                             // 454\n\t\t\t}                                                                                                                // 455\n\t\t\tif ( this.settings.showErrors ) {                                                                                // 456\n\t\t\t\tthis.settings.showErrors.call( this, this.errorMap, this.errorList );                                           // 457\n\t\t\t} else {                                                                                                         // 458\n\t\t\t\tthis.defaultShowErrors();                                                                                       // 459\n\t\t\t}                                                                                                                // 460\n\t\t},                                                                                                                // 461\n                                                                                                                    // 462\n\t\t// http://jqueryvalidation.org/Validator.resetForm/                                                               // 463\n\t\tresetForm: function() {                                                                                           // 464\n\t\t\tif ( $.fn.resetForm ) {                                                                                          // 465\n\t\t\t\t$( this.currentForm ).resetForm();                                                                              // 466\n\t\t\t}                                                                                                                // 467\n\t\t\tthis.submitted = {};                                                                                             // 468\n\t\t\tthis.lastElement = null;                                                                                         // 469\n\t\t\tthis.prepareForm();                                                                                              // 470\n\t\t\tthis.hideErrors();                                                                                               // 471\n\t\t\tvar i, elements = this.elements()                                                                                // 472\n\t\t\t\t.removeData( \"previousValue\" )                                                                                  // 473\n\t\t\t\t.removeAttr( \"aria-invalid\" );                                                                                  // 474\n                                                                                                                    // 475\n\t\t\tif ( this.settings.unhighlight ) {                                                                               // 476\n\t\t\t\tfor ( i = 0; elements[ i ]; i++ ) {                                                                             // 477\n\t\t\t\t\tthis.settings.unhighlight.call( this, elements[ i ],                                                           // 478\n\t\t\t\t\t\tthis.settings.errorClass, \"\" );                                                                               // 479\n\t\t\t\t}                                                                                                               // 480\n\t\t\t} else {                                                                                                         // 481\n\t\t\t\telements.removeClass( this.settings.errorClass );                                                               // 482\n\t\t\t}                                                                                                                // 483\n\t\t},                                                                                                                // 484\n                                                                                                                    // 485\n\t\tnumberOfInvalids: function() {                                                                                    // 486\n\t\t\treturn this.objectLength( this.invalid );                                                                        // 487\n\t\t},                                                                                                                // 488\n                                                                                                                    // 489\n\t\tobjectLength: function( obj ) {                                                                                   // 490\n\t\t\t/* jshint unused: false */                                                                                       // 491\n\t\t\tvar count = 0,                                                                                                   // 492\n\t\t\t\ti;                                                                                                              // 493\n\t\t\tfor ( i in obj ) {                                                                                               // 494\n\t\t\t\tcount++;                                                                                                        // 495\n\t\t\t}                                                                                                                // 496\n\t\t\treturn count;                                                                                                    // 497\n\t\t},                                                                                                                // 498\n                                                                                                                    // 499\n\t\thideErrors: function() {                                                                                          // 500\n\t\t\tthis.hideThese( this.toHide );                                                                                   // 501\n\t\t},                                                                                                                // 502\n                                                                                                                    // 503\n\t\thideThese: function( errors ) {                                                                                   // 504\n\t\t\terrors.not( this.containers ).text( \"\" );                                                                        // 505\n\t\t\tthis.addWrapper( errors ).hide();                                                                                // 506\n\t\t},                                                                                                                // 507\n                                                                                                                    // 508\n\t\tvalid: function() {                                                                                               // 509\n\t\t\treturn this.size() === 0;                                                                                        // 510\n\t\t},                                                                                                                // 511\n                                                                                                                    // 512\n\t\tsize: function() {                                                                                                // 513\n\t\t\treturn this.errorList.length;                                                                                    // 514\n\t\t},                                                                                                                // 515\n                                                                                                                    // 516\n\t\tfocusInvalid: function() {                                                                                        // 517\n\t\t\tif ( this.settings.focusInvalid ) {                                                                              // 518\n\t\t\t\ttry {                                                                                                           // 519\n\t\t\t\t\t$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [])                        // 520\n\t\t\t\t\t.filter( \":visible\" )                                                                                          // 521\n\t\t\t\t\t.focus()                                                                                                       // 522\n\t\t\t\t\t// manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find\n\t\t\t\t\t.trigger( \"focusin\" );                                                                                         // 524\n\t\t\t\t} catch ( e ) {                                                                                                 // 525\n\t\t\t\t\t// ignore IE throwing errors when focusing hidden elements                                                     // 526\n\t\t\t\t}                                                                                                               // 527\n\t\t\t}                                                                                                                // 528\n\t\t},                                                                                                                // 529\n                                                                                                                    // 530\n\t\tfindLastActive: function() {                                                                                      // 531\n\t\t\tvar lastActive = this.lastActive;                                                                                // 532\n\t\t\treturn lastActive && $.grep( this.errorList, function( n ) {                                                     // 533\n\t\t\t\treturn n.element.name === lastActive.name;                                                                      // 534\n\t\t\t}).length === 1 && lastActive;                                                                                   // 535\n\t\t},                                                                                                                // 536\n                                                                                                                    // 537\n\t\telements: function() {                                                                                            // 538\n\t\t\tvar validator = this,                                                                                            // 539\n\t\t\t\trulesCache = {};                                                                                                // 540\n                                                                                                                    // 541\n\t\t\t// select all valid inputs inside the form (no submit or reset buttons)                                          // 542\n\t\t\treturn $( this.currentForm )                                                                                     // 543\n\t\t\t.find( \"input, select, textarea\" )                                                                               // 544\n\t\t\t.not( \":submit, :reset, :image, :disabled\" )                                                                     // 545\n\t\t\t.not( this.settings.ignore )                                                                                     // 546\n\t\t\t.filter( function() {                                                                                            // 547\n\t\t\t\tif ( !this.name && validator.settings.debug && window.console ) {                                               // 548\n\t\t\t\t\tconsole.error( \"%o has no name assigned\", this );                                                              // 549\n\t\t\t\t}                                                                                                               // 550\n                                                                                                                    // 551\n\t\t\t\t// select only the first element for each name, and only those with rules specified                             // 552\n\t\t\t\tif ( this.name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {                                // 553\n\t\t\t\t\treturn false;                                                                                                  // 554\n\t\t\t\t}                                                                                                               // 555\n                                                                                                                    // 556\n\t\t\t\trulesCache[ this.name ] = true;                                                                                 // 557\n\t\t\t\treturn true;                                                                                                    // 558\n\t\t\t});                                                                                                              // 559\n\t\t},                                                                                                                // 560\n                                                                                                                    // 561\n\t\tclean: function( selector ) {                                                                                     // 562\n\t\t\treturn $( selector )[ 0 ];                                                                                       // 563\n\t\t},                                                                                                                // 564\n                                                                                                                    // 565\n\t\terrors: function() {                                                                                              // 566\n\t\t\tvar errorClass = this.settings.errorClass.split( \" \" ).join( \".\" );                                              // 567\n\t\t\treturn $( this.settings.errorElement + \".\" + errorClass, this.errorContext );                                    // 568\n\t\t},                                                                                                                // 569\n                                                                                                                    // 570\n\t\treset: function() {                                                                                               // 571\n\t\t\tthis.successList = [];                                                                                           // 572\n\t\t\tthis.errorList = [];                                                                                             // 573\n\t\t\tthis.errorMap = {};                                                                                              // 574\n\t\t\tthis.toShow = $( [] );                                                                                           // 575\n\t\t\tthis.toHide = $( [] );                                                                                           // 576\n\t\t\tthis.currentElements = $( [] );                                                                                  // 577\n\t\t},                                                                                                                // 578\n                                                                                                                    // 579\n\t\tprepareForm: function() {                                                                                         // 580\n\t\t\tthis.reset();                                                                                                    // 581\n\t\t\tthis.toHide = this.errors().add( this.containers );                                                              // 582\n\t\t},                                                                                                                // 583\n                                                                                                                    // 584\n\t\tprepareElement: function( element ) {                                                                             // 585\n\t\t\tthis.reset();                                                                                                    // 586\n\t\t\tthis.toHide = this.errorsFor( element );                                                                         // 587\n\t\t},                                                                                                                // 588\n                                                                                                                    // 589\n\t\telementValue: function( element ) {                                                                               // 590\n\t\t\tvar val,                                                                                                         // 591\n\t\t\t\t$element = $( element ),                                                                                        // 592\n\t\t\t\ttype = element.type;                                                                                            // 593\n                                                                                                                    // 594\n\t\t\tif ( type === \"radio\" || type === \"checkbox\" ) {                                                                 // 595\n\t\t\t\treturn this.findByName( element.name ).filter(\":checked\").val();                                                // 596\n\t\t\t} else if ( type === \"number\" && typeof element.validity !== \"undefined\" ) {                                     // 597\n\t\t\t\treturn element.validity.badInput ? false : $element.val();                                                      // 598\n\t\t\t}                                                                                                                // 599\n                                                                                                                    // 600\n\t\t\tval = $element.val();                                                                                            // 601\n\t\t\tif ( typeof val === \"string\" ) {                                                                                 // 602\n\t\t\t\treturn val.replace(/\\r/g, \"\" );                                                                                 // 603\n\t\t\t}                                                                                                                // 604\n\t\t\treturn val;                                                                                                      // 605\n\t\t},                                                                                                                // 606\n                                                                                                                    // 607\n\t\tcheck: function( element ) {                                                                                      // 608\n\t\t\telement = this.validationTargetFor( this.clean( element ) );                                                     // 609\n                                                                                                                    // 610\n\t\t\tvar rules = $( element ).rules(),                                                                                // 611\n\t\t\t\trulesCount = $.map( rules, function( n, i ) {                                                                   // 612\n\t\t\t\t\treturn i;                                                                                                      // 613\n\t\t\t\t}).length,                                                                                                      // 614\n\t\t\t\tdependencyMismatch = false,                                                                                     // 615\n\t\t\t\tval = this.elementValue( element ),                                                                             // 616\n\t\t\t\tresult, method, rule;                                                                                           // 617\n                                                                                                                    // 618\n\t\t\tfor ( method in rules ) {                                                                                        // 619\n\t\t\t\trule = { method: method, parameters: rules[ method ] };                                                         // 620\n\t\t\t\ttry {                                                                                                           // 621\n                                                                                                                    // 622\n\t\t\t\t\tresult = $.validator.methods[ method ].call( this, val, element, rule.parameters );                            // 623\n                                                                                                                    // 624\n\t\t\t\t\t// if a method indicates that the field is optional and therefore valid,                                       // 625\n\t\t\t\t\t// don't mark it as valid when there are no other rules                                                        // 626\n\t\t\t\t\tif ( result === \"dependency-mismatch\" && rulesCount === 1 ) {                                                  // 627\n\t\t\t\t\t\tdependencyMismatch = true;                                                                                    // 628\n\t\t\t\t\t\tcontinue;                                                                                                     // 629\n\t\t\t\t\t}                                                                                                              // 630\n\t\t\t\t\tdependencyMismatch = false;                                                                                    // 631\n                                                                                                                    // 632\n\t\t\t\t\tif ( result === \"pending\" ) {                                                                                  // 633\n\t\t\t\t\t\tthis.toHide = this.toHide.not( this.errorsFor( element ) );                                                   // 634\n\t\t\t\t\t\treturn;                                                                                                       // 635\n\t\t\t\t\t}                                                                                                              // 636\n                                                                                                                    // 637\n\t\t\t\t\tif ( !result ) {                                                                                               // 638\n\t\t\t\t\t\tthis.formatAndAdd( element, rule );                                                                           // 639\n\t\t\t\t\t\treturn false;                                                                                                 // 640\n\t\t\t\t\t}                                                                                                              // 641\n\t\t\t\t} catch ( e ) {                                                                                                 // 642\n\t\t\t\t\tif ( this.settings.debug && window.console ) {                                                                 // 643\n\t\t\t\t\t\tconsole.log( \"Exception occurred when checking element \" + element.id + \", check the '\" + rule.method + \"' method.\", e );\n\t\t\t\t\t}                                                                                                              // 645\n\t\t\t\t\tif ( e instanceof TypeError ) {                                                                                // 646\n\t\t\t\t\t\te.message += \".  Exception occurred when checking element \" + element.id + \", check the '\" + rule.method + \"' method.\";\n\t\t\t\t\t}                                                                                                              // 648\n                                                                                                                    // 649\n\t\t\t\t\tthrow e;                                                                                                       // 650\n\t\t\t\t}                                                                                                               // 651\n\t\t\t}                                                                                                                // 652\n\t\t\tif ( dependencyMismatch ) {                                                                                      // 653\n\t\t\t\treturn;                                                                                                         // 654\n\t\t\t}                                                                                                                // 655\n\t\t\tif ( this.objectLength( rules ) ) {                                                                              // 656\n\t\t\t\tthis.successList.push( element );                                                                               // 657\n\t\t\t}                                                                                                                // 658\n\t\t\treturn true;                                                                                                     // 659\n\t\t},                                                                                                                // 660\n                                                                                                                    // 661\n\t\t// return the custom message for the given element and validation method                                          // 662\n\t\t// specified in the element's HTML5 data attribute                                                                // 663\n\t\t// return the generic message if present and no method specific message is present                                // 664\n\t\tcustomDataMessage: function( element, method ) {                                                                  // 665\n\t\t\treturn $( element ).data( \"msg\" + method.charAt( 0 ).toUpperCase() +                                             // 666\n\t\t\t\tmethod.substring( 1 ).toLowerCase() ) || $( element ).data( \"msg\" );                                            // 667\n\t\t},                                                                                                                // 668\n                                                                                                                    // 669\n\t\t// return the custom message for the given element name and validation method                                     // 670\n\t\tcustomMessage: function( name, method ) {                                                                         // 671\n\t\t\tvar m = this.settings.messages[ name ];                                                                          // 672\n\t\t\treturn m && ( m.constructor === String ? m : m[ method ]);                                                       // 673\n\t\t},                                                                                                                // 674\n                                                                                                                    // 675\n\t\t// return the first defined argument, allowing empty strings                                                      // 676\n\t\tfindDefined: function() {                                                                                         // 677\n\t\t\tfor ( var i = 0; i < arguments.length; i++) {                                                                    // 678\n\t\t\t\tif ( arguments[ i ] !== undefined ) {                                                                           // 679\n\t\t\t\t\treturn arguments[ i ];                                                                                         // 680\n\t\t\t\t}                                                                                                               // 681\n\t\t\t}                                                                                                                // 682\n\t\t\treturn undefined;                                                                                                // 683\n\t\t},                                                                                                                // 684\n                                                                                                                    // 685\n\t\tdefaultMessage: function( element, method ) {                                                                     // 686\n\t\t\treturn this.findDefined(                                                                                         // 687\n\t\t\t\tthis.customMessage( element.name, method ),                                                                     // 688\n\t\t\t\tthis.customDataMessage( element, method ),                                                                      // 689\n\t\t\t\t// title is never undefined, so handle empty string as undefined                                                // 690\n\t\t\t\t!this.settings.ignoreTitle && element.title || undefined,                                                       // 691\n\t\t\t\t$.validator.messages[ method ],                                                                                 // 692\n\t\t\t\t\"<strong>Warning: No message defined for \" + element.name + \"</strong>\"                                         // 693\n\t\t\t);                                                                                                               // 694\n\t\t},                                                                                                                // 695\n                                                                                                                    // 696\n\t\tformatAndAdd: function( element, rule ) {                                                                         // 697\n\t\t\tvar message = this.defaultMessage( element, rule.method ),                                                       // 698\n\t\t\t\ttheregex = /\\$?\\{(\\d+)\\}/g;                                                                                     // 699\n\t\t\tif ( typeof message === \"function\" ) {                                                                           // 700\n\t\t\t\tmessage = message.call( this, rule.parameters, element );                                                       // 701\n\t\t\t} else if ( theregex.test( message ) ) {                                                                         // 702\n\t\t\t\tmessage = $.validator.format( message.replace( theregex, \"{$1}\" ), rule.parameters );                           // 703\n\t\t\t}                                                                                                                // 704\n\t\t\tthis.errorList.push({                                                                                            // 705\n\t\t\t\tmessage: message,                                                                                               // 706\n\t\t\t\telement: element,                                                                                               // 707\n\t\t\t\tmethod: rule.method                                                                                             // 708\n\t\t\t});                                                                                                              // 709\n                                                                                                                    // 710\n\t\t\tthis.errorMap[ element.name ] = message;                                                                         // 711\n\t\t\tthis.submitted[ element.name ] = message;                                                                        // 712\n\t\t},                                                                                                                // 713\n                                                                                                                    // 714\n\t\taddWrapper: function( toToggle ) {                                                                                // 715\n\t\t\tif ( this.settings.wrapper ) {                                                                                   // 716\n\t\t\t\ttoToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );                                            // 717\n\t\t\t}                                                                                                                // 718\n\t\t\treturn toToggle;                                                                                                 // 719\n\t\t},                                                                                                                // 720\n                                                                                                                    // 721\n\t\tdefaultShowErrors: function() {                                                                                   // 722\n\t\t\tvar i, elements, error;                                                                                          // 723\n\t\t\tfor ( i = 0; this.errorList[ i ]; i++ ) {                                                                        // 724\n\t\t\t\terror = this.errorList[ i ];                                                                                    // 725\n\t\t\t\tif ( this.settings.highlight ) {                                                                                // 726\n\t\t\t\t\tthis.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );       // 727\n\t\t\t\t}                                                                                                               // 728\n\t\t\t\tthis.showLabel( error.element, error.message );                                                                 // 729\n\t\t\t}                                                                                                                // 730\n\t\t\tif ( this.errorList.length ) {                                                                                   // 731\n\t\t\t\tthis.toShow = this.toShow.add( this.containers );                                                               // 732\n\t\t\t}                                                                                                                // 733\n\t\t\tif ( this.settings.success ) {                                                                                   // 734\n\t\t\t\tfor ( i = 0; this.successList[ i ]; i++ ) {                                                                     // 735\n\t\t\t\t\tthis.showLabel( this.successList[ i ] );                                                                       // 736\n\t\t\t\t}                                                                                                               // 737\n\t\t\t}                                                                                                                // 738\n\t\t\tif ( this.settings.unhighlight ) {                                                                               // 739\n\t\t\t\tfor ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {                                            // 740\n\t\t\t\t\tthis.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );     // 741\n\t\t\t\t}                                                                                                               // 742\n\t\t\t}                                                                                                                // 743\n\t\t\tthis.toHide = this.toHide.not( this.toShow );                                                                    // 744\n\t\t\tthis.hideErrors();                                                                                               // 745\n\t\t\tthis.addWrapper( this.toShow ).show();                                                                           // 746\n\t\t},                                                                                                                // 747\n                                                                                                                    // 748\n\t\tvalidElements: function() {                                                                                       // 749\n\t\t\treturn this.currentElements.not( this.invalidElements() );                                                       // 750\n\t\t},                                                                                                                // 751\n                                                                                                                    // 752\n\t\tinvalidElements: function() {                                                                                     // 753\n\t\t\treturn $( this.errorList ).map(function() {                                                                      // 754\n\t\t\t\treturn this.element;                                                                                            // 755\n\t\t\t});                                                                                                              // 756\n\t\t},                                                                                                                // 757\n                                                                                                                    // 758\n\t\tshowLabel: function( element, message ) {                                                                         // 759\n\t\t\tvar place, group, errorID,                                                                                       // 760\n\t\t\t\terror = this.errorsFor( element ),                                                                              // 761\n\t\t\t\telementID = this.idOrName( element ),                                                                           // 762\n\t\t\t\tdescribedBy = $( element ).attr( \"aria-describedby\" );                                                          // 763\n\t\t\tif ( error.length ) {                                                                                            // 764\n\t\t\t\t// refresh error/success class                                                                                  // 765\n\t\t\t\terror.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );                             // 766\n\t\t\t\t// replace message on existing label                                                                            // 767\n\t\t\t\terror.html( message );                                                                                          // 768\n\t\t\t} else {                                                                                                         // 769\n\t\t\t\t// create error element                                                                                         // 770\n\t\t\t\terror = $( \"<\" + this.settings.errorElement + \">\" )                                                             // 771\n\t\t\t\t\t.attr( \"id\", elementID + \"-error\" )                                                                            // 772\n\t\t\t\t\t.addClass( this.settings.errorClass )                                                                          // 773\n\t\t\t\t\t.html( message || \"\" );                                                                                        // 774\n                                                                                                                    // 775\n\t\t\t\t// Maintain reference to the element to be placed into the DOM                                                  // 776\n\t\t\t\tplace = error;                                                                                                  // 777\n\t\t\t\tif ( this.settings.wrapper ) {                                                                                  // 778\n\t\t\t\t\t// make sure the element is visible, even in IE                                                                // 779\n\t\t\t\t\t// actually showing the wrapped element is handled elsewhere                                                   // 780\n\t\t\t\t\tplace = error.hide().show().wrap( \"<\" + this.settings.wrapper + \"/>\" ).parent();                               // 781\n\t\t\t\t}                                                                                                               // 782\n\t\t\t\tif ( this.labelContainer.length ) {                                                                             // 783\n\t\t\t\t\tthis.labelContainer.append( place );                                                                           // 784\n\t\t\t\t} else if ( this.settings.errorPlacement ) {                                                                    // 785\n\t\t\t\t\tthis.settings.errorPlacement( place, $( element ) );                                                           // 786\n\t\t\t\t} else {                                                                                                        // 787\n\t\t\t\t\tplace.insertAfter( element );                                                                                  // 788\n\t\t\t\t}                                                                                                               // 789\n                                                                                                                    // 790\n\t\t\t\t// Link error back to the element                                                                               // 791\n\t\t\t\tif ( error.is( \"label\" ) ) {                                                                                    // 792\n\t\t\t\t\t// If the error is a label, then associate using 'for'                                                         // 793\n\t\t\t\t\terror.attr( \"for\", elementID );                                                                                // 794\n\t\t\t\t} else if ( error.parents( \"label[for='\" + elementID + \"']\" ).length === 0 ) {                                  // 795\n\t\t\t\t\t// If the element is not a child of an associated label, then it's necessary                                   // 796\n\t\t\t\t\t// to explicitly apply aria-describedby                                                                        // 797\n                                                                                                                    // 798\n\t\t\t\t\terrorID = error.attr( \"id\" ).replace( /(:|\\.|\\[|\\]|\\$)/g, \"\\\\$1\");                                             // 799\n\t\t\t\t\t// Respect existing non-error aria-describedby                                                                 // 800\n\t\t\t\t\tif ( !describedBy ) {                                                                                          // 801\n\t\t\t\t\t\tdescribedBy = errorID;                                                                                        // 802\n\t\t\t\t\t} else if ( !describedBy.match( new RegExp( \"\\\\b\" + errorID + \"\\\\b\" ) ) ) {                                    // 803\n\t\t\t\t\t\t// Add to end of list if not already present                                                                  // 804\n\t\t\t\t\t\tdescribedBy += \" \" + errorID;                                                                                 // 805\n\t\t\t\t\t}                                                                                                              // 806\n\t\t\t\t\t$( element ).attr( \"aria-describedby\", describedBy );                                                          // 807\n                                                                                                                    // 808\n\t\t\t\t\t// If this element is grouped, then assign to all elements in the same group                                   // 809\n\t\t\t\t\tgroup = this.groups[ element.name ];                                                                           // 810\n\t\t\t\t\tif ( group ) {                                                                                                 // 811\n\t\t\t\t\t\t$.each( this.groups, function( name, testgroup ) {                                                            // 812\n\t\t\t\t\t\t\tif ( testgroup === group ) {                                                                                 // 813\n\t\t\t\t\t\t\t\t$( \"[name='\" + name + \"']\", this.currentForm )                                                              // 814\n\t\t\t\t\t\t\t\t\t.attr( \"aria-describedby\", error.attr( \"id\" ) );                                                           // 815\n\t\t\t\t\t\t\t}                                                                                                            // 816\n\t\t\t\t\t\t});                                                                                                           // 817\n\t\t\t\t\t}                                                                                                              // 818\n\t\t\t\t}                                                                                                               // 819\n\t\t\t}                                                                                                                // 820\n\t\t\tif ( !message && this.settings.success ) {                                                                       // 821\n\t\t\t\terror.text( \"\" );                                                                                               // 822\n\t\t\t\tif ( typeof this.settings.success === \"string\" ) {                                                              // 823\n\t\t\t\t\terror.addClass( this.settings.success );                                                                       // 824\n\t\t\t\t} else {                                                                                                        // 825\n\t\t\t\t\tthis.settings.success( error, element );                                                                       // 826\n\t\t\t\t}                                                                                                               // 827\n\t\t\t}                                                                                                                // 828\n\t\t\tthis.toShow = this.toShow.add( error );                                                                          // 829\n\t\t},                                                                                                                // 830\n                                                                                                                    // 831\n\t\terrorsFor: function( element ) {                                                                                  // 832\n\t\t\tvar name = this.idOrName( element ),                                                                             // 833\n\t\t\t\tdescriber = $( element ).attr( \"aria-describedby\" ),                                                            // 834\n\t\t\t\tselector = \"label[for='\" + name + \"'], label[for='\" + name + \"'] *\";                                            // 835\n                                                                                                                    // 836\n\t\t\t// aria-describedby should directly reference the error element                                                  // 837\n\t\t\tif ( describer ) {                                                                                               // 838\n\t\t\t\tselector = selector + \", #\" + describer.replace( /\\s+/g, \", #\" );                                               // 839\n\t\t\t}                                                                                                                // 840\n\t\t\treturn this                                                                                                      // 841\n\t\t\t\t.errors()                                                                                                       // 842\n\t\t\t\t.filter( selector );                                                                                            // 843\n\t\t},                                                                                                                // 844\n                                                                                                                    // 845\n\t\tidOrName: function( element ) {                                                                                   // 846\n\t\t\treturn this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name ); // 847\n\t\t},                                                                                                                // 848\n                                                                                                                    // 849\n\t\tvalidationTargetFor: function( element ) {                                                                        // 850\n                                                                                                                    // 851\n\t\t\t// If radio/checkbox, validate first element in group instead                                                    // 852\n\t\t\tif ( this.checkable( element ) ) {                                                                               // 853\n\t\t\t\telement = this.findByName( element.name );                                                                      // 854\n\t\t\t}                                                                                                                // 855\n                                                                                                                    // 856\n\t\t\t// Always apply ignore filter                                                                                    // 857\n\t\t\treturn $( element ).not( this.settings.ignore )[ 0 ];                                                            // 858\n\t\t},                                                                                                                // 859\n                                                                                                                    // 860\n\t\tcheckable: function( element ) {                                                                                  // 861\n\t\t\treturn ( /radio|checkbox/i ).test( element.type );                                                               // 862\n\t\t},                                                                                                                // 863\n                                                                                                                    // 864\n\t\tfindByName: function( name ) {                                                                                    // 865\n\t\t\treturn $( this.currentForm ).find( \"[name='\" + name + \"']\" );                                                    // 866\n\t\t},                                                                                                                // 867\n                                                                                                                    // 868\n\t\tgetLength: function( value, element ) {                                                                           // 869\n\t\t\tswitch ( element.nodeName.toLowerCase() ) {                                                                      // 870\n\t\t\tcase \"select\":                                                                                                   // 871\n\t\t\t\treturn $( \"option:selected\", element ).length;                                                                  // 872\n\t\t\tcase \"input\":                                                                                                    // 873\n\t\t\t\tif ( this.checkable( element ) ) {                                                                              // 874\n\t\t\t\t\treturn this.findByName( element.name ).filter( \":checked\" ).length;                                            // 875\n\t\t\t\t}                                                                                                               // 876\n\t\t\t}                                                                                                                // 877\n\t\t\treturn value.length;                                                                                             // 878\n\t\t},                                                                                                                // 879\n                                                                                                                    // 880\n\t\tdepend: function( param, element ) {                                                                              // 881\n\t\t\treturn this.dependTypes[typeof param] ? this.dependTypes[typeof param]( param, element ) : true;                 // 882\n\t\t},                                                                                                                // 883\n                                                                                                                    // 884\n\t\tdependTypes: {                                                                                                    // 885\n\t\t\t\"boolean\": function( param ) {                                                                                   // 886\n\t\t\t\treturn param;                                                                                                   // 887\n\t\t\t},                                                                                                               // 888\n\t\t\t\"string\": function( param, element ) {                                                                           // 889\n\t\t\t\treturn !!$( param, element.form ).length;                                                                       // 890\n\t\t\t},                                                                                                               // 891\n\t\t\t\"function\": function( param, element ) {                                                                         // 892\n\t\t\t\treturn param( element );                                                                                        // 893\n\t\t\t}                                                                                                                // 894\n\t\t},                                                                                                                // 895\n                                                                                                                    // 896\n\t\toptional: function( element ) {                                                                                   // 897\n\t\t\tvar val = this.elementValue( element );                                                                          // 898\n\t\t\treturn !$.validator.methods.required.call( this, val, element ) && \"dependency-mismatch\";                        // 899\n\t\t},                                                                                                                // 900\n                                                                                                                    // 901\n\t\tstartRequest: function( element ) {                                                                               // 902\n\t\t\tif ( !this.pending[ element.name ] ) {                                                                           // 903\n\t\t\t\tthis.pendingRequest++;                                                                                          // 904\n\t\t\t\tthis.pending[ element.name ] = true;                                                                            // 905\n\t\t\t}                                                                                                                // 906\n\t\t},                                                                                                                // 907\n                                                                                                                    // 908\n\t\tstopRequest: function( element, valid ) {                                                                         // 909\n\t\t\tthis.pendingRequest--;                                                                                           // 910\n\t\t\t// sometimes synchronization fails, make sure pendingRequest is never < 0                                        // 911\n\t\t\tif ( this.pendingRequest < 0 ) {                                                                                 // 912\n\t\t\t\tthis.pendingRequest = 0;                                                                                        // 913\n\t\t\t}                                                                                                                // 914\n\t\t\tdelete this.pending[ element.name ];                                                                             // 915\n\t\t\tif ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {                                 // 916\n\t\t\t\t$( this.currentForm ).submit();                                                                                 // 917\n\t\t\t\tthis.formSubmitted = false;                                                                                     // 918\n\t\t\t} else if (!valid && this.pendingRequest === 0 && this.formSubmitted ) {                                         // 919\n\t\t\t\t$( this.currentForm ).triggerHandler( \"invalid-form\", [ this ]);                                                // 920\n\t\t\t\tthis.formSubmitted = false;                                                                                     // 921\n\t\t\t}                                                                                                                // 922\n\t\t},                                                                                                                // 923\n                                                                                                                    // 924\n\t\tpreviousValue: function( element ) {                                                                              // 925\n\t\t\treturn $.data( element, \"previousValue\" ) || $.data( element, \"previousValue\", {                                 // 926\n\t\t\t\told: null,                                                                                                      // 927\n\t\t\t\tvalid: true,                                                                                                    // 928\n\t\t\t\tmessage: this.defaultMessage( element, \"remote\" )                                                               // 929\n\t\t\t});                                                                                                              // 930\n\t\t},                                                                                                                // 931\n                                                                                                                    // 932\n\t\t// cleans up all forms and elements, removes validator-specific events                                            // 933\n\t\tdestroy: function() {                                                                                             // 934\n\t\t\tthis.resetForm();                                                                                                // 935\n                                                                                                                    // 936\n\t\t\t$( this.currentForm )                                                                                            // 937\n\t\t\t\t.off( \".validate\" )                                                                                             // 938\n\t\t\t\t.removeData( \"validator\" );                                                                                     // 939\n\t\t}                                                                                                                 // 940\n                                                                                                                    // 941\n\t},                                                                                                                 // 942\n                                                                                                                    // 943\n\tclassRuleSettings: {                                                                                               // 944\n\t\trequired: { required: true },                                                                                     // 945\n\t\temail: { email: true },                                                                                           // 946\n\t\turl: { url: true },                                                                                               // 947\n\t\tdate: { date: true },                                                                                             // 948\n\t\tdateISO: { dateISO: true },                                                                                       // 949\n\t\tnumber: { number: true },                                                                                         // 950\n\t\tdigits: { digits: true },                                                                                         // 951\n\t\tcreditcard: { creditcard: true }                                                                                  // 952\n\t},                                                                                                                 // 953\n                                                                                                                    // 954\n\taddClassRules: function( className, rules ) {                                                                      // 955\n\t\tif ( className.constructor === String ) {                                                                         // 956\n\t\t\tthis.classRuleSettings[ className ] = rules;                                                                     // 957\n\t\t} else {                                                                                                          // 958\n\t\t\t$.extend( this.classRuleSettings, className );                                                                   // 959\n\t\t}                                                                                                                 // 960\n\t},                                                                                                                 // 961\n                                                                                                                    // 962\n\tclassRules: function( element ) {                                                                                  // 963\n\t\tvar rules = {},                                                                                                   // 964\n\t\t\tclasses = $( element ).attr( \"class\" );                                                                          // 965\n                                                                                                                    // 966\n\t\tif ( classes ) {                                                                                                  // 967\n\t\t\t$.each( classes.split( \" \" ), function() {                                                                       // 968\n\t\t\t\tif ( this in $.validator.classRuleSettings ) {                                                                  // 969\n\t\t\t\t\t$.extend( rules, $.validator.classRuleSettings[ this ]);                                                       // 970\n\t\t\t\t}                                                                                                               // 971\n\t\t\t});                                                                                                              // 972\n\t\t}                                                                                                                 // 973\n\t\treturn rules;                                                                                                     // 974\n\t},                                                                                                                 // 975\n                                                                                                                    // 976\n\tnormalizeAttributeRule: function( rules, type, method, value ) {                                                   // 977\n                                                                                                                    // 978\n\t\t// convert the value to a number for number inputs, and for text for backwards compability                        // 979\n\t\t// allows type=\"date\" and others to be compared as strings                                                        // 980\n\t\tif ( /min|max/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {                        // 981\n\t\t\tvalue = Number( value );                                                                                         // 982\n                                                                                                                    // 983\n\t\t\t// Support Opera Mini, which returns NaN for undefined minlength                                                 // 984\n\t\t\tif ( isNaN( value ) ) {                                                                                          // 985\n\t\t\t\tvalue = undefined;                                                                                              // 986\n\t\t\t}                                                                                                                // 987\n\t\t}                                                                                                                 // 988\n                                                                                                                    // 989\n\t\tif ( value || value === 0 ) {                                                                                     // 990\n\t\t\trules[ method ] = value;                                                                                         // 991\n\t\t} else if ( type === method && type !== \"range\" ) {                                                               // 992\n                                                                                                                    // 993\n\t\t\t// exception: the jquery validate 'range' method                                                                 // 994\n\t\t\t// does not test for the html5 'range' type                                                                      // 995\n\t\t\trules[ method ] = true;                                                                                          // 996\n\t\t}                                                                                                                 // 997\n\t},                                                                                                                 // 998\n                                                                                                                    // 999\n\tattributeRules: function( element ) {                                                                              // 1000\n\t\tvar rules = {},                                                                                                   // 1001\n\t\t\t$element = $( element ),                                                                                         // 1002\n\t\t\ttype = element.getAttribute( \"type\" ),                                                                           // 1003\n\t\t\tmethod, value;                                                                                                   // 1004\n                                                                                                                    // 1005\n\t\tfor ( method in $.validator.methods ) {                                                                           // 1006\n                                                                                                                    // 1007\n\t\t\t// support for <input required> in both html5 and older browsers                                                 // 1008\n\t\t\tif ( method === \"required\" ) {                                                                                   // 1009\n\t\t\t\tvalue = element.getAttribute( method );                                                                         // 1010\n                                                                                                                    // 1011\n\t\t\t\t// Some browsers return an empty string for the required attribute                                              // 1012\n\t\t\t\t// and non-HTML5 browsers might have required=\"\" markup                                                         // 1013\n\t\t\t\tif ( value === \"\" ) {                                                                                           // 1014\n\t\t\t\t\tvalue = true;                                                                                                  // 1015\n\t\t\t\t}                                                                                                               // 1016\n                                                                                                                    // 1017\n\t\t\t\t// force non-HTML5 browsers to return bool                                                                      // 1018\n\t\t\t\tvalue = !!value;                                                                                                // 1019\n\t\t\t} else {                                                                                                         // 1020\n\t\t\t\tvalue = $element.attr( method );                                                                                // 1021\n\t\t\t}                                                                                                                // 1022\n                                                                                                                    // 1023\n\t\t\tthis.normalizeAttributeRule( rules, type, method, value );                                                       // 1024\n\t\t}                                                                                                                 // 1025\n                                                                                                                    // 1026\n\t\t// maxlength may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs                       // 1027\n\t\tif ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {                                        // 1028\n\t\t\tdelete rules.maxlength;                                                                                          // 1029\n\t\t}                                                                                                                 // 1030\n                                                                                                                    // 1031\n\t\treturn rules;                                                                                                     // 1032\n\t},                                                                                                                 // 1033\n                                                                                                                    // 1034\n\tdataRules: function( element ) {                                                                                   // 1035\n\t\tvar rules = {},                                                                                                   // 1036\n\t\t\t$element = $( element ),                                                                                         // 1037\n\t\t\ttype = element.getAttribute( \"type\" ),                                                                           // 1038\n\t\t\tmethod, value;                                                                                                   // 1039\n                                                                                                                    // 1040\n\t\tfor ( method in $.validator.methods ) {                                                                           // 1041\n\t\t\tvalue = $element.data( \"rule\" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );        // 1042\n\t\t\tthis.normalizeAttributeRule( rules, type, method, value );                                                       // 1043\n\t\t}                                                                                                                 // 1044\n\t\treturn rules;                                                                                                     // 1045\n\t},                                                                                                                 // 1046\n                                                                                                                    // 1047\n\tstaticRules: function( element ) {                                                                                 // 1048\n\t\tvar rules = {},                                                                                                   // 1049\n\t\t\tvalidator = $.data( element.form, \"validator\" );                                                                 // 1050\n                                                                                                                    // 1051\n\t\tif ( validator.settings.rules ) {                                                                                 // 1052\n\t\t\trules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};                             // 1053\n\t\t}                                                                                                                 // 1054\n\t\treturn rules;                                                                                                     // 1055\n\t},                                                                                                                 // 1056\n                                                                                                                    // 1057\n\tnormalizeRules: function( rules, element ) {                                                                       // 1058\n\t\t// handle dependency check                                                                                        // 1059\n\t\t$.each( rules, function( prop, val ) {                                                                            // 1060\n\t\t\t// ignore rule when param is explicitly false, eg. required:false                                                // 1061\n\t\t\tif ( val === false ) {                                                                                           // 1062\n\t\t\t\tdelete rules[ prop ];                                                                                           // 1063\n\t\t\t\treturn;                                                                                                         // 1064\n\t\t\t}                                                                                                                // 1065\n\t\t\tif ( val.param || val.depends ) {                                                                                // 1066\n\t\t\t\tvar keepRule = true;                                                                                            // 1067\n\t\t\t\tswitch ( typeof val.depends ) {                                                                                 // 1068\n\t\t\t\tcase \"string\":                                                                                                  // 1069\n\t\t\t\t\tkeepRule = !!$( val.depends, element.form ).length;                                                            // 1070\n\t\t\t\t\tbreak;                                                                                                         // 1071\n\t\t\t\tcase \"function\":                                                                                                // 1072\n\t\t\t\t\tkeepRule = val.depends.call( element, element );                                                               // 1073\n\t\t\t\t\tbreak;                                                                                                         // 1074\n\t\t\t\t}                                                                                                               // 1075\n\t\t\t\tif ( keepRule ) {                                                                                               // 1076\n\t\t\t\t\trules[ prop ] = val.param !== undefined ? val.param : true;                                                    // 1077\n\t\t\t\t} else {                                                                                                        // 1078\n\t\t\t\t\tdelete rules[ prop ];                                                                                          // 1079\n\t\t\t\t}                                                                                                               // 1080\n\t\t\t}                                                                                                                // 1081\n\t\t});                                                                                                               // 1082\n                                                                                                                    // 1083\n\t\t// evaluate parameters                                                                                            // 1084\n\t\t$.each( rules, function( rule, parameter ) {                                                                      // 1085\n\t\t\trules[ rule ] = $.isFunction( parameter ) ? parameter( element ) : parameter;                                    // 1086\n\t\t});                                                                                                               // 1087\n                                                                                                                    // 1088\n\t\t// clean number parameters                                                                                        // 1089\n\t\t$.each([ \"minlength\", \"maxlength\" ], function() {                                                                 // 1090\n\t\t\tif ( rules[ this ] ) {                                                                                           // 1091\n\t\t\t\trules[ this ] = Number( rules[ this ] );                                                                        // 1092\n\t\t\t}                                                                                                                // 1093\n\t\t});                                                                                                               // 1094\n\t\t$.each([ \"rangelength\", \"range\" ], function() {                                                                   // 1095\n\t\t\tvar parts;                                                                                                       // 1096\n\t\t\tif ( rules[ this ] ) {                                                                                           // 1097\n\t\t\t\tif ( $.isArray( rules[ this ] ) ) {                                                                             // 1098\n\t\t\t\t\trules[ this ] = [ Number( rules[ this ][ 0 ]), Number( rules[ this ][ 1 ] ) ];                                 // 1099\n\t\t\t\t} else if ( typeof rules[ this ] === \"string\" ) {                                                               // 1100\n\t\t\t\t\tparts = rules[ this ].replace(/[\\[\\]]/g, \"\" ).split( /[\\s,]+/ );                                               // 1101\n\t\t\t\t\trules[ this ] = [ Number( parts[ 0 ]), Number( parts[ 1 ] ) ];                                                 // 1102\n\t\t\t\t}                                                                                                               // 1103\n\t\t\t}                                                                                                                // 1104\n\t\t});                                                                                                               // 1105\n                                                                                                                    // 1106\n\t\tif ( $.validator.autoCreateRanges ) {                                                                             // 1107\n\t\t\t// auto-create ranges                                                                                            // 1108\n\t\t\tif ( rules.min != null && rules.max != null ) {                                                                  // 1109\n\t\t\t\trules.range = [ rules.min, rules.max ];                                                                         // 1110\n\t\t\t\tdelete rules.min;                                                                                               // 1111\n\t\t\t\tdelete rules.max;                                                                                               // 1112\n\t\t\t}                                                                                                                // 1113\n\t\t\tif ( rules.minlength != null && rules.maxlength != null ) {                                                      // 1114\n\t\t\t\trules.rangelength = [ rules.minlength, rules.maxlength ];                                                       // 1115\n\t\t\t\tdelete rules.minlength;                                                                                         // 1116\n\t\t\t\tdelete rules.maxlength;                                                                                         // 1117\n\t\t\t}                                                                                                                // 1118\n\t\t}                                                                                                                 // 1119\n                                                                                                                    // 1120\n\t\treturn rules;                                                                                                     // 1121\n\t},                                                                                                                 // 1122\n                                                                                                                    // 1123\n\t// Converts a simple string to a {string: true} rule, e.g., \"required\" to {required:true}                          // 1124\n\tnormalizeRule: function( data ) {                                                                                  // 1125\n\t\tif ( typeof data === \"string\" ) {                                                                                 // 1126\n\t\t\tvar transformed = {};                                                                                            // 1127\n\t\t\t$.each( data.split( /\\s/ ), function() {                                                                         // 1128\n\t\t\t\ttransformed[ this ] = true;                                                                                     // 1129\n\t\t\t});                                                                                                              // 1130\n\t\t\tdata = transformed;                                                                                              // 1131\n\t\t}                                                                                                                 // 1132\n\t\treturn data;                                                                                                      // 1133\n\t},                                                                                                                 // 1134\n                                                                                                                    // 1135\n\t// http://jqueryvalidation.org/jQuery.validator.addMethod/                                                         // 1136\n\taddMethod: function( name, method, message ) {                                                                     // 1137\n\t\t$.validator.methods[ name ] = method;                                                                             // 1138\n\t\t$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];                    // 1139\n\t\tif ( method.length < 3 ) {                                                                                        // 1140\n\t\t\t$.validator.addClassRules( name, $.validator.normalizeRule( name ) );                                            // 1141\n\t\t}                                                                                                                 // 1142\n\t},                                                                                                                 // 1143\n                                                                                                                    // 1144\n\tmethods: {                                                                                                         // 1145\n                                                                                                                    // 1146\n\t\t// http://jqueryvalidation.org/required-method/                                                                   // 1147\n\t\trequired: function( value, element, param ) {                                                                     // 1148\n\t\t\t// check if dependency is met                                                                                    // 1149\n\t\t\tif ( !this.depend( param, element ) ) {                                                                          // 1150\n\t\t\t\treturn \"dependency-mismatch\";                                                                                   // 1151\n\t\t\t}                                                                                                                // 1152\n\t\t\tif ( element.nodeName.toLowerCase() === \"select\" ) {                                                             // 1153\n\t\t\t\t// could be an array for select-multiple or a string, both are fine this way                                    // 1154\n\t\t\t\tvar val = $( element ).val();                                                                                   // 1155\n\t\t\t\treturn val && val.length > 0;                                                                                   // 1156\n\t\t\t}                                                                                                                // 1157\n\t\t\tif ( this.checkable( element ) ) {                                                                               // 1158\n\t\t\t\treturn this.getLength( value, element ) > 0;                                                                    // 1159\n\t\t\t}                                                                                                                // 1160\n\t\t\treturn value.length > 0;                                                                                         // 1161\n\t\t},                                                                                                                // 1162\n                                                                                                                    // 1163\n\t\t// http://jqueryvalidation.org/email-method/                                                                      // 1164\n\t\temail: function( value, element ) {                                                                               // 1165\n\t\t\t// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address                                   // 1166\n\t\t\t// Retrieved 2014-01-14                                                                                          // 1167\n\t\t\t// If you have a problem with this implementation, report a bug against the above spec                           // 1168\n\t\t\t// Or use custom methods to implement your own email validation                                                  // 1169\n\t\t\treturn this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );\n\t\t},                                                                                                                // 1171\n                                                                                                                    // 1172\n\t\t// http://jqueryvalidation.org/url-method/                                                                        // 1173\n\t\turl: function( value, element ) {                                                                                 // 1174\n                                                                                                                    // 1175\n\t\t\t// Copyright (c) 2010-2013 Diego Perini, MIT licensed                                                            // 1176\n\t\t\t// https://gist.github.com/dperini/729294                                                                        // 1177\n\t\t\t// see also https://mathiasbynens.be/demo/url-regex                                                              // 1178\n\t\t\t// modified to allow protocol-relative URLs                                                                      // 1179\n\t\t\treturn this.optional( element ) || /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test( value );\n\t\t},                                                                                                                // 1181\n                                                                                                                    // 1182\n\t\t// http://jqueryvalidation.org/date-method/                                                                       // 1183\n\t\tdate: function( value, element ) {                                                                                // 1184\n\t\t\treturn this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );                          // 1185\n\t\t},                                                                                                                // 1186\n                                                                                                                    // 1187\n\t\t// http://jqueryvalidation.org/dateISO-method/                                                                    // 1188\n\t\tdateISO: function( value, element ) {                                                                             // 1189\n\t\t\treturn this.optional( element ) || /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test( value ); // 1190\n\t\t},                                                                                                                // 1191\n                                                                                                                    // 1192\n\t\t// http://jqueryvalidation.org/number-method/                                                                     // 1193\n\t\tnumber: function( value, element ) {                                                                              // 1194\n\t\t\treturn this.optional( element ) || /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test( value );                  // 1195\n\t\t},                                                                                                                // 1196\n                                                                                                                    // 1197\n\t\t// http://jqueryvalidation.org/digits-method/                                                                     // 1198\n\t\tdigits: function( value, element ) {                                                                              // 1199\n\t\t\treturn this.optional( element ) || /^\\d+$/.test( value );                                                        // 1200\n\t\t},                                                                                                                // 1201\n                                                                                                                    // 1202\n\t\t// http://jqueryvalidation.org/creditcard-method/                                                                 // 1203\n\t\t// based on http://en.wikipedia.org/wiki/Luhn_algorithm                                                           // 1204\n\t\tcreditcard: function( value, element ) {                                                                          // 1205\n\t\t\tif ( this.optional( element ) ) {                                                                                // 1206\n\t\t\t\treturn \"dependency-mismatch\";                                                                                   // 1207\n\t\t\t}                                                                                                                // 1208\n\t\t\t// accept only spaces, digits and dashes                                                                         // 1209\n\t\t\tif ( /[^0-9 \\-]+/.test( value ) ) {                                                                              // 1210\n\t\t\t\treturn false;                                                                                                   // 1211\n\t\t\t}                                                                                                                // 1212\n\t\t\tvar nCheck = 0,                                                                                                  // 1213\n\t\t\t\tnDigit = 0,                                                                                                     // 1214\n\t\t\t\tbEven = false,                                                                                                  // 1215\n\t\t\t\tn, cDigit;                                                                                                      // 1216\n                                                                                                                    // 1217\n\t\t\tvalue = value.replace( /\\D/g, \"\" );                                                                              // 1218\n                                                                                                                    // 1219\n\t\t\t// Basing min and max length on                                                                                  // 1220\n\t\t\t// http://developer.ean.com/general_info/Valid_Credit_Card_Types                                                 // 1221\n\t\t\tif ( value.length < 13 || value.length > 19 ) {                                                                  // 1222\n\t\t\t\treturn false;                                                                                                   // 1223\n\t\t\t}                                                                                                                // 1224\n                                                                                                                    // 1225\n\t\t\tfor ( n = value.length - 1; n >= 0; n--) {                                                                       // 1226\n\t\t\t\tcDigit = value.charAt( n );                                                                                     // 1227\n\t\t\t\tnDigit = parseInt( cDigit, 10 );                                                                                // 1228\n\t\t\t\tif ( bEven ) {                                                                                                  // 1229\n\t\t\t\t\tif ( ( nDigit *= 2 ) > 9 ) {                                                                                   // 1230\n\t\t\t\t\t\tnDigit -= 9;                                                                                                  // 1231\n\t\t\t\t\t}                                                                                                              // 1232\n\t\t\t\t}                                                                                                               // 1233\n\t\t\t\tnCheck += nDigit;                                                                                               // 1234\n\t\t\t\tbEven = !bEven;                                                                                                 // 1235\n\t\t\t}                                                                                                                // 1236\n                                                                                                                    // 1237\n\t\t\treturn ( nCheck % 10 ) === 0;                                                                                    // 1238\n\t\t},                                                                                                                // 1239\n                                                                                                                    // 1240\n\t\t// http://jqueryvalidation.org/minlength-method/                                                                  // 1241\n\t\tminlength: function( value, element, param ) {                                                                    // 1242\n\t\t\tvar length = $.isArray( value ) ? value.length : this.getLength( value, element );                               // 1243\n\t\t\treturn this.optional( element ) || length >= param;                                                              // 1244\n\t\t},                                                                                                                // 1245\n                                                                                                                    // 1246\n\t\t// http://jqueryvalidation.org/maxlength-method/                                                                  // 1247\n\t\tmaxlength: function( value, element, param ) {                                                                    // 1248\n\t\t\tvar length = $.isArray( value ) ? value.length : this.getLength( value, element );                               // 1249\n\t\t\treturn this.optional( element ) || length <= param;                                                              // 1250\n\t\t},                                                                                                                // 1251\n                                                                                                                    // 1252\n\t\t// http://jqueryvalidation.org/rangelength-method/                                                                // 1253\n\t\trangelength: function( value, element, param ) {                                                                  // 1254\n\t\t\tvar length = $.isArray( value ) ? value.length : this.getLength( value, element );                               // 1255\n\t\t\treturn this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );                             // 1256\n\t\t},                                                                                                                // 1257\n                                                                                                                    // 1258\n\t\t// http://jqueryvalidation.org/min-method/                                                                        // 1259\n\t\tmin: function( value, element, param ) {                                                                          // 1260\n\t\t\treturn this.optional( element ) || value >= param;                                                               // 1261\n\t\t},                                                                                                                // 1262\n                                                                                                                    // 1263\n\t\t// http://jqueryvalidation.org/max-method/                                                                        // 1264\n\t\tmax: function( value, element, param ) {                                                                          // 1265\n\t\t\treturn this.optional( element ) || value <= param;                                                               // 1266\n\t\t},                                                                                                                // 1267\n                                                                                                                    // 1268\n\t\t// http://jqueryvalidation.org/range-method/                                                                      // 1269\n\t\trange: function( value, element, param ) {                                                                        // 1270\n\t\t\treturn this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );                               // 1271\n\t\t},                                                                                                                // 1272\n                                                                                                                    // 1273\n\t\t// http://jqueryvalidation.org/equalTo-method/                                                                    // 1274\n\t\tequalTo: function( value, element, param ) {                                                                      // 1275\n\t\t\t// bind to the blur event of the target in order to revalidate whenever the target field is updated              // 1276\n\t\t\t// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead                              // 1277\n\t\t\tvar target = $( param );                                                                                         // 1278\n\t\t\tif ( this.settings.onfocusout ) {                                                                                // 1279\n\t\t\t\ttarget.off( \".validate-equalTo\" ).on( \"blur.validate-equalTo\", function() {                                     // 1280\n\t\t\t\t\t$( element ).valid();                                                                                          // 1281\n\t\t\t\t});                                                                                                             // 1282\n\t\t\t}                                                                                                                // 1283\n\t\t\treturn value === target.val();                                                                                   // 1284\n\t\t},                                                                                                                // 1285\n                                                                                                                    // 1286\n\t\t// http://jqueryvalidation.org/remote-method/                                                                     // 1287\n\t\tremote: function( value, element, param ) {                                                                       // 1288\n\t\t\tif ( this.optional( element ) ) {                                                                                // 1289\n\t\t\t\treturn \"dependency-mismatch\";                                                                                   // 1290\n\t\t\t}                                                                                                                // 1291\n                                                                                                                    // 1292\n\t\t\tvar previous = this.previousValue( element ),                                                                    // 1293\n\t\t\t\tvalidator, data;                                                                                                // 1294\n                                                                                                                    // 1295\n\t\t\tif (!this.settings.messages[ element.name ] ) {                                                                  // 1296\n\t\t\t\tthis.settings.messages[ element.name ] = {};                                                                    // 1297\n\t\t\t}                                                                                                                // 1298\n\t\t\tprevious.originalMessage = this.settings.messages[ element.name ].remote;                                        // 1299\n\t\t\tthis.settings.messages[ element.name ].remote = previous.message;                                                // 1300\n                                                                                                                    // 1301\n\t\t\tparam = typeof param === \"string\" && { url: param } || param;                                                    // 1302\n                                                                                                                    // 1303\n\t\t\tif ( previous.old === value ) {                                                                                  // 1304\n\t\t\t\treturn previous.valid;                                                                                          // 1305\n\t\t\t}                                                                                                                // 1306\n                                                                                                                    // 1307\n\t\t\tprevious.old = value;                                                                                            // 1308\n\t\t\tvalidator = this;                                                                                                // 1309\n\t\t\tthis.startRequest( element );                                                                                    // 1310\n\t\t\tdata = {};                                                                                                       // 1311\n\t\t\tdata[ element.name ] = value;                                                                                    // 1312\n\t\t\t$.ajax( $.extend( true, {                                                                                        // 1313\n\t\t\t\tmode: \"abort\",                                                                                                  // 1314\n\t\t\t\tport: \"validate\" + element.name,                                                                                // 1315\n\t\t\t\tdataType: \"json\",                                                                                               // 1316\n\t\t\t\tdata: data,                                                                                                     // 1317\n\t\t\t\tcontext: validator.currentForm,                                                                                 // 1318\n\t\t\t\tsuccess: function( response ) {                                                                                 // 1319\n\t\t\t\t\tvar valid = response === true || response === \"true\",                                                          // 1320\n\t\t\t\t\t\terrors, message, submitted;                                                                                   // 1321\n                                                                                                                    // 1322\n\t\t\t\t\tvalidator.settings.messages[ element.name ].remote = previous.originalMessage;                                 // 1323\n\t\t\t\t\tif ( valid ) {                                                                                                 // 1324\n\t\t\t\t\t\tsubmitted = validator.formSubmitted;                                                                          // 1325\n\t\t\t\t\t\tvalidator.prepareElement( element );                                                                          // 1326\n\t\t\t\t\t\tvalidator.formSubmitted = submitted;                                                                          // 1327\n\t\t\t\t\t\tvalidator.successList.push( element );                                                                        // 1328\n\t\t\t\t\t\tdelete validator.invalid[ element.name ];                                                                     // 1329\n\t\t\t\t\t\tvalidator.showErrors();                                                                                       // 1330\n\t\t\t\t\t} else {                                                                                                       // 1331\n\t\t\t\t\t\terrors = {};                                                                                                  // 1332\n\t\t\t\t\t\tmessage = response || validator.defaultMessage( element, \"remote\" );                                          // 1333\n\t\t\t\t\t\terrors[ element.name ] = previous.message = $.isFunction( message ) ? message( value ) : message;             // 1334\n\t\t\t\t\t\tvalidator.invalid[ element.name ] = true;                                                                     // 1335\n\t\t\t\t\t\tvalidator.showErrors( errors );                                                                               // 1336\n\t\t\t\t\t}                                                                                                              // 1337\n\t\t\t\t\tprevious.valid = valid;                                                                                        // 1338\n\t\t\t\t\tvalidator.stopRequest( element, valid );                                                                       // 1339\n\t\t\t\t}                                                                                                               // 1340\n\t\t\t}, param ) );                                                                                                    // 1341\n\t\t\treturn \"pending\";                                                                                                // 1342\n\t\t}                                                                                                                 // 1343\n\t}                                                                                                                  // 1344\n                                                                                                                    // 1345\n});                                                                                                                 // 1346\n                                                                                                                    // 1347\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       // 1357\n}).call(this);                                                                                                         // 1358\n                                                                                                                       // 1359\n                                                                                                                       // 1360\n                                                                                                                       // 1361\n                                                                                                                       // 1362\n                                                                                                                       // 1363\n                                                                                                                       // 1364\n(function () {                                                                                                         // 1365\n                                                                                                                       // 1366\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/themeteorchef:jquery-validation/lib/jquery-validation/src/ajax.js                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// ajax mode: abort                                                                                                 // 1\n// usage: $.ajax({ mode: \"abort\"[, port: \"uniqueport\"]});                                                           // 2\n// if mode:\"abort\" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()\n                                                                                                                    // 4\nvar pendingRequests = {},                                                                                           // 5\n\tajax;                                                                                                              // 6\n// Use a prefilter if available (1.5+)                                                                              // 7\nif ( $.ajaxPrefilter ) {                                                                                            // 8\n\t$.ajaxPrefilter(function( settings, _, xhr ) {                                                                     // 9\n\t\tvar port = settings.port;                                                                                         // 10\n\t\tif ( settings.mode === \"abort\" ) {                                                                                // 11\n\t\t\tif ( pendingRequests[port] ) {                                                                                   // 12\n\t\t\t\tpendingRequests[port].abort();                                                                                  // 13\n\t\t\t}                                                                                                                // 14\n\t\t\tpendingRequests[port] = xhr;                                                                                     // 15\n\t\t}                                                                                                                 // 16\n\t});                                                                                                                // 17\n} else {                                                                                                            // 18\n\t// Proxy ajax                                                                                                      // 19\n\tajax = $.ajax;                                                                                                     // 20\n\t$.ajax = function( settings ) {                                                                                    // 21\n\t\tvar mode = ( \"mode\" in settings ? settings : $.ajaxSettings ).mode,                                               // 22\n\t\t\tport = ( \"port\" in settings ? settings : $.ajaxSettings ).port;                                                  // 23\n\t\tif ( mode === \"abort\" ) {                                                                                         // 24\n\t\t\tif ( pendingRequests[port] ) {                                                                                   // 25\n\t\t\t\tpendingRequests[port].abort();                                                                                  // 26\n\t\t\t}                                                                                                                // 27\n\t\t\tpendingRequests[port] = ajax.apply(this, arguments);                                                             // 28\n\t\t\treturn pendingRequests[port];                                                                                    // 29\n\t\t}                                                                                                                 // 30\n\t\treturn ajax.apply(this, arguments);                                                                               // 31\n\t};                                                                                                                 // 32\n}                                                                                                                   // 33\n                                                                                                                    // 34\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       // 1408\n}).call(this);                                                                                                         // 1409\n                                                                                                                       // 1410\n                                                                                                                       // 1411\n                                                                                                                       // 1412\n                                                                                                                       // 1413\n                                                                                                                       // 1414\n                                                                                                                       // 1415\n(function () {                                                                                                         // 1416\n                                                                                                                       // 1417\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/themeteorchef:jquery-validation/lib/jquery-validation/src/additional/pattern.js                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n* Return true if the field value matches the given format RegExp                                                    // 2\n*                                                                                                                   // 3\n* @example $.validator.methods.pattern(\"AR1004\",element,/^AR\\d{4}$/)                                                // 4\n* @result true                                                                                                      // 5\n*                                                                                                                   // 6\n* @example $.validator.methods.pattern(\"BR1004\",element,/^AR\\d{4}$/)                                                // 7\n* @result false                                                                                                     // 8\n*                                                                                                                   // 9\n* @name $.validator.methods.pattern                                                                                 // 10\n* @type Boolean                                                                                                     // 11\n* @cat Plugins/Validate/Methods                                                                                     // 12\n*/                                                                                                                  // 13\n$.validator.addMethod(\"pattern\", function(value, element, param) {                                                  // 14\n\tif (this.optional(element)) {                                                                                      // 15\n\t\treturn true;                                                                                                      // 16\n\t}                                                                                                                  // 17\n\tif (typeof param === \"string\") {                                                                                   // 18\n\t\tparam = new RegExp(\"^(?:\" + param + \")$\");                                                                        // 19\n\t}                                                                                                                  // 20\n\treturn param.test(value);                                                                                          // 21\n}, \"Invalid format.\");                                                                                              // 22\n                                                                                                                    // 23\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       // 1448\n}).call(this);                                                                                                         // 1449\n                                                                                                                       // 1450\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['themeteorchef:jquery-validation'] = {};\n\n})();\n","servePath":"/packages/themeteorchef_jquery-validation.js"}]