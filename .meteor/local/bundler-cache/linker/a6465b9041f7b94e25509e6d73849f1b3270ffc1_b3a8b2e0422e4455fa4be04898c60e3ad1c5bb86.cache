[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar HTTP = Package.http.HTTP;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar FilesCollection;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ostrio:files\":{\"client.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ostrio_files/client.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  FilesCollection: function () {                                                                                       // 1\n    return FilesCollection;                                                                                            // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Mongo = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/mongo\"), {                                                                                // 1\n  Mongo: function (v) {                                                                                                // 1\n    Mongo = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                               // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Cookies = void 0;                                                                                                  // 1\nmodule.watch(require(\"meteor/ostrio:cookies\"), {                                                                       // 1\n  Cookies: function (v) {                                                                                              // 1\n    Cookies = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar formatFleURL = void 0;                                                                                             // 1\nmodule.watch(require(\"./lib.js\"), {                                                                                    // 1\n  formatFleURL: function (v) {                                                                                         // 1\n    formatFleURL = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar check = void 0,                                                                                                    // 1\n    Match = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  },                                                                                                                   // 1\n  Match: function (v) {                                                                                                // 1\n    Match = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar UploadInstance = void 0;                                                                                           // 1\nmodule.watch(require(\"./upload.js\"), {                                                                                 // 1\n  UploadInstance: function (v) {                                                                                       // 1\n    UploadInstance = v;                                                                                                // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar FilesCollectionCore = void 0;                                                                                      // 1\nmodule.watch(require(\"./core.js\"), {                                                                                   // 1\n  \"default\": function (v) {                                                                                            // 1\n    FilesCollectionCore = v;                                                                                           // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\n                                                                                                                       //\nvar NOOP = function () {}; /*                                                                                          // 10\n                            * @locus Anywhere                                                                          //\n                            * @class FilesCollection                                                                   //\n                            * @param config           {Object}   - [Both]   Configuration object with next properties:\n                            * @param config.debug     {Boolean}  - [Both]   Turn on/of debugging and extra logging     //\n                            * @param config.ddp       {Object}   - [Client] Custom DDP connection. Object returned form `DDP.connect()`\n                            * @param config.schema    {Object}   - [Both]   Collection Schema                          //\n                            * @param config.public    {Boolean}  - [Both]   Store files in folder accessible for proxy servers, for limits, and more - read docs`\n                            * @param config.chunkSize      {Number}  - [Both] Upload chunk size, default: 524288 bytes (0,5 Mb)\n                            * @param config.downloadRoute  {String}  - [Both]   Server Route used to retrieve files    //\n                            * @param config.collection     {Mongo.Collection} - [Both] Mongo Collection Instance       //\n                            * @param config.collectionName {String}  - [Both]   Collection name                        //\n                            * @param config.namingFunction {Function}- [Both]   Function which returns `String`        //\n                            * @param config.onBeforeUpload {Function}- [Both]   Function which executes on server after receiving each chunk and on client right before beginning upload. Function context is `File` - so you are able to check for extension, mime-type, size and etc.\n                            * return `true` to continue                                                                //\n                            * return `false` or `String` to abort upload                                               //\n                            * @param config.allowClientCode  {Boolean}  - [Both]   Allow to run `remove` from client   //\n                            * @param config.onbeforeunloadMessage {String|Function} - [Client] Message shown to user when closing browser's window or tab while upload process is running\n                            * @param config.disableUpload {Boolean} - Disable file upload, useful for server only solutions\n                            * @summary Create new instance of FilesCollection                                          //\n                            */                                                                                         //\n                                                                                                                       //\nvar FilesCollection = function (_FilesCollectionCore) {                                                                //\n  (0, _inherits3.default)(FilesCollection, _FilesCollectionCore);                                                      //\n                                                                                                                       //\n  function FilesCollection(config) {                                                                                   // 34\n    (0, _classCallCheck3.default)(this, FilesCollection);                                                              // 34\n                                                                                                                       //\n    var _this = (0, _possibleConstructorReturn3.default)(this, _FilesCollectionCore.call(this));                       // 34\n                                                                                                                       //\n    if (config) {                                                                                                      // 36\n      _this.ddp = config.ddp;                                                                                          // 38\n      _this.debug = config.debug;                                                                                      // 39\n      _this.schema = config.schema;                                                                                    // 40\n      _this.public = config.public;                                                                                    // 41\n      _this.chunkSize = config.chunkSize;                                                                              // 42\n      _this.collection = config.collection;                                                                            // 43\n      _this.downloadRoute = config.downloadRoute;                                                                      // 44\n      _this.disableUpload = config.disableUpload;                                                                      // 45\n      _this.namingFunction = config.namingFunction;                                                                    // 46\n      _this.collectionName = config.collectionName;                                                                    // 47\n      _this.onBeforeUpload = config.onBeforeUpload;                                                                    // 48\n      _this.allowClientCode = config.allowClientCode;                                                                  // 49\n      _this.onbeforeunloadMessage = config.onbeforeunloadMessage;                                                      // 50\n    }                                                                                                                  // 52\n                                                                                                                       //\n    var self = _this;                                                                                                  // 54\n    var cookie = new Cookies();                                                                                        // 55\n                                                                                                                       //\n    if (!_.isBoolean(_this.debug)) {                                                                                   // 56\n      _this.debug = false;                                                                                             // 57\n    }                                                                                                                  // 58\n                                                                                                                       //\n    if (!_.isBoolean(_this.public)) {                                                                                  // 60\n      _this.public = false;                                                                                            // 61\n    }                                                                                                                  // 62\n                                                                                                                       //\n    if (!_this.chunkSize) {                                                                                            // 64\n      _this.chunkSize = 1024 * 512;                                                                                    // 65\n    }                                                                                                                  // 66\n                                                                                                                       //\n    _this.chunkSize = Math.floor(_this.chunkSize / 8) * 8;                                                             // 67\n                                                                                                                       //\n    if (!_.isString(_this.collectionName) && !_this.collection) {                                                      // 69\n      _this.collectionName = 'MeteorUploadFiles';                                                                      // 70\n    }                                                                                                                  // 71\n                                                                                                                       //\n    if (!_this.collection) {                                                                                           // 73\n      _this.collection = new Mongo.Collection(_this.collectionName);                                                   // 74\n    } else {                                                                                                           // 75\n      _this.collectionName = _this.collection._name;                                                                   // 76\n    }                                                                                                                  // 77\n                                                                                                                       //\n    _this.collection.filesCollection = _this;                                                                          // 79\n    check(_this.collectionName, String);                                                                               // 80\n                                                                                                                       //\n    if (_this.public && !_this.downloadRoute) {                                                                        // 82\n      throw new Meteor.Error(500, \"[FilesCollection.\" + _this.collectionName + \"]: \\\"downloadRoute\\\" must be precisely provided on \\\"public\\\" collections! Note: \\\"downloadRoute\\\" must be equal or be inside of your web/proxy-server (relative) root.\");\n    }                                                                                                                  // 84\n                                                                                                                       //\n    if (!_.isBoolean(_this.disableUpload)) {                                                                           // 86\n      _this.disableUpload = false;                                                                                     // 87\n    }                                                                                                                  // 88\n                                                                                                                       //\n    if (!_.isString(_this.downloadRoute)) {                                                                            // 90\n      _this.downloadRoute = '/cdn/storage';                                                                            // 91\n    }                                                                                                                  // 92\n                                                                                                                       //\n    _this.downloadRoute = _this.downloadRoute.replace(/\\/$/, '');                                                      // 94\n                                                                                                                       //\n    if (!_.isFunction(_this.namingFunction)) {                                                                         // 96\n      _this.namingFunction = false;                                                                                    // 97\n    }                                                                                                                  // 98\n                                                                                                                       //\n    if (!_.isFunction(_this.onBeforeUpload)) {                                                                         // 100\n      _this.onBeforeUpload = false;                                                                                    // 101\n    }                                                                                                                  // 102\n                                                                                                                       //\n    if (!_.isBoolean(_this.allowClientCode)) {                                                                         // 104\n      _this.allowClientCode = true;                                                                                    // 105\n    }                                                                                                                  // 106\n                                                                                                                       //\n    if (!_this.ddp) {                                                                                                  // 108\n      _this.ddp = Meteor;                                                                                              // 109\n    }                                                                                                                  // 110\n                                                                                                                       //\n    if (!_this.onbeforeunloadMessage) {                                                                                // 112\n      _this.onbeforeunloadMessage = 'Upload in a progress... Do you want to abort?';                                   // 113\n    }                                                                                                                  // 114\n                                                                                                                       //\n    var setTokenCookie = function () {                                                                                 // 116\n      if (!cookie.has('x_mtok') && Meteor.connection._lastSessionId || cookie.has('x_mtok') && cookie.get('x_mtok') !== Meteor.connection._lastSessionId) {\n        cookie.set('x_mtok', Meteor.connection._lastSessionId, {                                                       // 118\n          path: '/'                                                                                                    // 119\n        });                                                                                                            // 118\n      }                                                                                                                // 121\n    };                                                                                                                 // 122\n                                                                                                                       //\n    var unsetTokenCookie = function () {                                                                               // 124\n      if (cookie.has('x_mtok')) {                                                                                      // 125\n        cookie.remove('x_mtok', '/');                                                                                  // 126\n      }                                                                                                                // 127\n    };                                                                                                                 // 128\n                                                                                                                       //\n    if (typeof Accounts !== 'undefined' && Accounts !== null) {                                                        // 130\n      Meteor.startup(function () {                                                                                     // 131\n        setTokenCookie();                                                                                              // 132\n      });                                                                                                              // 133\n      Accounts.onLogin(function () {                                                                                   // 134\n        setTokenCookie();                                                                                              // 135\n      });                                                                                                              // 136\n      Accounts.onLogout(function () {                                                                                  // 137\n        unsetTokenCookie();                                                                                            // 138\n      });                                                                                                              // 139\n    }                                                                                                                  // 140\n                                                                                                                       //\n    check(_this.onbeforeunloadMessage, Match.OneOf(String, Function));                                                 // 142\n                                                                                                                       //\n    try {                                                                                                              // 144\n      var _URL = window.URL || window.webkitURL || window.mozURL || window.msURL || window.oURL || false;              // 145\n                                                                                                                       //\n      if (window.Worker && window.Blob && _URL) {                                                                      // 146\n        _this._supportWebWorker = true;                                                                                // 147\n        _this._webWorkerUrl = _URL.createObjectURL(new Blob(['!function(a){\"use strict\";a.onmessage=function(b){var c=b.data.f.slice(b.data.cs*(b.data.cc-1),b.data.cs*b.data.cc);if(b.data.ib===!0)postMessage({bin:c,chunkId:b.data.cc});else{var d;a.FileReader?(d=new FileReader,d.onloadend=function(a){postMessage({bin:(d.result||a.srcElement||a.target).split(\",\")[1],chunkId:b.data.cc,s:b.data.s})},d.onerror=function(a){throw(a.target||a.srcElement).error},d.readAsDataURL(c)):a.FileReaderSync?(d=new FileReaderSync,postMessage({bin:d.readAsDataURL(c).split(\",\")[1],chunkId:b.data.cc})):postMessage({bin:null,chunkId:b.data.cc,error:\"File API is not supported in WebWorker!\"})}}}(this);'], {\n          type: 'application/javascript'                                                                               // 148\n        }));                                                                                                           // 148\n      } else if (window.Worker) {                                                                                      // 149\n        _this._supportWebWorker = true;                                                                                // 150\n        _this._webWorkerUrl = Meteor.absoluteUrl('packages/ostrio_files/worker.min.js');                               // 151\n      } else {                                                                                                         // 152\n        _this._supportWebWorker = false;                                                                               // 153\n      }                                                                                                                // 154\n    } catch (e) {                                                                                                      // 155\n      self._debug('[FilesCollection] [Check WebWorker Availability] Error:', e);                                       // 156\n                                                                                                                       //\n      _this._supportWebWorker = false;                                                                                 // 157\n    }                                                                                                                  // 158\n                                                                                                                       //\n    if (!_this.schema) {                                                                                               // 160\n      _this.schema = FilesCollectionCore.schema;                                                                       // 161\n    }                                                                                                                  // 162\n                                                                                                                       //\n    check(_this.debug, Boolean);                                                                                       // 164\n    check(_this.schema, Object);                                                                                       // 165\n    check(_this.public, Boolean);                                                                                      // 166\n    check(_this.chunkSize, Number);                                                                                    // 167\n    check(_this.downloadRoute, String);                                                                                // 168\n    check(_this.disableUpload, Boolean);                                                                               // 169\n    check(_this.namingFunction, Match.OneOf(false, Function));                                                         // 170\n    check(_this.onBeforeUpload, Match.OneOf(false, Function));                                                         // 171\n    check(_this.allowClientCode, Boolean);                                                                             // 172\n    check(_this.ddp, Match.Any);                                                                                       // 173\n    _this._methodNames = {                                                                                             // 175\n      _Abort: \"_FilesCollectionAbort_\" + _this.collectionName,                                                         // 176\n      _Write: \"_FilesCollectionWrite_\" + _this.collectionName,                                                         // 177\n      _Start: \"_FilesCollectionStart_\" + _this.collectionName,                                                         // 178\n      _Remove: \"_FilesCollectionRemove_\" + _this.collectionName                                                        // 179\n    };                                                                                                                 // 175\n    return _this;                                                                                                      // 34\n  } /*                                                                                                                 // 181\n     * @locus Anywhere                                                                                                 //\n     * @memberOf FilesCollection                                                                                       //\n     * @name _getMimeType                                                                                              //\n     * @param {Object} fileData - File Object                                                                          //\n     * @summary Returns file's mime-type                                                                               //\n     * @returns {String}                                                                                               //\n     */                                                                                                                //\n                                                                                                                       //\n  FilesCollection.prototype._getMimeType = function () {                                                               //\n    function _getMimeType(fileData) {                                                                                  //\n      var mime = void 0;                                                                                               // 192\n      check(fileData, Object);                                                                                         // 193\n                                                                                                                       //\n      if (_.isObject(fileData)) {                                                                                      // 194\n        mime = fileData.type;                                                                                          // 195\n      }                                                                                                                // 196\n                                                                                                                       //\n      if (!mime || !_.isString(mime)) {                                                                                // 198\n        mime = 'application/octet-stream';                                                                             // 199\n      }                                                                                                                // 200\n                                                                                                                       //\n      return mime;                                                                                                     // 201\n    }                                                                                                                  // 202\n                                                                                                                       //\n    return _getMimeType;                                                                                               //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollection                                                                                    //\n        * @name _getUser                                                                                               //\n        * @summary Returns object with `userId` and `user()` method which return user's object                         //\n        * @returns {Object}                                                                                            //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollection.prototype._getUser = function () {                                                                   //\n    function _getUser() {                                                                                              //\n      var result = {                                                                                                   // 212\n        user: function () {                                                                                            // 213\n          return null;                                                                                                 // 214\n        },                                                                                                             // 215\n        userId: null                                                                                                   // 216\n      };                                                                                                               // 212\n                                                                                                                       //\n      if (_.isFunction(Meteor.userId)) {                                                                               // 219\n        result.user = function () {                                                                                    // 220\n          return Meteor.user();                                                                                        // 220\n        };                                                                                                             // 220\n                                                                                                                       //\n        result.userId = Meteor.userId();                                                                               // 221\n      }                                                                                                                // 222\n                                                                                                                       //\n      return result;                                                                                                   // 224\n    }                                                                                                                  // 225\n                                                                                                                       //\n    return _getUser;                                                                                                   //\n  }(); /*                                                                                                              //\n        * @locus Client                                                                                                //\n        * @memberOf FilesCollection                                                                                    //\n        * @name insert                                                                                                 //\n        * @see https://developer.mozilla.org/en-US/docs/Web/API/FileReader                                             //\n        * @param {Object} config - Configuration object with next properties:                                          //\n        *   {File|Object} file           - HTML5 `files` item, like in change event: `e.currentTarget.files[0]`        //\n        *   {Object}      meta           - Additional data as object, use later for search                             //\n        *   {Boolean}     allowWebWorkers- Allow/Deny WebWorkers usage                                                 //\n        *   {Number|dynamic} streams     - Quantity of parallel upload streams, default: 2                             //\n        *   {Number|dynamic} chunkSize   - Chunk size for upload                                                       //\n        *   {String}      transport      - Upload transport `http` or `ddp`                                            //\n        *   {Object}      ddp            - Custom DDP connection. Object returned form `DDP.connect()`                 //\n        *   {Function}    onUploaded     - Callback triggered when upload is finished, with two arguments `error` and `fileRef`\n        *   {Function}    onStart        - Callback triggered when upload is started after all successful validations, with two arguments `error` (always null) and `fileRef`\n        *   {Function}    onError        - Callback triggered on error in upload and/or FileReader, with two arguments `error` and `fileData`\n        *   {Function}    onProgress     - Callback triggered when chunk is sent, with only argument `progress`        //\n        *   {Function}    onBeforeUpload - Callback triggered right before upload is started:                          //\n        *       return true to continue                                                                                //\n        *       return false to abort upload                                                                           //\n        * @param {Boolean} autoStart     - Start upload immediately. If set to false, you need manually call .start() method on returned class. Useful to set EventListeners.\n        * @summary Upload file to server over DDP or HTTP                                                              //\n        * @returns {UploadInstance} Instance. UploadInstance has next properties:                                      //\n        *   {ReactiveVar} onPause  - Is upload process on the pause?                                                   //\n        *   {ReactiveVar} state    - active|paused|aborted|completed                                                   //\n        *   {ReactiveVar} progress - Current progress in percentage                                                    //\n        *   {Function}    pause    - Pause upload process                                                              //\n        *   {Function}    continue - Continue paused upload process                                                    //\n        *   {Function}    toggle   - Toggle continue/pause if upload process                                           //\n        *   {Function}    abort    - Abort upload                                                                      //\n        *   {Function}    readAsDataURL - Current file as data URL, use to create image preview and etc. Be aware of big files, may lead to browser crash\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollection.prototype.insert = function () {                                                                     //\n    function insert(config) {                                                                                          //\n      var autoStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;                        // 259\n                                                                                                                       //\n      if (this.disableUpload) {                                                                                        // 260\n        console.warn('[FilesCollection] [insert()] Upload is disabled with [disableUpload]!');                         // 261\n        return {};                                                                                                     // 262\n      }                                                                                                                // 263\n                                                                                                                       //\n      return new UploadInstance(config, this)[autoStart ? 'start' : 'manual']();                                       // 264\n    }                                                                                                                  // 265\n                                                                                                                       //\n    return insert;                                                                                                     //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollection                                                                                    //\n        * @name remove                                                                                                 //\n        * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n        * @param {Function} callback - Callback with one `error` argument                                              //\n        * @summary Remove documents from the collection                                                                //\n        * @returns {FilesCollection} Instance                                                                          //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollection.prototype.remove = function () {                                                                     //\n    function remove() {                                                                                                //\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                           // 276\n      var callback = arguments[1];                                                                                     // 276\n                                                                                                                       //\n      this._debug(\"[FilesCollection] [remove(\" + JSON.stringify(selector) + \")]\");                                     // 277\n                                                                                                                       //\n      check(selector, Match.OneOf(Object, String));                                                                    // 278\n      check(callback, Match.Optional(Function));                                                                       // 279\n                                                                                                                       //\n      if (this.allowClientCode) {                                                                                      // 281\n        this.ddp.call(this._methodNames._Remove, selector, callback || NOOP);                                          // 282\n      } else {                                                                                                         // 283\n        callback && callback(new Meteor.Error(401, '[FilesCollection] [remove] Run code from client is not allowed!'));\n                                                                                                                       //\n        this._debug('[FilesCollection] [remove] Run code from client is not allowed!');                                // 285\n      }                                                                                                                // 286\n                                                                                                                       //\n      return this;                                                                                                     // 288\n    }                                                                                                                  // 289\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return FilesCollection;                                                                                              //\n}(FilesCollectionCore);                                                                                                //\n                                                                                                                       //\n/*                                                                                                                     // 292\n * @locus Client                                                                                                       //\n * @TemplateHelper                                                                                                     //\n * @name fileURL                                                                                                       //\n * @param {Object} fileRef - File reference object                                                                     //\n * @param {String} version - [Optional] Version of file you would like to request                                      //\n * @summary Get download URL for file by fileRef, even without subscription                                            //\n * @example {{fileURL fileRef}}                                                                                        //\n * @returns {String}                                                                                                   //\n */Meteor.startup(function () {                                                                                        //\n  if (typeof Template !== 'undefined' && Template !== null) {                                                          // 303\n    Template.registerHelper('fileURL', function (fileRef) {                                                            // 304\n      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'original';                    // 304\n                                                                                                                       //\n      if (!_.isObject(fileRef)) {                                                                                      // 305\n        return '';                                                                                                     // 306\n      }                                                                                                                // 307\n                                                                                                                       //\n      version = !_.isString(version) ? 'original' : version;                                                           // 309\n      return formatFleURL(fileRef, version);                                                                           // 310\n    });                                                                                                                // 311\n  }                                                                                                                    // 312\n});                                                                                                                    // 313\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"core.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ostrio_files/core.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  \"default\": function () {                                                                                             // 1\n    return FilesCollectionCore;                                                                                        // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar EventEmitter = void 0;                                                                                             // 1\nmodule.watch(require(\"eventemitter3\"), {                                                                               // 1\n  EventEmitter: function (v) {                                                                                         // 1\n    EventEmitter = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar formatFleURL = void 0;                                                                                             // 1\nmodule.watch(require(\"./lib.js\"), {                                                                                    // 1\n  formatFleURL: function (v) {                                                                                         // 1\n    formatFleURL = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar check = void 0,                                                                                                    // 1\n    Match = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  },                                                                                                                   // 1\n  Match: function (v) {                                                                                                // 1\n    Match = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar FilesCursor = void 0,                                                                                              // 1\n    FileCursor = void 0;                                                                                               // 1\nmodule.watch(require(\"./cursor.js\"), {                                                                                 // 1\n  FilesCursor: function (v) {                                                                                          // 1\n    FilesCursor = v;                                                                                                   // 1\n  },                                                                                                                   // 1\n  FileCursor: function (v) {                                                                                           // 1\n    FileCursor = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\n                                                                                                                       //\nvar FilesCollectionCore = function (_EventEmitter) {                                                                   //\n  (0, _inherits3.default)(FilesCollectionCore, _EventEmitter);                                                         //\n                                                                                                                       //\n  function FilesCollectionCore() {                                                                                     // 8\n    (0, _classCallCheck3.default)(this, FilesCollectionCore);                                                          // 8\n    return (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));                                   // 8\n  }                                                                                                                    // 10\n                                                                                                                       //\n  /*                                                                                                                   // 79\n   * @locus Anywhere                                                                                                   //\n   * @memberOf FilesCollectionCore                                                                                     //\n   * @name _debug                                                                                                      //\n   * @summary Print logs in debug mode                                                                                 //\n   * @returns {void}                                                                                                   //\n   */FilesCollectionCore.prototype._debug = function () {                                                              //\n    function _debug() {                                                                                                //\n      if (this.debug) {                                                                                                // 87\n        (console.info || console.log || function () {}).apply(undefined, arguments);                                   // 88\n      }                                                                                                                // 89\n    }                                                                                                                  // 90\n                                                                                                                       //\n    return _debug;                                                                                                     //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollectionCore                                                                                //\n        * @name _getFileName                                                                                           //\n        * @param {Object} fileData - File Object                                                                       //\n        * @summary Returns file's name                                                                                 //\n        * @returns {String}                                                                                            //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollectionCore.prototype._getFileName = function () {                                                           //\n    function _getFileName(fileData) {                                                                                  //\n      var fileName = fileData.name || fileData.fileName;                                                               // 101\n                                                                                                                       //\n      if (_.isString(fileName) && fileName.length > 0) {                                                               // 102\n        return (fileData.name || fileData.fileName).replace(/\\.\\./g, '').replace(/\\//g, '');                           // 103\n      }                                                                                                                // 104\n                                                                                                                       //\n      return '';                                                                                                       // 105\n    }                                                                                                                  // 106\n                                                                                                                       //\n    return _getFileName;                                                                                               //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollectionCore                                                                                //\n        * @name _getExt                                                                                                //\n        * @param {String} FileName - File name                                                                         //\n        * @summary Get extension from FileName                                                                         //\n        * @returns {Object}                                                                                            //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollectionCore.prototype._getExt = function () {                                                                //\n    function _getExt(fileName) {                                                                                       //\n      if (!!~fileName.indexOf('.')) {                                                                                  // 117\n        var extension = (fileName.split('.').pop().split('?')[0] || '').toLowerCase();                                 // 118\n        return {                                                                                                       // 119\n          ext: extension,                                                                                              // 119\n          extension: extension,                                                                                        // 119\n          extensionWithDot: \".\" + extension                                                                            // 119\n        };                                                                                                             // 119\n      }                                                                                                                // 120\n                                                                                                                       //\n      return {                                                                                                         // 121\n        ext: '',                                                                                                       // 121\n        extension: '',                                                                                                 // 121\n        extensionWithDot: ''                                                                                           // 121\n      };                                                                                                               // 121\n    }                                                                                                                  // 122\n                                                                                                                       //\n    return _getExt;                                                                                                    //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollectionCore                                                                                //\n        * @name _updateFileTypes                                                                                       //\n        * @param {Object} data - File data                                                                             //\n        * @summary Internal method. Classify file based on 'type' field                                                //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollectionCore.prototype._updateFileTypes = function () {                                                       //\n    function _updateFileTypes(data) {                                                                                  //\n      data.isVideo = /^video\\//i.test(data.type);                                                                      // 132\n      data.isAudio = /^audio\\//i.test(data.type);                                                                      // 133\n      data.isImage = /^image\\//i.test(data.type);                                                                      // 134\n      data.isText = /^text\\//i.test(data.type);                                                                        // 135\n      data.isJSON = /^application\\/json$/i.test(data.type);                                                            // 136\n      data.isPDF = /^application\\/(x-)?pdf$/i.test(data.type);                                                         // 137\n    }                                                                                                                  // 138\n                                                                                                                       //\n    return _updateFileTypes;                                                                                           //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollectionCore                                                                                //\n        * @name _dataToSchema                                                                                          //\n        * @param {Object} data - File data                                                                             //\n        * @summary Internal method. Build object in accordance with default schema from File data                      //\n        * @returns {Object}                                                                                            //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollectionCore.prototype._dataToSchema = function () {                                                          //\n    function _dataToSchema(data) {                                                                                     //\n      var ds = {                                                                                                       // 149\n        name: data.name,                                                                                               // 150\n        extension: data.extension,                                                                                     // 151\n        path: data.path,                                                                                               // 152\n        meta: data.meta,                                                                                               // 153\n        type: data.type,                                                                                               // 154\n        size: data.size,                                                                                               // 155\n        userId: data.userId || null,                                                                                   // 156\n        versions: {                                                                                                    // 157\n          original: {                                                                                                  // 158\n            path: data.path,                                                                                           // 159\n            size: data.size,                                                                                           // 160\n            type: data.type,                                                                                           // 161\n            extension: data.extension                                                                                  // 162\n          }                                                                                                            // 158\n        },                                                                                                             // 157\n        _downloadRoute: data._downloadRoute || this.downloadRoute,                                                     // 165\n        _collectionName: data._collectionName || this.collectionName                                                   // 166\n      }; //Optional fileId                                                                                             // 149\n                                                                                                                       //\n      if (data.fileId) {                                                                                               // 170\n        ds._id = data.fileId;                                                                                          // 171\n      }                                                                                                                // 172\n                                                                                                                       //\n      this._updateFileTypes(ds);                                                                                       // 174\n                                                                                                                       //\n      ds._storagePath = data._storagePath || this.storagePath(_.extend(data, ds));                                     // 175\n      return ds;                                                                                                       // 176\n    }                                                                                                                  // 177\n                                                                                                                       //\n    return _dataToSchema;                                                                                              //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollectionCore                                                                                //\n        * @name findOne                                                                                                //\n        * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n        * @param {Object} options - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)\n        * @summary Find and return Cursor for matching document Object                                                 //\n        * @returns {FileCursor} Instance                                                                               //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollectionCore.prototype.findOne = function () {                                                                //\n    function findOne() {                                                                                               //\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                           // 188\n      var options = arguments[1];                                                                                      // 188\n                                                                                                                       //\n      this._debug(\"[FilesCollection] [findOne(\" + JSON.stringify(selector) + \", \" + JSON.stringify(options) + \")]\");   // 189\n                                                                                                                       //\n      check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));                             // 190\n      check(options, Match.Optional(Object));                                                                          // 191\n      var doc = this.collection.findOne(selector, options);                                                            // 193\n                                                                                                                       //\n      if (doc) {                                                                                                       // 194\n        return new FileCursor(doc, this);                                                                              // 195\n      }                                                                                                                // 196\n                                                                                                                       //\n      return doc;                                                                                                      // 197\n    }                                                                                                                  // 198\n                                                                                                                       //\n    return findOne;                                                                                                    //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollectionCore                                                                                //\n        * @name find                                                                                                   //\n        * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n        * @param {Object}        options  - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)\n        * @summary Find and return Cursor for matching documents                                                       //\n        * @returns {FilesCursor} Instance                                                                              //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollectionCore.prototype.find = function () {                                                                   //\n    function find() {                                                                                                  //\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                           // 209\n      var options = arguments[1];                                                                                      // 209\n                                                                                                                       //\n      this._debug(\"[FilesCollection] [find(\" + JSON.stringify(selector) + \", \" + JSON.stringify(options) + \")]\");      // 210\n                                                                                                                       //\n      check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));                             // 211\n      check(options, Match.Optional(Object));                                                                          // 212\n      return new FilesCursor(selector, options, this);                                                                 // 214\n    }                                                                                                                  // 215\n                                                                                                                       //\n    return find;                                                                                                       //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollectionCore                                                                                //\n        * @name update                                                                                                 //\n        * @see http://docs.meteor.com/#/full/update                                                                    //\n        * @summary link Mongo.Collection update method                                                                 //\n        * @returns {Mongo.Collection} Instance                                                                         //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollectionCore.prototype.update = function () {                                                                 //\n    function update() {                                                                                                //\n      this.collection.update.apply(this.collection, arguments);                                                        // 226\n      return this.collection;                                                                                          // 227\n    }                                                                                                                  // 228\n                                                                                                                       //\n    return update;                                                                                                     //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCollectionCore                                                                                //\n        * @name link                                                                                                   //\n        * @param {Object} fileRef - File reference object                                                              //\n        * @param {String} version - Version of file you would like to request                                          //\n        * @summary Returns downloadable URL                                                                            //\n        * @returns {String} Empty string returned in case if file not found in DB                                      //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCollectionCore.prototype.link = function () {                                                                   //\n    function link(fileRef) {                                                                                           //\n      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'original';                    // 239\n                                                                                                                       //\n      this._debug(\"[FilesCollection] [link(\" + (_.isObject(fileRef) ? fileRef._id : undefined) + \", \" + version + \")]\");\n                                                                                                                       //\n      check(fileRef, Object);                                                                                          // 241\n      check(version, String);                                                                                          // 242\n                                                                                                                       //\n      if (!fileRef) {                                                                                                  // 244\n        return '';                                                                                                     // 245\n      }                                                                                                                // 246\n                                                                                                                       //\n      return formatFleURL(fileRef, version);                                                                           // 247\n    }                                                                                                                  // 248\n                                                                                                                       //\n    return link;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return FilesCollectionCore;                                                                                          //\n}(EventEmitter);                                                                                                       //\n                                                                                                                       //\nFilesCollectionCore.schema = {                                                                                         // 7\n  size: {                                                                                                              // 13\n    type: Number                                                                                                       // 14\n  },                                                                                                                   // 13\n  name: {                                                                                                              // 16\n    type: String                                                                                                       // 17\n  },                                                                                                                   // 16\n  type: {                                                                                                              // 19\n    type: String                                                                                                       // 20\n  },                                                                                                                   // 19\n  path: {                                                                                                              // 22\n    type: String                                                                                                       // 23\n  },                                                                                                                   // 22\n  isVideo: {                                                                                                           // 25\n    type: Boolean                                                                                                      // 26\n  },                                                                                                                   // 25\n  isAudio: {                                                                                                           // 28\n    type: Boolean                                                                                                      // 29\n  },                                                                                                                   // 28\n  isImage: {                                                                                                           // 31\n    type: Boolean                                                                                                      // 32\n  },                                                                                                                   // 31\n  isText: {                                                                                                            // 34\n    type: Boolean                                                                                                      // 35\n  },                                                                                                                   // 34\n  isJSON: {                                                                                                            // 37\n    type: Boolean                                                                                                      // 38\n  },                                                                                                                   // 37\n  isPDF: {                                                                                                             // 40\n    type: Boolean                                                                                                      // 41\n  },                                                                                                                   // 40\n  extension: {                                                                                                         // 43\n    type: String,                                                                                                      // 44\n    optional: true                                                                                                     // 45\n  },                                                                                                                   // 43\n  _storagePath: {                                                                                                      // 47\n    type: String                                                                                                       // 48\n  },                                                                                                                   // 47\n  _downloadRoute: {                                                                                                    // 50\n    type: String                                                                                                       // 51\n  },                                                                                                                   // 50\n  _collectionName: {                                                                                                   // 53\n    type: String                                                                                                       // 54\n  },                                                                                                                   // 53\n  \"public\": {                                                                                                          // 56\n    type: Boolean,                                                                                                     // 57\n    optional: true                                                                                                     // 58\n  },                                                                                                                   // 56\n  meta: {                                                                                                              // 60\n    type: Object,                                                                                                      // 61\n    blackbox: true,                                                                                                    // 62\n    optional: true                                                                                                     // 63\n  },                                                                                                                   // 60\n  userId: {                                                                                                            // 65\n    type: String,                                                                                                      // 66\n    optional: true                                                                                                     // 67\n  },                                                                                                                   // 65\n  updatedAt: {                                                                                                         // 69\n    type: Date,                                                                                                        // 70\n    optional: true                                                                                                     // 71\n  },                                                                                                                   // 69\n  versions: {                                                                                                          // 73\n    type: Object,                                                                                                      // 74\n    blackbox: true                                                                                                     // 75\n  }                                                                                                                    // 73\n};                                                                                                                     // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cursor.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ostrio_files/cursor.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  FileCursor: function () {                                                                                            // 1\n    return FileCursor;                                                                                                 // 1\n  },                                                                                                                   // 1\n  FilesCursor: function () {                                                                                           // 1\n    return FilesCursor;                                                                                                // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                               // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nvar FileCursor = function () {                                                                                         //\n  function FileCursor(_fileRef, _collection) {                                                                         // 13\n    (0, _classCallCheck3.default)(this, FileCursor);                                                                   // 13\n    this._fileRef = _fileRef;                                                                                          // 14\n    this._collection = _collection;                                                                                    // 15\n                                                                                                                       //\n    _.extend(this, _fileRef);                                                                                          // 16\n  } /*                                                                                                                 // 17\n     * @locus Anywhere                                                                                                 //\n     * @memberOf FileCursor                                                                                            //\n     * @name remove                                                                                                    //\n     * @param callback {Function} - Triggered asynchronously after item is removed or failed to be removed             //\n     * @summary Remove document                                                                                        //\n     * @returns {FileCursor}                                                                                           //\n     */                                                                                                                //\n                                                                                                                       //\n  FileCursor.prototype.remove = function () {                                                                          //\n    function remove(callback) {                                                                                        //\n      this._collection._debug('[FilesCollection] [FileCursor] [remove()]');                                            // 28\n                                                                                                                       //\n      if (this._fileRef) {                                                                                             // 29\n        this._collection.remove(this._fileRef._id, callback);                                                          // 30\n      } else {                                                                                                         // 31\n        callback && callback(new Meteor.Error(404, 'No such file'));                                                   // 32\n      }                                                                                                                // 33\n                                                                                                                       //\n      return this;                                                                                                     // 34\n    }                                                                                                                  // 35\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FileCursor                                                                                         //\n        * @name link                                                                                                   //\n        * @param version {String} - Name of file's subversion                                                          //\n        * @summary Returns downloadable URL to File                                                                    //\n        * @returns {String}                                                                                            //\n        */                                                                                                             //\n                                                                                                                       //\n  FileCursor.prototype.link = function () {                                                                            //\n    function link() {                                                                                                  //\n      var version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'original';                    // 45\n                                                                                                                       //\n      this._collection._debug(\"[FilesCollection] [FileCursor] [link(\" + version + \")]\");                               // 46\n                                                                                                                       //\n      if (this._fileRef) {                                                                                             // 47\n        return this._collection.link(this._fileRef, version);                                                          // 48\n      }                                                                                                                // 49\n                                                                                                                       //\n      return '';                                                                                                       // 50\n    }                                                                                                                  // 51\n                                                                                                                       //\n    return link;                                                                                                       //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FileCursor                                                                                         //\n        * @name get                                                                                                    //\n        * @param property {String} - Name of sub-object property                                                       //\n        * @summary Returns current document as a plain Object, if `property` is specified - returns value of sub-object property\n        * @returns {Object|mix}                                                                                        //\n        */                                                                                                             //\n                                                                                                                       //\n  FileCursor.prototype.get = function () {                                                                             //\n    function get(property) {                                                                                           //\n      this._collection._debug(\"[FilesCollection] [FileCursor] [get(\" + property + \")]\");                               // 62\n                                                                                                                       //\n      if (property) {                                                                                                  // 63\n        return this._fileRef[property];                                                                                // 64\n      }                                                                                                                // 65\n                                                                                                                       //\n      return this._fileRef;                                                                                            // 66\n    }                                                                                                                  // 67\n                                                                                                                       //\n    return get;                                                                                                        //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FileCursor                                                                                         //\n        * @name fetch                                                                                                  //\n        * @summary Returns document as plain Object in Array                                                           //\n        * @returns {[Object]}                                                                                          //\n        */                                                                                                             //\n                                                                                                                       //\n  FileCursor.prototype.fetch = function () {                                                                           //\n    function fetch() {                                                                                                 //\n      this._collection._debug('[FilesCollection] [FileCursor] [fetch()]');                                             // 77\n                                                                                                                       //\n      return [this._fileRef];                                                                                          // 78\n    }                                                                                                                  // 79\n                                                                                                                       //\n    return fetch;                                                                                                      //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FileCursor                                                                                         //\n        * @name with                                                                                                   //\n        * @summary Returns reactive version of current FileCursor, useful to use with `{{#with}}...{{/with}}` block template helper\n        * @returns {[Object]}                                                                                          //\n        */                                                                                                             //\n                                                                                                                       //\n  FileCursor.prototype.with = function () {                                                                            //\n    function _with() {                                                                                                 //\n      this._collection._debug('[FilesCollection] [FileCursor] [with()]');                                              // 89\n                                                                                                                       //\n      return _.extend(this, this._collection.collection.findOne(this._fileRef._id));                                   // 90\n    }                                                                                                                  // 91\n                                                                                                                       //\n    return _with;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return FileCursor;                                                                                                   //\n}();                                                                                                                   //\n                                                                                                                       //\nvar FilesCursor = function () {                                                                                        //\n  function FilesCursor() {                                                                                             // 104\n    var _selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                            // 104\n                                                                                                                       //\n    var options = arguments[1];                                                                                        // 104\n    var _collection = arguments[2];                                                                                    // 104\n    (0, _classCallCheck3.default)(this, FilesCursor);                                                                  // 104\n    this._collection = _collection;                                                                                    // 105\n    this._selector = _selector;                                                                                        // 106\n    this._current = -1;                                                                                                // 107\n    this.cursor = this._collection.collection.find(this._selector, options);                                           // 108\n  } /*                                                                                                                 // 109\n     * @locus Anywhere                                                                                                 //\n     * @memberOf FilesCursor                                                                                           //\n     * @name get                                                                                                       //\n     * @summary Returns all matching document(s) as an Array. Alias of `.fetch()`                                      //\n     * @returns {[Object]}                                                                                             //\n     */                                                                                                                //\n                                                                                                                       //\n  FilesCursor.prototype.get = function () {                                                                            //\n    function get() {                                                                                                   //\n      this._collection._debug('[FilesCollection] [FilesCursor] [get()]');                                              // 119\n                                                                                                                       //\n      return this.cursor.fetch();                                                                                      // 120\n    }                                                                                                                  // 121\n                                                                                                                       //\n    return get;                                                                                                        //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name hasNext                                                                                                //\n        * @summary Returns `true` if there is next item available on Cursor                                            //\n        * @returns {Boolean}                                                                                           //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.hasNext = function () {                                                                        //\n    function hasNext() {                                                                                               //\n      this._collection._debug('[FilesCollection] [FilesCursor] [hasNext()]');                                          // 131\n                                                                                                                       //\n      return this._current < this.cursor.count() - 1;                                                                  // 132\n    }                                                                                                                  // 133\n                                                                                                                       //\n    return hasNext;                                                                                                    //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name next                                                                                                   //\n        * @summary Returns next item on Cursor, if available                                                           //\n        * @returns {Object|undefined}                                                                                  //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.next = function () {                                                                           //\n    function next() {                                                                                                  //\n      this._collection._debug('[FilesCollection] [FilesCursor] [next()]');                                             // 143\n                                                                                                                       //\n      this.cursor.fetch()[++this._current];                                                                            // 144\n    }                                                                                                                  // 145\n                                                                                                                       //\n    return next;                                                                                                       //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name hasPrevious                                                                                            //\n        * @summary Returns `true` if there is previous item available on Cursor                                        //\n        * @returns {Boolean}                                                                                           //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.hasPrevious = function () {                                                                    //\n    function hasPrevious() {                                                                                           //\n      this._collection._debug('[FilesCollection] [FilesCursor] [hasPrevious()]');                                      // 155\n                                                                                                                       //\n      return this._current !== -1;                                                                                     // 156\n    }                                                                                                                  // 157\n                                                                                                                       //\n    return hasPrevious;                                                                                                //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name previous                                                                                               //\n        * @summary Returns previous item on Cursor, if available                                                       //\n        * @returns {Object|undefined}                                                                                  //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.previous = function () {                                                                       //\n    function previous() {                                                                                              //\n      this._collection._debug('[FilesCollection] [FilesCursor] [previous()]');                                         // 167\n                                                                                                                       //\n      this.cursor.fetch()[--this._current];                                                                            // 168\n    }                                                                                                                  // 169\n                                                                                                                       //\n    return previous;                                                                                                   //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name fetch                                                                                                  //\n        * @summary Returns all matching document(s) as an Array.                                                       //\n        * @returns {[Object]}                                                                                          //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.fetch = function () {                                                                          //\n    function fetch() {                                                                                                 //\n      this._collection._debug('[FilesCollection] [FilesCursor] [fetch()]');                                            // 179\n                                                                                                                       //\n      return this.cursor.fetch() || [];                                                                                // 180\n    }                                                                                                                  // 181\n                                                                                                                       //\n    return fetch;                                                                                                      //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name first                                                                                                  //\n        * @summary Returns first item on Cursor, if available                                                          //\n        * @returns {Object|undefined}                                                                                  //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.first = function () {                                                                          //\n    function first() {                                                                                                 //\n      this._collection._debug('[FilesCollection] [FilesCursor] [first()]');                                            // 191\n                                                                                                                       //\n      this._current = 0;                                                                                               // 192\n      return this.fetch()[this._current];                                                                              // 193\n    }                                                                                                                  // 194\n                                                                                                                       //\n    return first;                                                                                                      //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name last                                                                                                   //\n        * @summary Returns last item on Cursor, if available                                                           //\n        * @returns {Object|undefined}                                                                                  //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.last = function () {                                                                           //\n    function last() {                                                                                                  //\n      this._collection._debug('[FilesCollection] [FilesCursor] [last()]');                                             // 204\n                                                                                                                       //\n      this._current = this.count() - 1;                                                                                // 205\n      return this.fetch()[this._current];                                                                              // 206\n    }                                                                                                                  // 207\n                                                                                                                       //\n    return last;                                                                                                       //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name count                                                                                                  //\n        * @summary Returns the number of documents that match a query                                                  //\n        * @returns {Number}                                                                                            //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.count = function () {                                                                          //\n    function count() {                                                                                                 //\n      this._collection._debug('[FilesCollection] [FilesCursor] [count()]');                                            // 217\n                                                                                                                       //\n      return this.cursor.count();                                                                                      // 218\n    }                                                                                                                  // 219\n                                                                                                                       //\n    return count;                                                                                                      //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name remove                                                                                                 //\n        * @param callback {Function} - Triggered asynchronously after item is removed or failed to be removed          //\n        * @summary Removes all documents that match a query                                                            //\n        * @returns {FilesCursor}                                                                                       //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.remove = function () {                                                                         //\n    function remove(callback) {                                                                                        //\n      this._collection._debug('[FilesCollection] [FilesCursor] [remove()]');                                           // 230\n                                                                                                                       //\n      this._collection.remove(this._selector, callback);                                                               // 231\n                                                                                                                       //\n      return this;                                                                                                     // 232\n    }                                                                                                                  // 233\n                                                                                                                       //\n    return remove;                                                                                                     //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name forEach                                                                                                //\n        * @param callback {Function} - Function to call. It will be called with three arguments: the `file`, a 0-based index, and cursor itself\n        * @param context {Object} - An object which will be the value of `this` inside `callback`                      //\n        * @summary Call `callback` once for each matching document, sequentially and synchronously.                    //\n        * @returns {undefined}                                                                                         //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.forEach = function () {                                                                        //\n    function forEach(callback) {                                                                                       //\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                            // 244\n                                                                                                                       //\n      this._collection._debug('[FilesCollection] [FilesCursor] [forEach()]');                                          // 245\n                                                                                                                       //\n      this.cursor.forEach(callback, context);                                                                          // 246\n    }                                                                                                                  // 247\n                                                                                                                       //\n    return forEach;                                                                                                    //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name each                                                                                                   //\n        * @summary Returns an Array of FileCursor made for each document on current cursor                             //\n        *          Useful when using in {{#each FilesCursor#each}}...{{/each}} block template helper                   //\n        * @returns {[FileCursor]}                                                                                      //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.each = function () {                                                                           //\n    function each() {                                                                                                  //\n      var _this = this;                                                                                                // 257\n                                                                                                                       //\n      return this.map(function (file) {                                                                                // 258\n        return new FileCursor(file, _this._collection);                                                                // 259\n      });                                                                                                              // 260\n    }                                                                                                                  // 261\n                                                                                                                       //\n    return each;                                                                                                       //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name map                                                                                                    //\n        * @param callback {Function} - Function to call. It will be called with three arguments: the `file`, a 0-based index, and cursor itself\n        * @param context {Object} - An object which will be the value of `this` inside `callback`                      //\n        * @summary Map `callback` over all matching documents. Returns an Array.                                       //\n        * @returns {Array}                                                                                             //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.map = function () {                                                                            //\n    function map(callback) {                                                                                           //\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                            // 272\n                                                                                                                       //\n      this._collection._debug('[FilesCollection] [FilesCursor] [map()]');                                              // 273\n                                                                                                                       //\n      return this.cursor.map(callback, context);                                                                       // 274\n    }                                                                                                                  // 275\n                                                                                                                       //\n    return map;                                                                                                        //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name current                                                                                                //\n        * @summary Returns current item on Cursor, if available                                                        //\n        * @returns {Object|undefined}                                                                                  //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.current = function () {                                                                        //\n    function current() {                                                                                               //\n      this._collection._debug('[FilesCollection] [FilesCursor] [current()]');                                          // 285\n                                                                                                                       //\n      if (this._current < 0) {                                                                                         // 286\n        this._current = 0;                                                                                             // 287\n      }                                                                                                                // 288\n                                                                                                                       //\n      return this.fetch()[this._current];                                                                              // 289\n    }                                                                                                                  // 290\n                                                                                                                       //\n    return current;                                                                                                    //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name observe                                                                                                //\n        * @param callbacks {Object} - Functions to call to deliver the result set as it changes                        //\n        * @summary Watch a query. Receive callbacks as the result set changes.                                         //\n        * @url http://docs.meteor.com/api/collections.html#Mongo-Cursor-observe                                        //\n        * @returns {Object} - live query handle                                                                        //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.observe = function () {                                                                        //\n    function observe(callbacks) {                                                                                      //\n      this._collection._debug('[FilesCollection] [FilesCursor] [observe()]');                                          // 302\n                                                                                                                       //\n      return this.cursor.observe(callbacks);                                                                           // 303\n    }                                                                                                                  // 304\n                                                                                                                       //\n    return observe;                                                                                                    //\n  }(); /*                                                                                                              //\n        * @locus Anywhere                                                                                              //\n        * @memberOf FilesCursor                                                                                        //\n        * @name observeChanges                                                                                         //\n        * @param callbacks {Object} - Functions to call to deliver the result set as it changes                        //\n        * @summary Watch a query. Receive callbacks as the result set changes. Only the differences between the old and new documents are passed to the callbacks.\n        * @url http://docs.meteor.com/api/collections.html#Mongo-Cursor-observeChanges                                 //\n        * @returns {Object} - live query handle                                                                        //\n        */                                                                                                             //\n                                                                                                                       //\n  FilesCursor.prototype.observeChanges = function () {                                                                 //\n    function observeChanges(callbacks) {                                                                               //\n      this._collection._debug('[FilesCollection] [FilesCursor] [observeChanges()]');                                   // 316\n                                                                                                                       //\n      return this.cursor.observeChanges(callbacks);                                                                    // 317\n    }                                                                                                                  // 318\n                                                                                                                       //\n    return observeChanges;                                                                                             //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return FilesCursor;                                                                                                  //\n}();                                                                                                                   //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ostrio_files/lib.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  fixJSONParse: function () {                                                                                          // 1\n    return fixJSONParse;                                                                                               // 1\n  },                                                                                                                   // 1\n  fixJSONStringify: function () {                                                                                      // 1\n    return fixJSONStringify;                                                                                           // 1\n  },                                                                                                                   // 1\n  formatFleURL: function () {                                                                                          // 1\n    return formatFleURL;                                                                                               // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar check = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\n/*                                                                                                                     // 4\n * @const {Function} fixJSONParse - Fix issue with Date parse                                                          //\n */var fixJSONParse = function (obj) {                                                                                 //\n  for (var key in meteorBabelHelpers.sanitizeForInObject(obj)) {                                                       // 8\n    if (_.isString(obj[key]) && !!~obj[key].indexOf('=--JSON-DATE--=')) {                                              // 9\n      obj[key] = obj[key].replace('=--JSON-DATE--=', '');                                                              // 10\n      obj[key] = new Date(parseInt(obj[key]));                                                                         // 11\n    } else if (_.isObject(obj[key])) {                                                                                 // 12\n      obj[key] = fixJSONParse(obj[key]);                                                                               // 13\n    } else if (_.isArray(obj[key])) {                                                                                  // 14\n      var v = void 0;                                                                                                  // 15\n                                                                                                                       //\n      for (var i = 0; i < obj[key].length; i++) {                                                                      // 16\n        v = obj[key][i];                                                                                               // 17\n                                                                                                                       //\n        if (_.isObject(v)) {                                                                                           // 18\n          obj[key][i] = fixJSONParse(v);                                                                               // 19\n        } else if (_.isString(v) && !!~v.indexOf('=--JSON-DATE--=')) {                                                 // 20\n          v = v.replace('=--JSON-DATE--=', '');                                                                        // 21\n          obj[key][i] = new Date(parseInt(v));                                                                         // 22\n        }                                                                                                              // 23\n      }                                                                                                                // 24\n    }                                                                                                                  // 25\n  }                                                                                                                    // 26\n                                                                                                                       //\n  return obj;                                                                                                          // 27\n}; /*                                                                                                                  // 28\n    * @const {Function} fixJSONStringify - Fix issue with Date stringify                                               //\n    */                                                                                                                 //\n                                                                                                                       //\nvar fixJSONStringify = function (obj) {                                                                                // 33\n  for (var key in meteorBabelHelpers.sanitizeForInObject(obj)) {                                                       // 34\n    if (_.isDate(obj[key])) {                                                                                          // 35\n      obj[key] = \"=--JSON-DATE--=\" + +obj[key];                                                                        // 36\n    } else if (_.isObject(obj[key])) {                                                                                 // 37\n      obj[key] = fixJSONStringify(obj[key]);                                                                           // 38\n    } else if (_.isArray(obj[key])) {                                                                                  // 39\n      var v = void 0;                                                                                                  // 40\n                                                                                                                       //\n      for (var i = 0; i < obj[key].length; i++) {                                                                      // 41\n        v = obj[key][i];                                                                                               // 42\n                                                                                                                       //\n        if (_.isObject(v)) {                                                                                           // 43\n          obj[key][i] = fixJSONStringify(v);                                                                           // 44\n        } else if (_.isDate(v)) {                                                                                      // 45\n          obj[key][i] = \"=--JSON-DATE--=\" + +v;                                                                        // 46\n        }                                                                                                              // 47\n      }                                                                                                                // 48\n    }                                                                                                                  // 49\n  }                                                                                                                    // 50\n                                                                                                                       //\n  return obj;                                                                                                          // 51\n}; /*                                                                                                                  // 52\n    * @locus Anywhere                                                                                                  //\n    * @private                                                                                                         //\n    * @name formatFleURL                                                                                               //\n    * @param {Object} fileRef - File reference object                                                                  //\n    * @param {String} version - [Optional] Version of file you would like build URL for                                //\n    * @summary Returns formatted URL for file                                                                          //\n    * @returns {String} Downloadable link                                                                              //\n    */                                                                                                                 //\n                                                                                                                       //\nvar formatFleURL = function (fileRef) {                                                                                // 63\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'original';                        // 63\n  var ext = void 0;                                                                                                    // 64\n  check(fileRef, Object);                                                                                              // 65\n  check(version, String);                                                                                              // 66\n                                                                                                                       //\n  var _root = __meteor_runtime_config__.ROOT_URL.replace(/\\/+$/, '');                                                  // 68\n                                                                                                                       //\n  var vRef = fileRef.versions && fileRef.versions[version] || fileRef;                                                 // 69\n                                                                                                                       //\n  if (vRef.extension && _.isString(vRef, 'extension')) {                                                               // 71\n    ext = \".\" + vRef.extension.replace(/^\\./, '');                                                                     // 72\n  } else {                                                                                                             // 73\n    ext = '';                                                                                                          // 74\n  }                                                                                                                    // 75\n                                                                                                                       //\n  if (fileRef.public === true) {                                                                                       // 77\n    return _root + (version === 'original' ? fileRef._downloadRoute + \"/\" + fileRef._id + ext : fileRef._downloadRoute + \"/\" + version + \"-\" + fileRef._id + ext);\n  }                                                                                                                    // 79\n                                                                                                                       //\n  return _root + (fileRef._downloadRoute + \"/\" + fileRef._collectionName + \"/\" + fileRef._id + \"/\" + version + \"/\" + fileRef._id + ext);\n};                                                                                                                     // 81\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"upload.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ostrio_files/upload.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  UploadInstance: function () {                                                                                        // 1\n    return UploadInstance;                                                                                             // 1\n  },                                                                                                                   // 1\n  FileUpload: function () {                                                                                            // 1\n    return FileUpload;                                                                                                 // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar _ = void 0;                                                                                                        // 1\n                                                                                                                       //\nmodule.watch(require(\"meteor/underscore\"), {                                                                           // 1\n  _: function (v) {                                                                                                    // 1\n    _ = v;                                                                                                             // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar HTTP = void 0;                                                                                                     // 1\nmodule.watch(require(\"meteor/http\"), {                                                                                 // 1\n  HTTP: function (v) {                                                                                                 // 1\n    HTTP = v;                                                                                                          // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nvar Meteor = void 0;                                                                                                   // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                               // 1\n  Meteor: function (v) {                                                                                               // 1\n    Meteor = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 2);                                                                                                                 // 1\nvar Random = void 0;                                                                                                   // 1\nmodule.watch(require(\"meteor/random\"), {                                                                               // 1\n  Random: function (v) {                                                                                               // 1\n    Random = v;                                                                                                        // 1\n  }                                                                                                                    // 1\n}, 3);                                                                                                                 // 1\nvar Tracker = void 0;                                                                                                  // 1\nmodule.watch(require(\"meteor/tracker\"), {                                                                              // 1\n  Tracker: function (v) {                                                                                              // 1\n    Tracker = v;                                                                                                       // 1\n  }                                                                                                                    // 1\n}, 4);                                                                                                                 // 1\nvar ReactiveVar = void 0;                                                                                              // 1\nmodule.watch(require(\"meteor/reactive-var\"), {                                                                         // 1\n  ReactiveVar: function (v) {                                                                                          // 1\n    ReactiveVar = v;                                                                                                   // 1\n  }                                                                                                                    // 1\n}, 5);                                                                                                                 // 1\nvar EventEmitter = void 0;                                                                                             // 1\nmodule.watch(require(\"eventemitter3\"), {                                                                               // 1\n  EventEmitter: function (v) {                                                                                         // 1\n    EventEmitter = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 6);                                                                                                                 // 1\nvar check = void 0,                                                                                                    // 1\n    Match = void 0;                                                                                                    // 1\nmodule.watch(require(\"meteor/check\"), {                                                                                // 1\n  check: function (v) {                                                                                                // 1\n    check = v;                                                                                                         // 1\n  },                                                                                                                   // 1\n  Match: function (v) {                                                                                                // 1\n    Match = v;                                                                                                         // 1\n  }                                                                                                                    // 1\n}, 7);                                                                                                                 // 1\nvar fixJSONParse = void 0,                                                                                             // 1\n    fixJSONStringify = void 0;                                                                                         // 1\nmodule.watch(require(\"./lib.js\"), {                                                                                    // 1\n  fixJSONParse: function (v) {                                                                                         // 1\n    fixJSONParse = v;                                                                                                  // 1\n  },                                                                                                                   // 1\n  fixJSONStringify: function (v) {                                                                                     // 1\n    fixJSONStringify = v;                                                                                              // 1\n  }                                                                                                                    // 1\n}, 8);                                                                                                                 // 1\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); /*                                          // 11\n                                                                            * @locus Client                            //\n                                                                            * @name UploadInstance                     //\n                                                                            * @class UploadInstance                    //\n                                                                            * @summary Internal Class, used for file upload\n                                                                            */                                         //\n                                                                                                                       //\nvar UploadInstance = function (_EventEmitter) {                                                                        //\n  (0, _inherits3.default)(UploadInstance, _EventEmitter);                                                              //\n                                                                                                                       //\n  function UploadInstance(config, collection) {                                                                        // 20\n    (0, _classCallCheck3.default)(this, UploadInstance);                                                               // 20\n                                                                                                                       //\n    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));                              // 20\n                                                                                                                       //\n    _this.config = config;                                                                                             // 22\n    _this.collection = collection;                                                                                     // 23\n                                                                                                                       //\n    _this.collection._debug('[FilesCollection] [insert()]');                                                           // 24\n                                                                                                                       //\n    if (!_this.config.ddp) {                                                                                           // 26\n      _this.config.ddp = _this.collection.ddp;                                                                         // 27\n    }                                                                                                                  // 28\n                                                                                                                       //\n    if (!_this.config.meta) {                                                                                          // 30\n      _this.config.meta = {};                                                                                          // 31\n    }                                                                                                                  // 32\n                                                                                                                       //\n    if (!_this.config.streams) {                                                                                       // 34\n      _this.config.streams = 2;                                                                                        // 35\n    }                                                                                                                  // 36\n                                                                                                                       //\n    if (_this.config.streams < 1) {                                                                                    // 38\n      _this.config.streams = 2;                                                                                        // 39\n    }                                                                                                                  // 40\n                                                                                                                       //\n    if (!_.isString(_this.config.transport)) {                                                                         // 42\n      _this.config.transport = 'ddp';                                                                                  // 43\n    }                                                                                                                  // 44\n                                                                                                                       //\n    _this.config.transport = _this.config.transport.toLowerCase();                                                     // 46\n                                                                                                                       //\n    if (_this.config.transport !== 'ddp' && _this.config.transport !== 'http') {                                       // 48\n      _this.config.transport = 'ddp';                                                                                  // 49\n    }                                                                                                                  // 50\n                                                                                                                       //\n    if (!_this.config.chunkSize) {                                                                                     // 52\n      _this.config.chunkSize = _this.collection.chunkSize;                                                             // 53\n    }                                                                                                                  // 54\n                                                                                                                       //\n    if (!_.isBoolean(_this.config.allowWebWorkers)) {                                                                  // 56\n      _this.config.allowWebWorkers = true;                                                                             // 57\n    }                                                                                                                  // 58\n                                                                                                                       //\n    check(_this.config, {                                                                                              // 60\n      ddp: Match.Any,                                                                                                  // 61\n      file: Match.Any,                                                                                                 // 62\n      meta: Match.Optional(Object),                                                                                    // 63\n      type: Match.Optional(String),                                                                                    // 64\n      onError: Match.Optional(Function),                                                                               // 65\n      onAbort: Match.Optional(Function),                                                                               // 66\n      streams: Match.OneOf('dynamic', Number),                                                                         // 67\n      onStart: Match.Optional(Function),                                                                               // 68\n      fileName: Match.Optional(String),                                                                                // 69\n      isBase64: Match.Optional(Boolean),                                                                               // 70\n      transport: Match.OneOf('http', 'ddp'),                                                                           // 71\n      chunkSize: Match.OneOf('dynamic', Number),                                                                       // 72\n      onUploaded: Match.Optional(Function),                                                                            // 73\n      onProgress: Match.Optional(Function),                                                                            // 74\n      onBeforeUpload: Match.Optional(Function),                                                                        // 75\n      allowWebWorkers: Boolean                                                                                         // 76\n    });                                                                                                                // 60\n                                                                                                                       //\n    if (_this.config.isBase64 === true) {                                                                              // 79\n      check(_this.config.file, String);                                                                                // 80\n                                                                                                                       //\n      if (!_this.config.fileName) {                                                                                    // 82\n        throw new Meteor.Error(400, '\"fileName\" must me specified for base64 upload!');                                // 83\n      }                                                                                                                // 84\n                                                                                                                       //\n      if (!!~_this.config.file.indexOf('data:')) {                                                                     // 86\n        _this.config.file = _this.config.file.replace('data:', '');                                                    // 87\n      }                                                                                                                // 88\n                                                                                                                       //\n      if (!!~_this.config.file.indexOf(',')) {                                                                         // 90\n        var _file = _this.config.file.split(',');                                                                      // 91\n                                                                                                                       //\n        _this.fileData = {                                                                                             // 92\n          size: Math.floor(_file[1].replace(/\\=/g, '').length / 4 * 3),                                                // 93\n          type: _file[0].split(';')[0],                                                                                // 94\n          name: _this.config.fileName,                                                                                 // 95\n          meta: _this.config.meta                                                                                      // 96\n        };                                                                                                             // 92\n        _this.config.file = _file[1];                                                                                  // 98\n      } else if (!_this.config.type) {                                                                                 // 99\n        throw new Meteor.Error(400, '\"type\" must me specified for base64 upload! And represent mime-type of the file');\n      } else {                                                                                                         // 101\n        _this.fileData = {                                                                                             // 102\n          size: Math.floor(_this.config.file.replace(/\\=/g, '').length / 4 * 3),                                       // 103\n          type: _this.config.type,                                                                                     // 104\n          name: _this.config.fileName,                                                                                 // 105\n          meta: _this.config.meta                                                                                      // 106\n        };                                                                                                             // 102\n      }                                                                                                                // 108\n    }                                                                                                                  // 109\n                                                                                                                       //\n    if (_this.config.file) {                                                                                           // 111\n      if (!_this.config.isBase64) {                                                                                    // 112\n        try {                                                                                                          // 113\n          if (!_this.config.file.name || !_this.config.file.size) {                                                    // 114\n            throw new Meteor.Error(500, 'Not a File!');                                                                // 115\n          }                                                                                                            // 116\n        } catch (e) {                                                                                                  // 117\n          throw new Meteor.Error(500, '[FilesCollection] [insert] Insert method accepts File, not a FileList. You need to provide a real File. File must have `.name` property, and its size must be larger than zero.');\n        }                                                                                                              // 119\n                                                                                                                       //\n        _this.fileData = {                                                                                             // 121\n          size: _this.config.file.size,                                                                                // 122\n          type: _this.config.type || _this.config.file.type,                                                           // 123\n          name: _this.config.fileName || _this.config.file.name,                                                       // 124\n          meta: _this.config.meta                                                                                      // 125\n        };                                                                                                             // 121\n      }                                                                                                                // 127\n                                                                                                                       //\n      if (_this.collection.debug) {                                                                                    // 129\n        console.time(\"insert \" + _this.fileData.name);                                                                 // 130\n        console.time(\"loadFile \" + _this.fileData.name);                                                               // 131\n      }                                                                                                                // 132\n                                                                                                                       //\n      if (_this.collection._supportWebWorker && _this.config.allowWebWorkers) {                                        // 134\n        try {                                                                                                          // 135\n          _this.worker = new Worker(_this.collection._webWorkerUrl);                                                   // 136\n        } catch (wwError) {                                                                                            // 137\n          _this.worker = false;                                                                                        // 138\n                                                                                                                       //\n          _this.collection._debug('[FilesCollection] [insert] [create WebWorker]: Can\\'t create WebWorker, fallback to MainThread', wwError);\n        }                                                                                                              // 140\n      } else {                                                                                                         // 141\n        _this.worker = null;                                                                                           // 142\n      }                                                                                                                // 143\n                                                                                                                       //\n      _this.startTime = {};                                                                                            // 145\n      _this.config.debug = _this.collection.debug;                                                                     // 146\n      _this.config._debug = _this.collection._debug;                                                                   // 147\n      _this.currentChunk = 0;                                                                                          // 148\n      _this.transferTime = 0;                                                                                          // 149\n      _this.trackerComp = null;                                                                                        // 150\n      _this.sentChunks = 0;                                                                                            // 151\n      _this.fileLength = 1;                                                                                            // 152\n      _this.EOFsent = false;                                                                                           // 153\n      _this.fileId = Random.id();                                                                                      // 154\n      _this.FSName = _this.collection.namingFunction ? _this.collection.namingFunction(_this.fileData) : _this.fileId;\n      _this.pipes = [];                                                                                                // 156\n      _this.fileData = _.extend(_this.fileData, _this.collection._getExt(_this.fileData.name), {                       // 158\n        mime: _this.collection._getMimeType(_this.fileData)                                                            // 158\n      });                                                                                                              // 158\n      _this.fileData['mime-type'] = _this.fileData.mime;                                                               // 159\n      _this.result = new FileUpload(_.extend(_this.config, {                                                           // 161\n        fileData: _this.fileData,                                                                                      // 162\n        fileId: _this.fileId,                                                                                          // 163\n        _Abort: _this.collection._methodNames._Abort                                                                   // 164\n      }));                                                                                                             // 161\n                                                                                                                       //\n      _this.beforeunload = function (e) {                                                                              // 167\n        var message = _.isFunction(_this.collection.onbeforeunloadMessage) ? _this.collection.onbeforeunloadMessage.call(_this.result, _this.fileData) : _this.collection.onbeforeunloadMessage;\n                                                                                                                       //\n        if (e) {                                                                                                       // 170\n          e.returnValue = message;                                                                                     // 171\n        }                                                                                                              // 172\n                                                                                                                       //\n        return message;                                                                                                // 173\n      };                                                                                                               // 174\n                                                                                                                       //\n      _this.result.config.beforeunload = _this.beforeunload;                                                           // 176\n      window.addEventListener('beforeunload', _this.beforeunload, false);                                              // 177\n                                                                                                                       //\n      _this.result.config._onEnd = function () {                                                                       // 179\n        return _this.emit('_onEnd');                                                                                   // 179\n      };                                                                                                               // 179\n                                                                                                                       //\n      _this.addListener('end', _this.end);                                                                             // 181\n                                                                                                                       //\n      _this.addListener('start', _this.start);                                                                         // 182\n                                                                                                                       //\n      _this.addListener('upload', _this.upload);                                                                       // 183\n                                                                                                                       //\n      _this.addListener('sendEOF', _this.sendEOF);                                                                     // 184\n                                                                                                                       //\n      _this.addListener('prepare', _this.prepare);                                                                     // 185\n                                                                                                                       //\n      _this.addListener('sendChunk', _this.sendChunk);                                                                 // 186\n                                                                                                                       //\n      _this.addListener('proceedChunk', _this.proceedChunk);                                                           // 187\n                                                                                                                       //\n      _this.addListener('createStreams', _this.createStreams);                                                         // 188\n                                                                                                                       //\n      _this.addListener('calculateStats', _.throttle(function () {                                                     // 190\n        var _t = _this.transferTime / _this.sentChunks / _this.config.streams;                                         // 191\n                                                                                                                       //\n        _this.result.estimateTime.set(_t * (_this.fileLength - _this.sentChunks));                                     // 192\n                                                                                                                       //\n        _this.result.estimateSpeed.set(_this.config.chunkSize / (_t / 1000));                                          // 193\n                                                                                                                       //\n        var progress = Math.round(_this.sentChunks / _this.fileLength * 100);                                          // 195\n                                                                                                                       //\n        _this.result.progress.set(progress);                                                                           // 196\n                                                                                                                       //\n        _this.config.onProgress && _this.config.onProgress.call(_this.result, progress, _this.fileData);               // 197\n                                                                                                                       //\n        _this.result.emit('progress', progress, _this.fileData);                                                       // 198\n      }, 250));                                                                                                        // 199\n                                                                                                                       //\n      _this.addListener('_onEnd', function () {                                                                        // 201\n        if (_this.result.estimateTimer) {                                                                              // 202\n          Meteor.clearInterval(_this.result.estimateTimer);                                                            // 203\n        }                                                                                                              // 204\n                                                                                                                       //\n        if (_this.worker) {                                                                                            // 205\n          _this.worker.terminate();                                                                                    // 206\n        }                                                                                                              // 207\n                                                                                                                       //\n        if (_this.trackerComp) {                                                                                       // 208\n          _this.trackerComp.stop();                                                                                    // 209\n        }                                                                                                              // 210\n                                                                                                                       //\n        if (_this.beforeunload) {                                                                                      // 211\n          window.removeEventListener('beforeunload', _this.beforeunload, false);                                       // 212\n        }                                                                                                              // 213\n                                                                                                                       //\n        if (_this.result) {                                                                                            // 214\n          return _this.result.progress.set(0);                                                                         // 215\n        }                                                                                                              // 216\n                                                                                                                       //\n        return void 0;                                                                                                 // 217\n      });                                                                                                              // 218\n    } else {                                                                                                           // 219\n      throw new Meteor.Error(500, '[FilesCollection] [insert] Have you forget to pass a File itself?');                // 220\n    }                                                                                                                  // 221\n                                                                                                                       //\n    return _this;                                                                                                      // 20\n  }                                                                                                                    // 222\n                                                                                                                       //\n  UploadInstance.prototype.end = function () {                                                                         //\n    function end(error, data) {                                                                                        //\n      this.collection._debug('[FilesCollection] [UploadInstance] [end]', this.fileData.name);                          // 225\n                                                                                                                       //\n      if (this.collection.debug) {                                                                                     // 226\n        console.timeEnd(\"insert \" + this.fileData.name);                                                               // 227\n      }                                                                                                                // 228\n                                                                                                                       //\n      this.emit('_onEnd');                                                                                             // 230\n      this.result.emit('uploaded', error, data);                                                                       // 231\n      this.config.onUploaded && this.config.onUploaded.call(this.result, error, data);                                 // 232\n                                                                                                                       //\n      if (error) {                                                                                                     // 234\n        this.collection._debug('[FilesCollection] [insert] [end] Error:', error);                                      // 235\n                                                                                                                       //\n        this.result.abort();                                                                                           // 236\n        this.result.state.set('aborted');                                                                              // 237\n        this.result.emit('error', error, this.fileData);                                                               // 238\n        this.config.onError && this.config.onError.call(this.result, error, this.fileData);                            // 239\n      } else {                                                                                                         // 240\n        this.result.state.set('completed');                                                                            // 241\n        this.collection.emit('afterUpload', data);                                                                     // 242\n      }                                                                                                                // 243\n                                                                                                                       //\n      this.result.emit('end', error, data || this.fileData);                                                           // 244\n      return this.result;                                                                                              // 245\n    }                                                                                                                  // 246\n                                                                                                                       //\n    return end;                                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  UploadInstance.prototype.sendChunk = function () {                                                                   //\n    function sendChunk(evt) {                                                                                          //\n      var _this2 = this;                                                                                               // 248\n                                                                                                                       //\n      var opts = {                                                                                                     // 249\n        fileId: this.fileId,                                                                                           // 250\n        binData: evt.data.bin,                                                                                         // 251\n        chunkId: evt.data.chunkId                                                                                      // 252\n      };                                                                                                               // 249\n                                                                                                                       //\n      if (this.config.isBase64) {                                                                                      // 255\n        var pad = opts.binData.length % 4;                                                                             // 256\n                                                                                                                       //\n        if (pad) {                                                                                                     // 257\n          var p = 0;                                                                                                   // 258\n                                                                                                                       //\n          while (p < pad) {                                                                                            // 259\n            opts.binData += '=';                                                                                       // 260\n            p++;                                                                                                       // 261\n          }                                                                                                            // 262\n        }                                                                                                              // 263\n      }                                                                                                                // 264\n                                                                                                                       //\n      this.emit('data', evt.data.bin);                                                                                 // 266\n                                                                                                                       //\n      if (this.pipes.length) {                                                                                         // 267\n        for (var i = this.pipes.length - 1; i >= 0; i--) {                                                             // 268\n          opts.binData = this.pipes[i](opts.binData);                                                                  // 269\n        }                                                                                                              // 270\n      }                                                                                                                // 271\n                                                                                                                       //\n      if (this.fileLength === evt.data.chunkId) {                                                                      // 273\n        if (this.collection.debug) {                                                                                   // 274\n          console.timeEnd(\"loadFile \" + this.fileData.name);                                                           // 275\n        }                                                                                                              // 276\n                                                                                                                       //\n        this.emit('readEnd');                                                                                          // 277\n      }                                                                                                                // 278\n                                                                                                                       //\n      if (opts.binData) {                                                                                              // 280\n        if (this.config.transport === 'ddp') {                                                                         // 281\n          this.config.ddp.call(this.collection._methodNames._Write, opts, function (error) {                           // 282\n            _this2.transferTime += +new Date() - _this2.startTime[opts.chunkId];                                       // 283\n                                                                                                                       //\n            if (error) {                                                                                               // 284\n              if (_this2.result.state.get() !== 'aborted') {                                                           // 285\n                _this2.emit('end', error);                                                                             // 286\n              }                                                                                                        // 287\n            } else {                                                                                                   // 288\n              ++_this2.sentChunks;                                                                                     // 289\n                                                                                                                       //\n              if (_this2.sentChunks >= _this2.fileLength) {                                                            // 290\n                _this2.emit('sendEOF');                                                                                // 291\n              } else if (_this2.currentChunk < _this2.fileLength) {                                                    // 292\n                _this2.emit('upload');                                                                                 // 293\n              }                                                                                                        // 294\n                                                                                                                       //\n              _this2.emit('calculateStats');                                                                           // 295\n            }                                                                                                          // 296\n          });                                                                                                          // 297\n        } else {                                                                                                       // 298\n          HTTP.call('POST', this.collection.downloadRoute + \"/\" + this.collection.collectionName + \"/__upload\", {      // 299\n            content: opts.binData,                                                                                     // 300\n            headers: {                                                                                                 // 301\n              'x-mtok': (_.isObject(Meteor.connection) ? Meteor.connection._lastSessionId : undefined) || null,        // 302\n              'x-fileid': opts.fileId,                                                                                 // 303\n              'x-chunkid': opts.chunkId,                                                                               // 304\n              'content-type': 'text/plain'                                                                             // 305\n            }                                                                                                          // 301\n          }, function (error) {                                                                                        // 299\n            _this2.transferTime += +new Date() - _this2.startTime[opts.chunkId];                                       // 308\n                                                                                                                       //\n            if (error) {                                                                                               // 309\n              if (\"\" + error === 'Error: network') {                                                                   // 310\n                _this2.result.pause();                                                                                 // 311\n              } else {                                                                                                 // 312\n                if (_this2.result.state.get() !== 'aborted') {                                                         // 313\n                  _this2.emit('end', error);                                                                           // 314\n                }                                                                                                      // 315\n              }                                                                                                        // 316\n            } else {                                                                                                   // 317\n              ++_this2.sentChunks;                                                                                     // 318\n                                                                                                                       //\n              if (_this2.sentChunks >= _this2.fileLength) {                                                            // 319\n                _this2.emit('sendEOF');                                                                                // 320\n              } else if (_this2.currentChunk < _this2.fileLength) {                                                    // 321\n                _this2.emit('upload');                                                                                 // 322\n              }                                                                                                        // 323\n                                                                                                                       //\n              _this2.emit('calculateStats');                                                                           // 324\n            }                                                                                                          // 325\n          });                                                                                                          // 326\n        }                                                                                                              // 327\n      }                                                                                                                // 328\n    }                                                                                                                  // 329\n                                                                                                                       //\n    return sendChunk;                                                                                                  //\n  }();                                                                                                                 //\n                                                                                                                       //\n  UploadInstance.prototype.sendEOF = function () {                                                                     //\n    function sendEOF() {                                                                                               //\n      var _this3 = this;                                                                                               // 331\n                                                                                                                       //\n      this.collection._debug('[FilesCollection] [UploadInstance] [sendEOF]', this.EOFsent);                            // 332\n                                                                                                                       //\n      if (!this.EOFsent) {                                                                                             // 333\n        this.EOFsent = true;                                                                                           // 334\n        var opts = {                                                                                                   // 335\n          eof: true,                                                                                                   // 336\n          fileId: this.fileId                                                                                          // 337\n        };                                                                                                             // 335\n                                                                                                                       //\n        if (this.config.transport === 'ddp') {                                                                         // 340\n          this.config.ddp.call(this.collection._methodNames._Write, opts, function (error, result) {                   // 341\n            _this3.emit('end', error, result);                                                                         // 342\n          });                                                                                                          // 343\n        } else {                                                                                                       // 344\n          HTTP.call('POST', this.collection.downloadRoute + \"/\" + this.collection.collectionName + \"/__upload\", {      // 345\n            content: '',                                                                                               // 346\n            headers: {                                                                                                 // 347\n              'x-eof': '1',                                                                                            // 348\n              'x-mtok': (_.isObject(Meteor.connection) ? Meteor.connection._lastSessionId : undefined) || null,        // 349\n              'x-fileId': opts.fileId,                                                                                 // 350\n              'content-type': 'text/plain'                                                                             // 351\n            }                                                                                                          // 347\n          }, function (error, _result) {                                                                               // 345\n            var result = void 0;                                                                                       // 354\n                                                                                                                       //\n            try {                                                                                                      // 355\n              result = JSON.parse((_.isObject(_result) ? _result.content : undefined) || {});                          // 356\n            } catch (e) {                                                                                              // 357\n              console.warn('Something went wrong! [sendEOF] method doesn\\'t returned JSON! Looks like you\\'re on Cordova app or behind proxy, switching to DDP transport is recommended.');\n              result = {};                                                                                             // 359\n            }                                                                                                          // 360\n                                                                                                                       //\n            if (result.meta) {                                                                                         // 362\n              result.meta = fixJSONParse(result.meta);                                                                 // 363\n            }                                                                                                          // 364\n                                                                                                                       //\n            _this3.emit('end', error, result);                                                                         // 366\n          });                                                                                                          // 367\n        }                                                                                                              // 368\n      }                                                                                                                // 369\n    }                                                                                                                  // 370\n                                                                                                                       //\n    return sendEOF;                                                                                                    //\n  }();                                                                                                                 //\n                                                                                                                       //\n  UploadInstance.prototype.proceedChunk = function () {                                                                //\n    function proceedChunk(chunkId) {                                                                                   //\n      var _this4 = this;                                                                                               // 372\n                                                                                                                       //\n      var chunk = this.config.file.slice(this.config.chunkSize * (chunkId - 1), this.config.chunkSize * chunkId);      // 373\n                                                                                                                       //\n      if (this.config.isBase64) {                                                                                      // 375\n        this.emit('sendChunk', {                                                                                       // 376\n          data: {                                                                                                      // 377\n            bin: chunk,                                                                                                // 378\n            chunkId: chunkId                                                                                           // 379\n          }                                                                                                            // 377\n        });                                                                                                            // 376\n      } else {                                                                                                         // 382\n        var fileReader = void 0;                                                                                       // 383\n                                                                                                                       //\n        if (FileReader) {                                                                                              // 384\n          fileReader = new FileReader();                                                                               // 385\n                                                                                                                       //\n          fileReader.onloadend = function (evt) {                                                                      // 387\n            _this4.emit('sendChunk', {                                                                                 // 388\n              data: {                                                                                                  // 389\n                bin: ((_.isObject(fileReader) ? fileReader.result : undefined) || (evt.srcElement ? evt.srcElement.result : undefined) || (evt.target ? evt.target.result : undefined)).split(',')[1],\n                chunkId: chunkId                                                                                       // 391\n              }                                                                                                        // 389\n            });                                                                                                        // 388\n          };                                                                                                           // 394\n                                                                                                                       //\n          fileReader.onerror = function (e) {                                                                          // 396\n            _this4.emit('end', (e.target || e.srcElement).error);                                                      // 397\n          };                                                                                                           // 398\n                                                                                                                       //\n          fileReader.readAsDataURL(chunk);                                                                             // 400\n        } else if (FileReaderSync) {                                                                                   // 401\n          fileReader = new FileReaderSync();                                                                           // 402\n          this.emit('sendChunk', {                                                                                     // 404\n            data: {                                                                                                    // 405\n              bin: fileReader.readAsDataURL(chunk).split(',')[1],                                                      // 406\n              chunkId: chunkId                                                                                         // 407\n            }                                                                                                          // 405\n          });                                                                                                          // 404\n        } else {                                                                                                       // 410\n          this.emit('end', 'File API is not supported in this Browser!');                                              // 411\n        }                                                                                                              // 412\n      }                                                                                                                // 413\n    }                                                                                                                  // 414\n                                                                                                                       //\n    return proceedChunk;                                                                                               //\n  }();                                                                                                                 //\n                                                                                                                       //\n  UploadInstance.prototype.upload = function () {                                                                      //\n    function upload() {                                                                                                //\n      if (this.result.onPause.get()) {                                                                                 // 417\n        return this;                                                                                                   // 418\n      }                                                                                                                // 419\n                                                                                                                       //\n      if (this.result.state.get() === 'aborted') {                                                                     // 421\n        return this;                                                                                                   // 422\n      }                                                                                                                // 423\n                                                                                                                       //\n      if (this.currentChunk <= this.fileLength) {                                                                      // 425\n        ++this.currentChunk;                                                                                           // 426\n                                                                                                                       //\n        if (this.worker) {                                                                                             // 427\n          this.worker.postMessage({                                                                                    // 428\n            f: this.config.file,                                                                                       // 429\n            sc: this.sentChunks,                                                                                       // 430\n            cc: this.currentChunk,                                                                                     // 431\n            cs: this.config.chunkSize,                                                                                 // 432\n            ib: this.config.isBase64                                                                                   // 433\n          });                                                                                                          // 428\n        } else {                                                                                                       // 435\n          this.emit('proceedChunk', this.currentChunk);                                                                // 436\n        }                                                                                                              // 437\n      } else {                                                                                                         // 438\n        this.emit('sendEOF');                                                                                          // 439\n      }                                                                                                                // 440\n                                                                                                                       //\n      this.startTime[this.currentChunk] = +new Date();                                                                 // 441\n      return this;                                                                                                     // 442\n    }                                                                                                                  // 443\n                                                                                                                       //\n    return upload;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  UploadInstance.prototype.createStreams = function () {                                                               //\n    function createStreams() {                                                                                         //\n      this.collection._debug('[FilesCollection] [UploadInstance] [createStreams]');                                    // 446\n                                                                                                                       //\n      var i = 1;                                                                                                       // 447\n                                                                                                                       //\n      while (i <= this.config.streams) {                                                                               // 448\n        this.emit('upload');                                                                                           // 449\n        i++;                                                                                                           // 450\n      }                                                                                                                // 451\n    }                                                                                                                  // 452\n                                                                                                                       //\n    return createStreams;                                                                                              //\n  }();                                                                                                                 //\n                                                                                                                       //\n  UploadInstance.prototype.prepare = function () {                                                                     //\n    function prepare() {                                                                                               //\n      var _this5 = this;                                                                                               // 454\n                                                                                                                       //\n      var _len = void 0;                                                                                               // 455\n                                                                                                                       //\n      this.config.onStart && this.config.onStart.call(this.result, null, this.fileData);                               // 457\n      this.result.emit('start', null, this.fileData);                                                                  // 458\n                                                                                                                       //\n      if (this.config.chunkSize === 'dynamic') {                                                                       // 460\n        this.config.chunkSize = this.fileData.size / 1000;                                                             // 461\n                                                                                                                       //\n        if (this.config.chunkSize < 327680) {                                                                          // 462\n          this.config.chunkSize = 327680;                                                                              // 463\n        } else if (this.config.chunkSize > 1048576) {                                                                  // 464\n          this.config.chunkSize = 1048576;                                                                             // 465\n        }                                                                                                              // 466\n                                                                                                                       //\n        if (this.config.transport === 'http') {                                                                        // 468\n          this.config.chunkSize = Math.round(this.config.chunkSize / 2);                                               // 469\n        } else if (isSafari) {                                                                                         // 470\n          this.config.chunkSize = Math.ceil(this.config.chunkSize / 8);                                                // 471\n        }                                                                                                              // 472\n      }                                                                                                                // 473\n                                                                                                                       //\n      if (this.config.isBase64) {                                                                                      // 475\n        this.config.chunkSize = Math.floor(this.config.chunkSize / 4) * 4;                                             // 476\n        _len = Math.ceil(this.config.file.length / this.config.chunkSize);                                             // 477\n      } else {                                                                                                         // 478\n        this.config.chunkSize = Math.floor(this.config.chunkSize / 8) * 8;                                             // 479\n        _len = Math.ceil(this.fileData.size / this.config.chunkSize);                                                  // 480\n      }                                                                                                                // 481\n                                                                                                                       //\n      if (this.config.streams === 'dynamic') {                                                                         // 483\n        this.config.streams = _.clone(_len);                                                                           // 484\n                                                                                                                       //\n        if (this.config.streams > 24) {                                                                                // 485\n          this.config.streams = 24;                                                                                    // 485\n        }                                                                                                              // 485\n                                                                                                                       //\n        if (this.config.transport === 'http') {                                                                        // 487\n          this.config.streams = Math.round(this.config.streams / 2);                                                   // 488\n        } else if (isSafari) {                                                                                         // 489\n          this.config.streams = 1;                                                                                     // 490\n        }                                                                                                              // 491\n      }                                                                                                                // 492\n                                                                                                                       //\n      this.fileLength = _len <= 0 ? 1 : _len;                                                                          // 494\n                                                                                                                       //\n      if (this.config.streams > this.fileLength) {                                                                     // 495\n        this.config.streams = this.fileLength;                                                                         // 496\n      }                                                                                                                // 497\n                                                                                                                       //\n      this.result.config.fileLength = this.fileLength;                                                                 // 498\n      var opts = {                                                                                                     // 500\n        file: this.fileData,                                                                                           // 501\n        fileId: this.fileId,                                                                                           // 502\n        chunkSize: this.config.isBase64 ? this.config.chunkSize / 4 * 3 : this.config.chunkSize,                       // 503\n        fileLength: this.fileLength                                                                                    // 504\n      };                                                                                                               // 500\n                                                                                                                       //\n      if (this.FSName !== this.fileId) {                                                                               // 507\n        opts.FSName = this.FSName;                                                                                     // 508\n      }                                                                                                                // 509\n                                                                                                                       //\n      var handleStart = function (error) {                                                                             // 511\n        if (error) {                                                                                                   // 512\n          _this5.collection._debug('[FilesCollection] [_Start] Error:', error);                                        // 513\n                                                                                                                       //\n          _this5.emit('end', error);                                                                                   // 514\n        } else {                                                                                                       // 515\n          _this5.result.continueFunc = function () {                                                                   // 516\n            _this5.collection._debug('[FilesCollection] [insert] [continueFunc]');                                     // 517\n                                                                                                                       //\n            _this5.emit('createStreams');                                                                              // 518\n          };                                                                                                           // 519\n                                                                                                                       //\n          _this5.emit('createStreams');                                                                                // 520\n        }                                                                                                              // 521\n      };                                                                                                               // 522\n                                                                                                                       //\n      if (this.config.transport === 'ddp') {                                                                           // 524\n        this.config.ddp.call(this.collection._methodNames._Start, opts, handleStart);                                  // 525\n      } else {                                                                                                         // 526\n        if (_.isObject(opts.file) ? opts.file.meta : undefined) {                                                      // 527\n          opts.file.meta = fixJSONStringify(opts.file.meta);                                                           // 528\n        }                                                                                                              // 529\n                                                                                                                       //\n        HTTP.call('POST', this.collection.downloadRoute + \"/\" + this.collection.collectionName + \"/__upload\", {        // 531\n          data: opts,                                                                                                  // 532\n          headers: {                                                                                                   // 533\n            'x-start': '1',                                                                                            // 534\n            'x-mtok': (_.isObject(Meteor.connection) ? Meteor.connection._lastSessionId : undefined) || null           // 535\n          }                                                                                                            // 533\n        }, handleStart);                                                                                               // 531\n      }                                                                                                                // 538\n    }                                                                                                                  // 539\n                                                                                                                       //\n    return prepare;                                                                                                    //\n  }();                                                                                                                 //\n                                                                                                                       //\n  UploadInstance.prototype.pipe = function () {                                                                        //\n    function pipe(func) {                                                                                              //\n      this.pipes.push(func);                                                                                           // 542\n      return this;                                                                                                     // 543\n    }                                                                                                                  // 544\n                                                                                                                       //\n    return pipe;                                                                                                       //\n  }();                                                                                                                 //\n                                                                                                                       //\n  UploadInstance.prototype.start = function () {                                                                       //\n    function start() {                                                                                                 //\n      var _this6 = this;                                                                                               // 546\n                                                                                                                       //\n      var isUploadAllowed = void 0;                                                                                    // 547\n                                                                                                                       //\n      if (this.fileData.size <= 0) {                                                                                   // 548\n        this.end(new Meteor.Error(400, 'Can\\'t upload empty file'));                                                   // 549\n        return this.result;                                                                                            // 550\n      }                                                                                                                // 551\n                                                                                                                       //\n      if (this.config.onBeforeUpload && _.isFunction(this.config.onBeforeUpload)) {                                    // 553\n        isUploadAllowed = this.config.onBeforeUpload.call(_.extend(this.result, this.collection._getUser()), this.fileData);\n                                                                                                                       //\n        if (isUploadAllowed !== true) {                                                                                // 555\n          return this.end(new Meteor.Error(403, _.isString(isUploadAllowed) ? isUploadAllowed : 'config.onBeforeUpload() returned false'));\n        }                                                                                                              // 557\n      }                                                                                                                // 558\n                                                                                                                       //\n      if (this.collection.onBeforeUpload && _.isFunction(this.collection.onBeforeUpload)) {                            // 560\n        isUploadAllowed = this.collection.onBeforeUpload.call(_.extend(this.result, this.collection._getUser()), this.fileData);\n                                                                                                                       //\n        if (isUploadAllowed !== true) {                                                                                // 562\n          return this.end(new Meteor.Error(403, _.isString(isUploadAllowed) ? isUploadAllowed : 'collection.onBeforeUpload() returned false'));\n        }                                                                                                              // 564\n      }                                                                                                                // 565\n                                                                                                                       //\n      Tracker.autorun(function (computation) {                                                                         // 567\n        _this6.trackerComp = computation;                                                                              // 568\n                                                                                                                       //\n        if (!_this6.result.onPause.curValue && !Meteor.status().connected) {                                           // 569\n          _this6.collection._debug('[FilesCollection] [insert] [Tracker] [pause]');                                    // 570\n                                                                                                                       //\n          _this6.result.pause();                                                                                       // 571\n        }                                                                                                              // 572\n      });                                                                                                              // 573\n                                                                                                                       //\n      if (this.worker) {                                                                                               // 575\n        this.collection._debug('[FilesCollection] [insert] using WebWorkers');                                         // 576\n                                                                                                                       //\n        this.worker.onmessage = function (evt) {                                                                       // 577\n          if (evt.data.error) {                                                                                        // 578\n            _this6.collection._debug('[FilesCollection] [insert] [worker] [onmessage] [ERROR:]', evt.data.error);      // 579\n                                                                                                                       //\n            _this6.emit('proceedChunk', evt.data.chunkId);                                                             // 580\n          } else {                                                                                                     // 581\n            _this6.emit('sendChunk', evt);                                                                             // 582\n          }                                                                                                            // 583\n        };                                                                                                             // 584\n                                                                                                                       //\n        this.worker.onerror = function (e) {                                                                           // 586\n          _this6.collection._debug('[FilesCollection] [insert] [worker] [onerror] [ERROR:]', e);                       // 587\n                                                                                                                       //\n          _this6.emit('end', e.message);                                                                               // 588\n        };                                                                                                             // 589\n      } else {                                                                                                         // 590\n        this.collection._debug('[FilesCollection] [insert] using MainThread');                                         // 591\n      }                                                                                                                // 592\n                                                                                                                       //\n      this.emit('prepare');                                                                                            // 594\n      return this.result;                                                                                              // 595\n    }                                                                                                                  // 596\n                                                                                                                       //\n    return start;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  UploadInstance.prototype.manual = function () {                                                                      //\n    function manual() {                                                                                                //\n      var _this7 = this;                                                                                               // 598\n                                                                                                                       //\n      this.result.start = function () {                                                                                // 599\n        _this7.emit('start');                                                                                          // 600\n      };                                                                                                               // 601\n                                                                                                                       //\n      this.result.pipe = function (func) {                                                                             // 603\n        self.pipe(func);                                                                                               // 604\n        return this;                                                                                                   // 605\n      };                                                                                                               // 606\n                                                                                                                       //\n      return this.result;                                                                                              // 607\n    }                                                                                                                  // 608\n                                                                                                                       //\n    return manual;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return UploadInstance;                                                                                               //\n}(EventEmitter);                                                                                                       //\n                                                                                                                       //\nvar FileUpload = function (_EventEmitter2) {                                                                           //\n  (0, _inherits3.default)(FileUpload, _EventEmitter2);                                                                 //\n                                                                                                                       //\n  function FileUpload(config) {                                                                                        // 618\n    (0, _classCallCheck3.default)(this, FileUpload);                                                                   // 618\n                                                                                                                       //\n    var _this8 = (0, _possibleConstructorReturn3.default)(this, _EventEmitter2.call(this));                            // 618\n                                                                                                                       //\n    _this8.config = config;                                                                                            // 620\n                                                                                                                       //\n    _this8.config._debug('[FilesCollection] [FileUpload] [constructor]');                                              // 621\n                                                                                                                       //\n    if (!_this8.config.isBase64) {                                                                                     // 623\n      _this8.file = _.extend(_this8.config.file, _this8.config.fileData);                                              // 624\n    } else {                                                                                                           // 625\n      _this8.file = _this8.config.fileData;                                                                            // 626\n    }                                                                                                                  // 627\n                                                                                                                       //\n    _this8.state = new ReactiveVar('active');                                                                          // 628\n    _this8.onPause = new ReactiveVar(false);                                                                           // 629\n    _this8.progress = new ReactiveVar(0);                                                                              // 630\n                                                                                                                       //\n    _this8.continueFunc = function () {};                                                                              // 631\n                                                                                                                       //\n    _this8.estimateTime = new ReactiveVar(1000);                                                                       // 632\n    _this8.estimateSpeed = new ReactiveVar(0);                                                                         // 633\n    _this8.estimateTimer = Meteor.setInterval(function () {                                                            // 634\n      if (_this8.state.get() === 'active') {                                                                           // 635\n        var _currentTime = _this8.estimateTime.get();                                                                  // 636\n                                                                                                                       //\n        if (_currentTime > 1000) {                                                                                     // 637\n          _this8.estimateTime.set(_currentTime - 1000);                                                                // 638\n        }                                                                                                              // 639\n      }                                                                                                                // 640\n    }, 1000);                                                                                                          // 641\n    return _this8;                                                                                                     // 618\n  }                                                                                                                    // 642\n                                                                                                                       //\n  FileUpload.prototype.pause = function () {                                                                           //\n    function pause() {                                                                                                 //\n      this.config._debug('[FilesCollection] [insert] [.pause()]');                                                     // 644\n                                                                                                                       //\n      if (!this.onPause.get()) {                                                                                       // 645\n        this.onPause.set(true);                                                                                        // 646\n        this.state.set('paused');                                                                                      // 647\n        this.emit('pause', this.file);                                                                                 // 648\n      }                                                                                                                // 649\n    }                                                                                                                  // 650\n                                                                                                                       //\n    return pause;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  FileUpload.prototype.continue = function () {                                                                        //\n    function _continue() {                                                                                             //\n      this.config._debug('[FilesCollection] [insert] [.continue()]');                                                  // 652\n                                                                                                                       //\n      if (this.onPause.get()) {                                                                                        // 653\n        this.onPause.set(false);                                                                                       // 654\n        this.state.set('active');                                                                                      // 655\n        this.emit('continue', this.file);                                                                              // 656\n        this.continueFunc();                                                                                           // 657\n      }                                                                                                                // 658\n    }                                                                                                                  // 659\n                                                                                                                       //\n    return _continue;                                                                                                  //\n  }();                                                                                                                 //\n                                                                                                                       //\n  FileUpload.prototype.toggle = function () {                                                                          //\n    function toggle() {                                                                                                //\n      this.config._debug('[FilesCollection] [insert] [.toggle()]');                                                    // 661\n                                                                                                                       //\n      if (this.onPause.get()) {                                                                                        // 662\n        this.continue();                                                                                               // 663\n      } else {                                                                                                         // 664\n        this.pause();                                                                                                  // 665\n      }                                                                                                                // 666\n    }                                                                                                                  // 667\n                                                                                                                       //\n    return toggle;                                                                                                     //\n  }();                                                                                                                 //\n                                                                                                                       //\n  FileUpload.prototype.abort = function () {                                                                           //\n    function abort() {                                                                                                 //\n      this.config._debug('[FilesCollection] [insert] [.abort()]');                                                     // 669\n                                                                                                                       //\n      window.removeEventListener('beforeunload', this.config.beforeunload, false);                                     // 670\n      this.config.onAbort && this.config.onAbort.call(this, this.file);                                                // 671\n      this.emit('abort', this.file);                                                                                   // 672\n      this.pause();                                                                                                    // 673\n                                                                                                                       //\n      this.config._onEnd();                                                                                            // 674\n                                                                                                                       //\n      this.state.set('aborted');                                                                                       // 675\n                                                                                                                       //\n      if (this.config.debug) {                                                                                         // 676\n        console.timeEnd(\"insert \" + this.config.fileData.name);                                                        // 677\n      }                                                                                                                // 678\n                                                                                                                       //\n      this.config.ddp.call(this.config._Abort, this.config.fileId);                                                    // 680\n    }                                                                                                                  // 681\n                                                                                                                       //\n    return abort;                                                                                                      //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return FileUpload;                                                                                                   //\n}(EventEmitter);                                                                                                       //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"eventemitter3\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// ../../.1.9.4.8m7w47.4qi18++os+web.browser+web.cordova/npm/node_modules/eventemitter3/package.json                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"eventemitter3\";                                                                                        // 1\nexports.version = \"3.0.0\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/ostrio_files/node_modules/eventemitter3/index.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nvar has = Object.prototype.hasOwnProperty                                                                              // 3\n  , prefix = '~';                                                                                                      // 4\n                                                                                                                       // 5\n/**                                                                                                                    // 6\n * Constructor to create a storage for our `EE` objects.                                                               // 7\n * An `Events` instance is a plain object whose properties are event names.                                            // 8\n *                                                                                                                     // 9\n * @constructor                                                                                                        // 10\n * @private                                                                                                            // 11\n */                                                                                                                    // 12\nfunction Events() {}                                                                                                   // 13\n                                                                                                                       // 14\n//                                                                                                                     // 15\n// We try to not inherit from `Object.prototype`. In some engines creating an                                          // 16\n// instance in this way is faster than calling `Object.create(null)` directly.                                         // 17\n// If `Object.create(null)` is not supported we prefix the event names with a                                          // 18\n// character to make sure that the built-in object properties are not                                                  // 19\n// overridden or used as an attack vector.                                                                             // 20\n//                                                                                                                     // 21\nif (Object.create) {                                                                                                   // 22\n  Events.prototype = Object.create(null);                                                                              // 23\n                                                                                                                       // 24\n  //                                                                                                                   // 25\n  // This hack is needed because the `__proto__` property is still inherited in                                        // 26\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.                                              // 27\n  //                                                                                                                   // 28\n  if (!new Events().__proto__) prefix = false;                                                                         // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Representation of a single event listener.                                                                          // 33\n *                                                                                                                     // 34\n * @param {Function} fn The listener function.                                                                         // 35\n * @param {*} context The context to invoke the listener with.                                                         // 36\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.                                       // 37\n * @constructor                                                                                                        // 38\n * @private                                                                                                            // 39\n */                                                                                                                    // 40\nfunction EE(fn, context, once) {                                                                                       // 41\n  this.fn = fn;                                                                                                        // 42\n  this.context = context;                                                                                              // 43\n  this.once = once || false;                                                                                           // 44\n}                                                                                                                      // 45\n                                                                                                                       // 46\n/**                                                                                                                    // 47\n * Add a listener for a given event.                                                                                   // 48\n *                                                                                                                     // 49\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.                                             // 50\n * @param {(String|Symbol)} event The event name.                                                                      // 51\n * @param {Function} fn The listener function.                                                                         // 52\n * @param {*} context The context to invoke the listener with.                                                         // 53\n * @param {Boolean} once Specify if the listener is a one-time listener.                                               // 54\n * @returns {EventEmitter}                                                                                             // 55\n * @private                                                                                                            // 56\n */                                                                                                                    // 57\nfunction addListener(emitter, event, fn, context, once) {                                                              // 58\n  if (typeof fn !== 'function') {                                                                                      // 59\n    throw new TypeError('The listener must be a function');                                                            // 60\n  }                                                                                                                    // 61\n                                                                                                                       // 62\n  var listener = new EE(fn, context || emitter, once)                                                                  // 63\n    , evt = prefix ? prefix + event : event;                                                                           // 64\n                                                                                                                       // 65\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;                                  // 66\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);                                              // 67\n  else emitter._events[evt] = [emitter._events[evt], listener];                                                        // 68\n                                                                                                                       // 69\n  return emitter;                                                                                                      // 70\n}                                                                                                                      // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * Clear event by name.                                                                                                // 74\n *                                                                                                                     // 75\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.                                             // 76\n * @param {(String|Symbol)} evt The Event name.                                                                        // 77\n * @private                                                                                                            // 78\n */                                                                                                                    // 79\nfunction clearEvent(emitter, evt) {                                                                                    // 80\n  if (--emitter._eventsCount === 0) emitter._events = new Events();                                                    // 81\n  else delete emitter._events[evt];                                                                                    // 82\n}                                                                                                                      // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * Minimal `EventEmitter` interface that is molded against the Node.js                                                 // 86\n * `EventEmitter` interface.                                                                                           // 87\n *                                                                                                                     // 88\n * @constructor                                                                                                        // 89\n * @public                                                                                                             // 90\n */                                                                                                                    // 91\nfunction EventEmitter() {                                                                                              // 92\n  this._events = new Events();                                                                                         // 93\n  this._eventsCount = 0;                                                                                               // 94\n}                                                                                                                      // 95\n                                                                                                                       // 96\n/**                                                                                                                    // 97\n * Return an array listing the events for which the emitter has registered                                             // 98\n * listeners.                                                                                                          // 99\n *                                                                                                                     // 100\n * @returns {Array}                                                                                                    // 101\n * @public                                                                                                             // 102\n */                                                                                                                    // 103\nEventEmitter.prototype.eventNames = function eventNames() {                                                            // 104\n  var names = []                                                                                                       // 105\n    , events                                                                                                           // 106\n    , name;                                                                                                            // 107\n                                                                                                                       // 108\n  if (this._eventsCount === 0) return names;                                                                           // 109\n                                                                                                                       // 110\n  for (name in (events = this._events)) {                                                                              // 111\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);                                             // 112\n  }                                                                                                                    // 113\n                                                                                                                       // 114\n  if (Object.getOwnPropertySymbols) {                                                                                  // 115\n    return names.concat(Object.getOwnPropertySymbols(events));                                                         // 116\n  }                                                                                                                    // 117\n                                                                                                                       // 118\n  return names;                                                                                                        // 119\n};                                                                                                                     // 120\n                                                                                                                       // 121\n/**                                                                                                                    // 122\n * Return the listeners registered for a given event.                                                                  // 123\n *                                                                                                                     // 124\n * @param {(String|Symbol)} event The event name.                                                                      // 125\n * @returns {Array} The registered listeners.                                                                          // 126\n * @public                                                                                                             // 127\n */                                                                                                                    // 128\nEventEmitter.prototype.listeners = function listeners(event) {                                                         // 129\n  var evt = prefix ? prefix + event : event                                                                            // 130\n    , handlers = this._events[evt];                                                                                    // 131\n                                                                                                                       // 132\n  if (!handlers) return [];                                                                                            // 133\n  if (handlers.fn) return [handlers.fn];                                                                               // 134\n                                                                                                                       // 135\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {                                                // 136\n    ee[i] = handlers[i].fn;                                                                                            // 137\n  }                                                                                                                    // 138\n                                                                                                                       // 139\n  return ee;                                                                                                           // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\n/**                                                                                                                    // 143\n * Return the number of listeners listening to a given event.                                                          // 144\n *                                                                                                                     // 145\n * @param {(String|Symbol)} event The event name.                                                                      // 146\n * @returns {Number} The number of listeners.                                                                          // 147\n * @public                                                                                                             // 148\n */                                                                                                                    // 149\nEventEmitter.prototype.listenerCount = function listenerCount(event) {                                                 // 150\n  var evt = prefix ? prefix + event : event                                                                            // 151\n    , listeners = this._events[evt];                                                                                   // 152\n                                                                                                                       // 153\n  if (!listeners) return 0;                                                                                            // 154\n  if (listeners.fn) return 1;                                                                                          // 155\n  return listeners.length;                                                                                             // 156\n};                                                                                                                     // 157\n                                                                                                                       // 158\n/**                                                                                                                    // 159\n * Calls each of the listeners registered for a given event.                                                           // 160\n *                                                                                                                     // 161\n * @param {(String|Symbol)} event The event name.                                                                      // 162\n * @returns {Boolean} `true` if the event had listeners, else `false`.                                                 // 163\n * @public                                                                                                             // 164\n */                                                                                                                    // 165\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {                                               // 166\n  var evt = prefix ? prefix + event : event;                                                                           // 167\n                                                                                                                       // 168\n  if (!this._events[evt]) return false;                                                                                // 169\n                                                                                                                       // 170\n  var listeners = this._events[evt]                                                                                    // 171\n    , len = arguments.length                                                                                           // 172\n    , args                                                                                                             // 173\n    , i;                                                                                                               // 174\n                                                                                                                       // 175\n  if (listeners.fn) {                                                                                                  // 176\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);                                     // 177\n                                                                                                                       // 178\n    switch (len) {                                                                                                     // 179\n      case 1: return listeners.fn.call(listeners.context), true;                                                       // 180\n      case 2: return listeners.fn.call(listeners.context, a1), true;                                                   // 181\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;                                               // 182\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;                                           // 183\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;                                       // 184\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;                                   // 185\n    }                                                                                                                  // 186\n                                                                                                                       // 187\n    for (i = 1, args = new Array(len -1); i < len; i++) {                                                              // 188\n      args[i - 1] = arguments[i];                                                                                      // 189\n    }                                                                                                                  // 190\n                                                                                                                       // 191\n    listeners.fn.apply(listeners.context, args);                                                                       // 192\n  } else {                                                                                                             // 193\n    var length = listeners.length                                                                                      // 194\n      , j;                                                                                                             // 195\n                                                                                                                       // 196\n    for (i = 0; i < length; i++) {                                                                                     // 197\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);                             // 198\n                                                                                                                       // 199\n      switch (len) {                                                                                                   // 200\n        case 1: listeners[i].fn.call(listeners[i].context); break;                                                     // 201\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;                                                 // 202\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;                                             // 203\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;                                         // 204\n        default:                                                                                                       // 205\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {                                             // 206\n            args[j - 1] = arguments[j];                                                                                // 207\n          }                                                                                                            // 208\n                                                                                                                       // 209\n          listeners[i].fn.apply(listeners[i].context, args);                                                           // 210\n      }                                                                                                                // 211\n    }                                                                                                                  // 212\n  }                                                                                                                    // 213\n                                                                                                                       // 214\n  return true;                                                                                                         // 215\n};                                                                                                                     // 216\n                                                                                                                       // 217\n/**                                                                                                                    // 218\n * Add a listener for a given event.                                                                                   // 219\n *                                                                                                                     // 220\n * @param {(String|Symbol)} event The event name.                                                                      // 221\n * @param {Function} fn The listener function.                                                                         // 222\n * @param {*} [context=this] The context to invoke the listener with.                                                  // 223\n * @returns {EventEmitter} `this`.                                                                                     // 224\n * @public                                                                                                             // 225\n */                                                                                                                    // 226\nEventEmitter.prototype.on = function on(event, fn, context) {                                                          // 227\n  return addListener(this, event, fn, context, false);                                                                 // 228\n};                                                                                                                     // 229\n                                                                                                                       // 230\n/**                                                                                                                    // 231\n * Add a one-time listener for a given event.                                                                          // 232\n *                                                                                                                     // 233\n * @param {(String|Symbol)} event The event name.                                                                      // 234\n * @param {Function} fn The listener function.                                                                         // 235\n * @param {*} [context=this] The context to invoke the listener with.                                                  // 236\n * @returns {EventEmitter} `this`.                                                                                     // 237\n * @public                                                                                                             // 238\n */                                                                                                                    // 239\nEventEmitter.prototype.once = function once(event, fn, context) {                                                      // 240\n  return addListener(this, event, fn, context, true);                                                                  // 241\n};                                                                                                                     // 242\n                                                                                                                       // 243\n/**                                                                                                                    // 244\n * Remove the listeners of a given event.                                                                              // 245\n *                                                                                                                     // 246\n * @param {(String|Symbol)} event The event name.                                                                      // 247\n * @param {Function} fn Only remove the listeners that match this function.                                            // 248\n * @param {*} context Only remove the listeners that have this context.                                                // 249\n * @param {Boolean} once Only remove one-time listeners.                                                               // 250\n * @returns {EventEmitter} `this`.                                                                                     // 251\n * @public                                                                                                             // 252\n */                                                                                                                    // 253\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {                            // 254\n  var evt = prefix ? prefix + event : event;                                                                           // 255\n                                                                                                                       // 256\n  if (!this._events[evt]) return this;                                                                                 // 257\n  if (!fn) {                                                                                                           // 258\n    clearEvent(this, evt);                                                                                             // 259\n    return this;                                                                                                       // 260\n  }                                                                                                                    // 261\n                                                                                                                       // 262\n  var listeners = this._events[evt];                                                                                   // 263\n                                                                                                                       // 264\n  if (listeners.fn) {                                                                                                  // 265\n    if (                                                                                                               // 266\n      listeners.fn === fn &&                                                                                           // 267\n      (!once || listeners.once) &&                                                                                     // 268\n      (!context || listeners.context === context)                                                                      // 269\n    ) {                                                                                                                // 270\n      clearEvent(this, evt);                                                                                           // 271\n    }                                                                                                                  // 272\n  } else {                                                                                                             // 273\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {                                         // 274\n      if (                                                                                                             // 275\n        listeners[i].fn !== fn ||                                                                                      // 276\n        (once && !listeners[i].once) ||                                                                                // 277\n        (context && listeners[i].context !== context)                                                                  // 278\n      ) {                                                                                                              // 279\n        events.push(listeners[i]);                                                                                     // 280\n      }                                                                                                                // 281\n    }                                                                                                                  // 282\n                                                                                                                       // 283\n    //                                                                                                                 // 284\n    // Reset the array, or remove it completely if we have no more listeners.                                          // 285\n    //                                                                                                                 // 286\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;                                   // 287\n    else clearEvent(this, evt);                                                                                        // 288\n  }                                                                                                                    // 289\n                                                                                                                       // 290\n  return this;                                                                                                         // 291\n};                                                                                                                     // 292\n                                                                                                                       // 293\n/**                                                                                                                    // 294\n * Remove all listeners, or those of the specified event.                                                              // 295\n *                                                                                                                     // 296\n * @param {(String|Symbol)} [event] The event name.                                                                    // 297\n * @returns {EventEmitter} `this`.                                                                                     // 298\n * @public                                                                                                             // 299\n */                                                                                                                    // 300\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {                                       // 301\n  var evt;                                                                                                             // 302\n                                                                                                                       // 303\n  if (event) {                                                                                                         // 304\n    evt = prefix ? prefix + event : event;                                                                             // 305\n    if (this._events[evt]) clearEvent(this, evt);                                                                      // 306\n  } else {                                                                                                             // 307\n    this._events = new Events();                                                                                       // 308\n    this._eventsCount = 0;                                                                                             // 309\n  }                                                                                                                    // 310\n                                                                                                                       // 311\n  return this;                                                                                                         // 312\n};                                                                                                                     // 313\n                                                                                                                       // 314\n//                                                                                                                     // 315\n// Alias methods names because people roll like that.                                                                  // 316\n//                                                                                                                     // 317\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;                                                    // 318\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;                                                        // 319\n                                                                                                                       // 320\n//                                                                                                                     // 321\n// Expose the prefix.                                                                                                  // 322\n//                                                                                                                     // 323\nEventEmitter.prefixed = prefix;                                                                                        // 324\n                                                                                                                       // 325\n//                                                                                                                     // 326\n// Allow `EventEmitter` to be imported as module namespace.                                                            // 327\n//                                                                                                                     // 328\nEventEmitter.EventEmitter = EventEmitter;                                                                              // 329\n                                                                                                                       // 330\n//                                                                                                                     // 331\n// Expose the module.                                                                                                  // 332\n//                                                                                                                     // 333\nif ('undefined' !== typeof module) {                                                                                   // 334\n  module.exports = EventEmitter;                                                                                       // 335\n}                                                                                                                      // 336\n                                                                                                                       // 337\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/ostrio:files/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ostrio:files'] = exports, {\n  FilesCollection: FilesCollection\n});\n\n})();\n","servePath":"/packages/ostrio_files.js","sourceMap":{"version":3,"sources":["packages/ostrio:files/client.js","packages/ostrio:files/core.js","packages/ostrio:files/cursor.js","packages/ostrio:files/lib.js","packages/ostrio:files/upload.js"],"names":["module","export","FilesCollection","_","watch","require","v","Mongo","Meteor","Cookies","formatFleURL","check","Match","UploadInstance","FilesCollectionCore","NOOP","config","ddp","debug","schema","public","chunkSize","collection","downloadRoute","disableUpload","namingFunction","collectionName","onBeforeUpload","allowClientCode","onbeforeunloadMessage","self","cookie","isBoolean","Math","floor","isString","Collection","_name","filesCollection","String","Error","replace","isFunction","setTokenCookie","has","connection","_lastSessionId","get","set","path","unsetTokenCookie","remove","Accounts","startup","onLogin","onLogout","OneOf","Function","_URL","window","URL","webkitURL","mozURL","msURL","oURL","Worker","Blob","_supportWebWorker","_webWorkerUrl","createObjectURL","type","absoluteUrl","e","_debug","Boolean","Object","Number","Any","_methodNames","_Abort","_Write","_Start","_Remove","_getMimeType","fileData","mime","isObject","_getUser","result","user","userId","insert","autoStart","console","warn","selector","callback","JSON","stringify","Optional","call","Template","registerHelper","fileRef","version","EventEmitter","FilesCursor","FileCursor","info","log","apply","undefined","arguments","_getFileName","fileName","name","length","_getExt","indexOf","extension","split","pop","toLowerCase","ext","extensionWithDot","_updateFileTypes","data","isVideo","test","isAudio","isImage","isText","isJSON","isPDF","_dataToSchema","ds","meta","size","versions","original","_downloadRoute","_collectionName","fileId","_id","_storagePath","storagePath","extend","findOne","options","doc","find","update","link","optional","blackbox","updatedAt","Date","_fileRef","_collection","property","fetch","with","_selector","_current","cursor","hasNext","count","next","hasPrevious","previous","first","last","forEach","context","each","map","file","current","observe","callbacks","observeChanges","fixJSONParse","fixJSONStringify","obj","key","parseInt","isArray","i","isDate","_root","__meteor_runtime_config__","ROOT_URL","vRef","FileUpload","HTTP","Random","Tracker","ReactiveVar","isSafari","navigator","userAgent","streams","transport","allowWebWorkers","onError","onAbort","onStart","isBase64","onUploaded","onProgress","_file","time","worker","wwError","startTime","currentChunk","transferTime","trackerComp","sentChunks","fileLength","EOFsent","id","FSName","pipes","beforeunload","message","returnValue","addEventListener","_onEnd","emit","addListener","end","start","upload","sendEOF","prepare","sendChunk","proceedChunk","createStreams","throttle","_t","estimateTime","estimateSpeed","progress","round","estimateTimer","clearInterval","terminate","stop","removeEventListener","error","timeEnd","abort","state","evt","opts","binData","bin","chunkId","pad","p","content","headers","pause","eof","_result","parse","chunk","slice","fileReader","FileReader","onloadend","srcElement","target","onerror","readAsDataURL","FileReaderSync","onPause","postMessage","f","sc","cc","cs","ib","_len","ceil","clone","handleStart","continueFunc","pipe","func","push","isUploadAllowed","autorun","computation","curValue","status","connected","onmessage","manual","setInterval","_currentTime","continue","toggle"],"mappings":"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","file":"/packages/ostrio_files.js","sourcesContent":["import { _ }               from 'meteor/underscore';\nimport { Mongo }           from 'meteor/mongo';\nimport { Meteor }          from 'meteor/meteor';\nimport { Cookies }         from 'meteor/ostrio:cookies';\nimport { formatFleURL }    from './lib.js';\nimport { check, Match }    from 'meteor/check';\nimport { UploadInstance }  from './upload.js';\nimport FilesCollectionCore from './core.js';\n\nconst NOOP = () => { };\n\n/*\n * @locus Anywhere\n * @class FilesCollection\n * @param config           {Object}   - [Both]   Configuration object with next properties:\n * @param config.debug     {Boolean}  - [Both]   Turn on/of debugging and extra logging\n * @param config.ddp       {Object}   - [Client] Custom DDP connection. Object returned form `DDP.connect()`\n * @param config.schema    {Object}   - [Both]   Collection Schema\n * @param config.public    {Boolean}  - [Both]   Store files in folder accessible for proxy servers, for limits, and more - read docs`\n * @param config.chunkSize      {Number}  - [Both] Upload chunk size, default: 524288 bytes (0,5 Mb)\n * @param config.downloadRoute  {String}  - [Both]   Server Route used to retrieve files\n * @param config.collection     {Mongo.Collection} - [Both] Mongo Collection Instance\n * @param config.collectionName {String}  - [Both]   Collection name\n * @param config.namingFunction {Function}- [Both]   Function which returns `String`\n * @param config.onBeforeUpload {Function}- [Both]   Function which executes on server after receiving each chunk and on client right before beginning upload. Function context is `File` - so you are able to check for extension, mime-type, size and etc.\n * return `true` to continue\n * return `false` or `String` to abort upload\n * @param config.allowClientCode  {Boolean}  - [Both]   Allow to run `remove` from client\n * @param config.onbeforeunloadMessage {String|Function} - [Client] Message shown to user when closing browser's window or tab while upload process is running\n * @param config.disableUpload {Boolean} - Disable file upload, useful for server only solutions\n * @summary Create new instance of FilesCollection\n */\nexport class FilesCollection extends FilesCollectionCore {\n  constructor(config) {\n    super();\n    if (config) {\n      ({\n        ddp: this.ddp,\n        debug: this.debug,\n        schema: this.schema,\n        public: this.public,\n        chunkSize: this.chunkSize,\n        collection: this.collection,\n        downloadRoute: this.downloadRoute,\n        disableUpload: this.disableUpload,\n        namingFunction: this.namingFunction,\n        collectionName: this.collectionName,\n        onBeforeUpload: this.onBeforeUpload,\n        allowClientCode: this.allowClientCode,\n        onbeforeunloadMessage: this.onbeforeunloadMessage,\n      } = config);\n    }\n\n    const self = this;\n    const cookie = new Cookies();\n    if (!_.isBoolean(this.debug)) {\n      this.debug = false;\n    }\n\n    if (!_.isBoolean(this.public)) {\n      this.public = false;\n    }\n\n    if (!this.chunkSize) {\n      this.chunkSize = 1024 * 512;\n    }\n    this.chunkSize = Math.floor(this.chunkSize / 8) * 8;\n\n    if (!_.isString(this.collectionName) && !this.collection) {\n      this.collectionName = 'MeteorUploadFiles';\n    }\n\n    if (!this.collection) {\n      this.collection = new Mongo.Collection(this.collectionName);\n    } else {\n      this.collectionName = this.collection._name;\n    }\n\n    this.collection.filesCollection = this;\n    check(this.collectionName, String);\n\n    if (this.public && !this.downloadRoute) {\n      throw new Meteor.Error(500, `[FilesCollection.${this.collectionName}]: \\\"downloadRoute\\\" must be precisely provided on \\\"public\\\" collections! Note: \\\"downloadRoute\\\" must be equal or be inside of your web/proxy-server (relative) root.`);\n    }\n\n    if (!_.isBoolean(this.disableUpload)) {\n      this.disableUpload = false;\n    }\n\n    if (!_.isString(this.downloadRoute)) {\n      this.downloadRoute = '/cdn/storage';\n    }\n\n    this.downloadRoute = this.downloadRoute.replace(/\\/$/, '');\n\n    if (!_.isFunction(this.namingFunction)) {\n      this.namingFunction = false;\n    }\n\n    if (!_.isFunction(this.onBeforeUpload)) {\n      this.onBeforeUpload = false;\n    }\n\n    if (!_.isBoolean(this.allowClientCode)) {\n      this.allowClientCode = true;\n    }\n\n    if (!this.ddp) {\n      this.ddp = Meteor;\n    }\n\n    if (!this.onbeforeunloadMessage) {\n      this.onbeforeunloadMessage = 'Upload in a progress... Do you want to abort?';\n    }\n\n    const setTokenCookie = () => {\n      if ((!cookie.has('x_mtok') && Meteor.connection._lastSessionId) || (cookie.has('x_mtok') && (cookie.get('x_mtok') !== Meteor.connection._lastSessionId))) {\n        cookie.set('x_mtok', Meteor.connection._lastSessionId, {\n          path: '/'\n        });\n      }\n    };\n\n    const unsetTokenCookie = () => {\n      if (cookie.has('x_mtok')) {\n        cookie.remove('x_mtok', '/');\n      }\n    };\n\n    if (typeof Accounts !== 'undefined' && Accounts !== null) {\n      Meteor.startup(() => {\n        setTokenCookie();\n      });\n      Accounts.onLogin(() => {\n        setTokenCookie();\n      });\n      Accounts.onLogout(() => {\n        unsetTokenCookie();\n      });\n    }\n\n    check(this.onbeforeunloadMessage, Match.OneOf(String, Function));\n\n    try {\n      const _URL = window.URL || window.webkitURL || window.mozURL || window.msURL || window.oURL || false;\n      if (window.Worker && window.Blob && _URL) {\n        this._supportWebWorker = true;\n        this._webWorkerUrl     = _URL.createObjectURL(new Blob(['!function(a){\"use strict\";a.onmessage=function(b){var c=b.data.f.slice(b.data.cs*(b.data.cc-1),b.data.cs*b.data.cc);if(b.data.ib===!0)postMessage({bin:c,chunkId:b.data.cc});else{var d;a.FileReader?(d=new FileReader,d.onloadend=function(a){postMessage({bin:(d.result||a.srcElement||a.target).split(\",\")[1],chunkId:b.data.cc,s:b.data.s})},d.onerror=function(a){throw(a.target||a.srcElement).error},d.readAsDataURL(c)):a.FileReaderSync?(d=new FileReaderSync,postMessage({bin:d.readAsDataURL(c).split(\",\")[1],chunkId:b.data.cc})):postMessage({bin:null,chunkId:b.data.cc,error:\"File API is not supported in WebWorker!\"})}}}(this);'], {type: 'application/javascript'}));\n      } else if (window.Worker) {\n        this._supportWebWorker = true;\n        this._webWorkerUrl     = Meteor.absoluteUrl('packages/ostrio_files/worker.min.js');\n      } else {\n        this._supportWebWorker = false;\n      }\n    } catch (e) {\n      self._debug('[FilesCollection] [Check WebWorker Availability] Error:', e);\n      this._supportWebWorker = false;\n    }\n\n    if (!this.schema) {\n      this.schema = FilesCollectionCore.schema;\n    }\n\n    check(this.debug, Boolean);\n    check(this.schema, Object);\n    check(this.public, Boolean);\n    check(this.chunkSize, Number);\n    check(this.downloadRoute, String);\n    check(this.disableUpload, Boolean);\n    check(this.namingFunction, Match.OneOf(false, Function));\n    check(this.onBeforeUpload, Match.OneOf(false, Function));\n    check(this.allowClientCode, Boolean);\n    check(this.ddp, Match.Any);\n\n    this._methodNames = {\n      _Abort: `_FilesCollectionAbort_${this.collectionName}`,\n      _Write: `_FilesCollectionWrite_${this.collectionName}`,\n      _Start: `_FilesCollectionStart_${this.collectionName}`,\n      _Remove: `_FilesCollectionRemove_${this.collectionName}`\n    };\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollection\n   * @name _getMimeType\n   * @param {Object} fileData - File Object\n   * @summary Returns file's mime-type\n   * @returns {String}\n   */\n  _getMimeType(fileData) {\n    let mime;\n    check(fileData, Object);\n    if (_.isObject(fileData)) {\n      mime = fileData.type;\n    }\n\n    if (!mime || !_.isString(mime)) {\n      mime = 'application/octet-stream';\n    }\n    return mime;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollection\n   * @name _getUser\n   * @summary Returns object with `userId` and `user()` method which return user's object\n   * @returns {Object}\n   */\n  _getUser() {\n    const result = {\n      user() {\n        return null;\n      },\n      userId: null\n    };\n\n    if (_.isFunction(Meteor.userId)) {\n      result.user = () => Meteor.user();\n      result.userId = Meteor.userId();\n    }\n\n    return result;\n  }\n\n  /*\n   * @locus Client\n   * @memberOf FilesCollection\n   * @name insert\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n   * @param {Object} config - Configuration object with next properties:\n   *   {File|Object} file           - HTML5 `files` item, like in change event: `e.currentTarget.files[0]`\n   *   {Object}      meta           - Additional data as object, use later for search\n   *   {Boolean}     allowWebWorkers- Allow/Deny WebWorkers usage\n   *   {Number|dynamic} streams     - Quantity of parallel upload streams, default: 2\n   *   {Number|dynamic} chunkSize   - Chunk size for upload\n   *   {String}      transport      - Upload transport `http` or `ddp`\n   *   {Object}      ddp            - Custom DDP connection. Object returned form `DDP.connect()`\n   *   {Function}    onUploaded     - Callback triggered when upload is finished, with two arguments `error` and `fileRef`\n   *   {Function}    onStart        - Callback triggered when upload is started after all successful validations, with two arguments `error` (always null) and `fileRef`\n   *   {Function}    onError        - Callback triggered on error in upload and/or FileReader, with two arguments `error` and `fileData`\n   *   {Function}    onProgress     - Callback triggered when chunk is sent, with only argument `progress`\n   *   {Function}    onBeforeUpload - Callback triggered right before upload is started:\n   *       return true to continue\n   *       return false to abort upload\n   * @param {Boolean} autoStart     - Start upload immediately. If set to false, you need manually call .start() method on returned class. Useful to set EventListeners.\n   * @summary Upload file to server over DDP or HTTP\n   * @returns {UploadInstance} Instance. UploadInstance has next properties:\n   *   {ReactiveVar} onPause  - Is upload process on the pause?\n   *   {ReactiveVar} state    - active|paused|aborted|completed\n   *   {ReactiveVar} progress - Current progress in percentage\n   *   {Function}    pause    - Pause upload process\n   *   {Function}    continue - Continue paused upload process\n   *   {Function}    toggle   - Toggle continue/pause if upload process\n   *   {Function}    abort    - Abort upload\n   *   {Function}    readAsDataURL - Current file as data URL, use to create image preview and etc. Be aware of big files, may lead to browser crash\n   */\n  insert(config, autoStart = true) {\n    if (this.disableUpload) {\n      console.warn('[FilesCollection] [insert()] Upload is disabled with [disableUpload]!');\n      return {};\n    }\n    return (new UploadInstance(config, this))[autoStart ? 'start' : 'manual']();\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollection\n   * @name remove\n   * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n   * @param {Function} callback - Callback with one `error` argument\n   * @summary Remove documents from the collection\n   * @returns {FilesCollection} Instance\n   */\n  remove(selector = {}, callback) {\n    this._debug(`[FilesCollection] [remove(${JSON.stringify(selector)})]`);\n    check(selector, Match.OneOf(Object, String));\n    check(callback, Match.Optional(Function));\n\n    if (this.allowClientCode) {\n      this.ddp.call(this._methodNames._Remove, selector, (callback || NOOP));\n    } else {\n      callback && callback(new Meteor.Error(401, '[FilesCollection] [remove] Run code from client is not allowed!'));\n      this._debug('[FilesCollection] [remove] Run code from client is not allowed!');\n    }\n\n    return this;\n  }\n}\n\n/*\n * @locus Client\n * @TemplateHelper\n * @name fileURL\n * @param {Object} fileRef - File reference object\n * @param {String} version - [Optional] Version of file you would like to request\n * @summary Get download URL for file by fileRef, even without subscription\n * @example {{fileURL fileRef}}\n * @returns {String}\n */\nMeteor.startup(() => {\n  if (typeof Template !== 'undefined' && Template !== null) {\n    Template.registerHelper('fileURL', (fileRef, version = 'original') => {\n      if (!_.isObject(fileRef)) {\n        return '';\n      }\n\n      version = (!_.isString(version)) ? 'original' : version;\n      return formatFleURL(fileRef, version);\n    });\n  }\n});\n","import { _ }                       from 'meteor/underscore';\nimport { EventEmitter }            from 'eventemitter3';\nimport { formatFleURL }            from './lib.js';\nimport { check, Match }            from 'meteor/check';\nimport { FilesCursor, FileCursor } from './cursor.js';\n\nexport default class FilesCollectionCore extends EventEmitter {\n  constructor() {\n    super();\n  }\n\n  static schema = {\n    size: {\n      type: Number\n    },\n    name: {\n      type: String\n    },\n    type: {\n      type: String\n    },\n    path: {\n      type: String\n    },\n    isVideo: {\n      type: Boolean\n    },\n    isAudio: {\n      type: Boolean\n    },\n    isImage: {\n      type: Boolean\n    },\n    isText: {\n      type: Boolean\n    },\n    isJSON: {\n      type: Boolean\n    },\n    isPDF: {\n      type: Boolean\n    },\n    extension: {\n      type: String,\n      optional: true\n    },\n    _storagePath: {\n      type: String\n    },\n    _downloadRoute: {\n      type: String\n    },\n    _collectionName: {\n      type: String\n    },\n    public: {\n      type: Boolean,\n      optional: true\n    },\n    meta: {\n      type: Object,\n      blackbox: true,\n      optional: true\n    },\n    userId: {\n      type: String,\n      optional: true\n    },\n    updatedAt: {\n      type: Date,\n      optional: true\n    },\n    versions: {\n      type: Object,\n      blackbox: true\n    }\n  };\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _debug\n   * @summary Print logs in debug mode\n   * @returns {void}\n   */\n  _debug() {\n    if (this.debug) {\n      (console.info || console.log || function () { }).apply(undefined, arguments);\n    }\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _getFileName\n   * @param {Object} fileData - File Object\n   * @summary Returns file's name\n   * @returns {String}\n   */\n  _getFileName(fileData) {\n    const fileName = fileData.name || fileData.fileName;\n    if (_.isString(fileName) && (fileName.length > 0)) {\n      return (fileData.name || fileData.fileName).replace(/\\.\\./g, '').replace(/\\//g, '');\n    }\n    return '';\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _getExt\n   * @param {String} FileName - File name\n   * @summary Get extension from FileName\n   * @returns {Object}\n   */\n  _getExt(fileName) {\n    if (!!~fileName.indexOf('.')) {\n      const extension = (fileName.split('.').pop().split('?')[0] || '').toLowerCase();\n      return { ext: extension, extension, extensionWithDot: `.${extension}` };\n    }\n    return { ext: '', extension: '', extensionWithDot: '' };\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _updateFileTypes\n   * @param {Object} data - File data\n   * @summary Internal method. Classify file based on 'type' field\n   */\n  _updateFileTypes(data) {\n    data.isVideo  = /^video\\//i.test(data.type);\n    data.isAudio  = /^audio\\//i.test(data.type);\n    data.isImage  = /^image\\//i.test(data.type);\n    data.isText   = /^text\\//i.test(data.type);\n    data.isJSON   = /^application\\/json$/i.test(data.type);\n    data.isPDF    = /^application\\/(x-)?pdf$/i.test(data.type);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _dataToSchema\n   * @param {Object} data - File data\n   * @summary Internal method. Build object in accordance with default schema from File data\n   * @returns {Object}\n   */\n  _dataToSchema(data) {\n    const ds = {\n      name: data.name,\n      extension: data.extension,\n      path: data.path,\n      meta: data.meta,\n      type: data.type,\n      size: data.size,\n      userId: data.userId || null,\n      versions: {\n        original: {\n          path: data.path,\n          size: data.size,\n          type: data.type,\n          extension: data.extension\n        }\n      },\n      _downloadRoute: data._downloadRoute || this.downloadRoute,\n      _collectionName: data._collectionName || this.collectionName\n    };\n\n    //Optional fileId\n    if (data.fileId) {\n      ds._id = data.fileId;\n    }\n\n    this._updateFileTypes(ds);\n    ds._storagePath = data._storagePath || this.storagePath(_.extend(data, ds));\n    return ds;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name findOne\n   * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n   * @param {Object} options - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)\n   * @summary Find and return Cursor for matching document Object\n   * @returns {FileCursor} Instance\n   */\n  findOne(selector = {}, options) {\n    this._debug(`[FilesCollection] [findOne(${JSON.stringify(selector)}, ${JSON.stringify(options)})]`);\n    check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));\n    check(options, Match.Optional(Object));\n\n    const doc = this.collection.findOne(selector, options);\n    if (doc) {\n      return new FileCursor(doc, this);\n    }\n    return doc;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name find\n   * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n   * @param {Object}        options  - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)\n   * @summary Find and return Cursor for matching documents\n   * @returns {FilesCursor} Instance\n   */\n  find(selector = {}, options) {\n    this._debug(`[FilesCollection] [find(${JSON.stringify(selector)}, ${JSON.stringify(options)})]`);\n    check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));\n    check(options, Match.Optional(Object));\n\n    return new FilesCursor(selector, options, this);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name update\n   * @see http://docs.meteor.com/#/full/update\n   * @summary link Mongo.Collection update method\n   * @returns {Mongo.Collection} Instance\n   */\n  update() {\n    this.collection.update.apply(this.collection, arguments);\n    return this.collection;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name link\n   * @param {Object} fileRef - File reference object\n   * @param {String} version - Version of file you would like to request\n   * @summary Returns downloadable URL\n   * @returns {String} Empty string returned in case if file not found in DB\n   */\n  link(fileRef, version = 'original') {\n    this._debug(`[FilesCollection] [link(${(_.isObject(fileRef) ? fileRef._id : undefined)}, ${version})]`);\n    check(fileRef, Object);\n    check(version, String);\n\n    if (!fileRef) {\n      return '';\n    }\n    return formatFleURL(fileRef, version);\n  }\n}\n","import { _ }      from 'meteor/underscore';\nimport { Meteor } from 'meteor/meteor';\n\n/*\n * @private\n * @locus Anywhere\n * @class FileCursor\n * @param _fileRef    {Object} - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n * @param _collection {FilesCollection} - FilesCollection Instance\n * @summary Internal class, represents each record in `FilesCursor.each()` or document returned from `.findOne()` method\n */\nexport class FileCursor {\n  constructor(_fileRef, _collection) {\n    this._fileRef    = _fileRef;\n    this._collection = _collection;\n    _.extend(this, _fileRef);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FileCursor\n   * @name remove\n   * @param callback {Function} - Triggered asynchronously after item is removed or failed to be removed\n   * @summary Remove document\n   * @returns {FileCursor}\n   */\n  remove(callback) {\n    this._collection._debug('[FilesCollection] [FileCursor] [remove()]');\n    if (this._fileRef) {\n      this._collection.remove(this._fileRef._id, callback);\n    } else {\n      callback && callback(new Meteor.Error(404, 'No such file'));\n    }\n    return this;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FileCursor\n   * @name link\n   * @param version {String} - Name of file's subversion\n   * @summary Returns downloadable URL to File\n   * @returns {String}\n   */\n  link(version = 'original') {\n    this._collection._debug(`[FilesCollection] [FileCursor] [link(${version})]`);\n    if (this._fileRef) {\n      return this._collection.link(this._fileRef, version);\n    }\n    return '';\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FileCursor\n   * @name get\n   * @param property {String} - Name of sub-object property\n   * @summary Returns current document as a plain Object, if `property` is specified - returns value of sub-object property\n   * @returns {Object|mix}\n   */\n  get(property) {\n    this._collection._debug(`[FilesCollection] [FileCursor] [get(${property})]`);\n    if (property) {\n      return this._fileRef[property];\n    }\n    return this._fileRef;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FileCursor\n   * @name fetch\n   * @summary Returns document as plain Object in Array\n   * @returns {[Object]}\n   */\n  fetch() {\n    this._collection._debug('[FilesCollection] [FileCursor] [fetch()]');\n    return [this._fileRef];\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FileCursor\n   * @name with\n   * @summary Returns reactive version of current FileCursor, useful to use with `{{#with}}...{{/with}}` block template helper\n   * @returns {[Object]}\n   */\n  with() {\n    this._collection._debug('[FilesCollection] [FileCursor] [with()]');\n    return _.extend(this, this._collection.collection.findOne(this._fileRef._id));\n  }\n}\n\n/*\n * @private\n * @locus Anywhere\n * @class FilesCursor\n * @param _selector   {String|Object}   - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n * @param options     {Object}          - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#selectors)\n * @param _collection {FilesCollection} - FilesCollection Instance\n * @summary Implementation of Cursor for FilesCollection\n */\nexport class FilesCursor {\n  constructor(_selector = {}, options, _collection) {\n    this._collection = _collection;\n    this._selector   = _selector;\n    this._current    = -1;\n    this.cursor      = this._collection.collection.find(this._selector, options);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name get\n   * @summary Returns all matching document(s) as an Array. Alias of `.fetch()`\n   * @returns {[Object]}\n   */\n  get() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [get()]');\n    return this.cursor.fetch();\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name hasNext\n   * @summary Returns `true` if there is next item available on Cursor\n   * @returns {Boolean}\n   */\n  hasNext() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [hasNext()]');\n    return this._current < (this.cursor.count() - 1);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name next\n   * @summary Returns next item on Cursor, if available\n   * @returns {Object|undefined}\n   */\n  next() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [next()]');\n    this.cursor.fetch()[++this._current];\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name hasPrevious\n   * @summary Returns `true` if there is previous item available on Cursor\n   * @returns {Boolean}\n   */\n  hasPrevious() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [hasPrevious()]');\n    return this._current !== -1;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name previous\n   * @summary Returns previous item on Cursor, if available\n   * @returns {Object|undefined}\n   */\n  previous() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [previous()]');\n    this.cursor.fetch()[--this._current];\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name fetch\n   * @summary Returns all matching document(s) as an Array.\n   * @returns {[Object]}\n   */\n  fetch() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [fetch()]');\n    return this.cursor.fetch() || [];\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name first\n   * @summary Returns first item on Cursor, if available\n   * @returns {Object|undefined}\n   */\n  first() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [first()]');\n    this._current = 0;\n    return this.fetch()[this._current];\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name last\n   * @summary Returns last item on Cursor, if available\n   * @returns {Object|undefined}\n   */\n  last() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [last()]');\n    this._current = this.count() - 1;\n    return this.fetch()[this._current];\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name count\n   * @summary Returns the number of documents that match a query\n   * @returns {Number}\n   */\n  count() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [count()]');\n    return this.cursor.count();\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name remove\n   * @param callback {Function} - Triggered asynchronously after item is removed or failed to be removed\n   * @summary Removes all documents that match a query\n   * @returns {FilesCursor}\n   */\n  remove(callback) {\n    this._collection._debug('[FilesCollection] [FilesCursor] [remove()]');\n    this._collection.remove(this._selector, callback);\n    return this;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name forEach\n   * @param callback {Function} - Function to call. It will be called with three arguments: the `file`, a 0-based index, and cursor itself\n   * @param context {Object} - An object which will be the value of `this` inside `callback`\n   * @summary Call `callback` once for each matching document, sequentially and synchronously.\n   * @returns {undefined}\n   */\n  forEach(callback, context = {}) {\n    this._collection._debug('[FilesCollection] [FilesCursor] [forEach()]');\n    this.cursor.forEach(callback, context);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name each\n   * @summary Returns an Array of FileCursor made for each document on current cursor\n   *          Useful when using in {{#each FilesCursor#each}}...{{/each}} block template helper\n   * @returns {[FileCursor]}\n   */\n  each() {\n    return this.map((file) => {\n      return new FileCursor(file, this._collection);\n    });\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name map\n   * @param callback {Function} - Function to call. It will be called with three arguments: the `file`, a 0-based index, and cursor itself\n   * @param context {Object} - An object which will be the value of `this` inside `callback`\n   * @summary Map `callback` over all matching documents. Returns an Array.\n   * @returns {Array}\n   */\n  map(callback, context = {}) {\n    this._collection._debug('[FilesCollection] [FilesCursor] [map()]');\n    return this.cursor.map(callback, context);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name current\n   * @summary Returns current item on Cursor, if available\n   * @returns {Object|undefined}\n   */\n  current() {\n    this._collection._debug('[FilesCollection] [FilesCursor] [current()]');\n    if (this._current < 0) {\n      this._current = 0;\n    }\n    return this.fetch()[this._current];\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name observe\n   * @param callbacks {Object} - Functions to call to deliver the result set as it changes\n   * @summary Watch a query. Receive callbacks as the result set changes.\n   * @url http://docs.meteor.com/api/collections.html#Mongo-Cursor-observe\n   * @returns {Object} - live query handle\n   */\n  observe(callbacks) {\n    this._collection._debug('[FilesCollection] [FilesCursor] [observe()]');\n    return this.cursor.observe(callbacks);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCursor\n   * @name observeChanges\n   * @param callbacks {Object} - Functions to call to deliver the result set as it changes\n   * @summary Watch a query. Receive callbacks as the result set changes. Only the differences between the old and new documents are passed to the callbacks.\n   * @url http://docs.meteor.com/api/collections.html#Mongo-Cursor-observeChanges\n   * @returns {Object} - live query handle\n   */\n  observeChanges(callbacks) {\n    this._collection._debug('[FilesCollection] [FilesCursor] [observeChanges()]');\n    return this.cursor.observeChanges(callbacks);\n  }\n}\n","import { _ }     from 'meteor/underscore';\nimport { check } from 'meteor/check';\n\n/*\n * @const {Function} fixJSONParse - Fix issue with Date parse\n */\nconst fixJSONParse = function(obj) {\n  for (let key in obj) {\n    if (_.isString(obj[key]) && !!~obj[key].indexOf('=--JSON-DATE--=')) {\n      obj[key] = obj[key].replace('=--JSON-DATE--=', '');\n      obj[key] = new Date(parseInt(obj[key]));\n    } else if (_.isObject(obj[key])) {\n      obj[key] = fixJSONParse(obj[key]);\n    } else if (_.isArray(obj[key])) {\n      let v;\n      for (let i = 0; i < obj[key].length; i++) {\n        v = obj[key][i];\n        if (_.isObject(v)) {\n          obj[key][i] = fixJSONParse(v);\n        } else if (_.isString(v) && !!~v.indexOf('=--JSON-DATE--=')) {\n          v = v.replace('=--JSON-DATE--=', '');\n          obj[key][i] = new Date(parseInt(v));\n        }\n      }\n    }\n  }\n  return obj;\n};\n\n/*\n * @const {Function} fixJSONStringify - Fix issue with Date stringify\n */\nconst fixJSONStringify = function(obj) {\n  for (let key in obj) {\n    if (_.isDate(obj[key])) {\n      obj[key] = `=--JSON-DATE--=${+obj[key]}`;\n    } else if (_.isObject(obj[key])) {\n      obj[key] = fixJSONStringify(obj[key]);\n    } else if (_.isArray(obj[key])) {\n      let v;\n      for (let i = 0; i < obj[key].length; i++) {\n        v = obj[key][i];\n        if (_.isObject(v)) {\n          obj[key][i] = fixJSONStringify(v);\n        } else if (_.isDate(v)) {\n          obj[key][i] = `=--JSON-DATE--=${+v}`;\n        }\n      }\n    }\n  }\n  return obj;\n};\n\n/*\n * @locus Anywhere\n * @private\n * @name formatFleURL\n * @param {Object} fileRef - File reference object\n * @param {String} version - [Optional] Version of file you would like build URL for\n * @summary Returns formatted URL for file\n * @returns {String} Downloadable link\n */\nconst formatFleURL = (fileRef, version = 'original') => {\n  let ext;\n  check(fileRef, Object);\n  check(version, String);\n\n  const _root = __meteor_runtime_config__.ROOT_URL.replace(/\\/+$/, '');\n  const vRef = ((fileRef.versions && fileRef.versions[version]) || fileRef);\n\n  if (vRef.extension && _.isString(vRef, 'extension')) {\n    ext = `.${vRef.extension.replace(/^\\./, '')}`;\n  } else {\n    ext = '';\n  }\n\n  if (fileRef.public === true) {\n    return _root + (version === 'original' ? `${fileRef._downloadRoute}/${fileRef._id}${ext}` : `${fileRef._downloadRoute}/${version}-${fileRef._id}${ext}`);\n  }\n  return _root + `${fileRef._downloadRoute}/${fileRef._collectionName}/${fileRef._id}/${version}/${fileRef._id}${ext}`;\n};\n\nexport { fixJSONParse, fixJSONStringify, formatFleURL };\n","import { _ }            from 'meteor/underscore';\nimport { HTTP }         from 'meteor/http';\nimport { Meteor }       from 'meteor/meteor';\nimport { Random }       from 'meteor/random';\nimport { Tracker }      from 'meteor/tracker';\nimport { ReactiveVar }  from 'meteor/reactive-var';\nimport { EventEmitter } from 'eventemitter3';\nimport { check, Match } from 'meteor/check';\nimport { fixJSONParse, fixJSONStringify } from './lib.js';\n\nconst isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n/*\n * @locus Client\n * @name UploadInstance\n * @class UploadInstance\n * @summary Internal Class, used for file upload\n */\nexport class UploadInstance extends EventEmitter {\n  constructor(config, collection) {\n    super();\n    this.config     = config;\n    this.collection = collection;\n    this.collection._debug('[FilesCollection] [insert()]');\n\n    if (!this.config.ddp) {\n      this.config.ddp = this.collection.ddp;\n    }\n\n    if (!this.config.meta) {\n      this.config.meta = {};\n    }\n\n    if (!this.config.streams) {\n      this.config.streams = 2;\n    }\n\n    if (this.config.streams < 1) {\n      this.config.streams = 2;\n    }\n\n    if (!_.isString(this.config.transport)) {\n      this.config.transport = 'ddp';\n    }\n\n    this.config.transport = this.config.transport.toLowerCase();\n\n    if (this.config.transport !== 'ddp' && this.config.transport !== 'http') {\n      this.config.transport = 'ddp';\n    }\n\n    if (!this.config.chunkSize) {\n      this.config.chunkSize = this.collection.chunkSize;\n    }\n\n    if (!_.isBoolean(this.config.allowWebWorkers)) {\n      this.config.allowWebWorkers = true;\n    }\n\n    check(this.config, {\n      ddp: Match.Any,\n      file: Match.Any,\n      meta: Match.Optional(Object),\n      type: Match.Optional(String),\n      onError: Match.Optional(Function),\n      onAbort: Match.Optional(Function),\n      streams: Match.OneOf('dynamic', Number),\n      onStart: Match.Optional(Function),\n      fileName: Match.Optional(String),\n      isBase64: Match.Optional(Boolean),\n      transport: Match.OneOf('http', 'ddp'),\n      chunkSize: Match.OneOf('dynamic', Number),\n      onUploaded: Match.Optional(Function),\n      onProgress: Match.Optional(Function),\n      onBeforeUpload: Match.Optional(Function),\n      allowWebWorkers: Boolean\n    });\n\n    if (this.config.isBase64 === true) {\n      check(this.config.file, String);\n\n      if (!this.config.fileName) {\n        throw new Meteor.Error(400, '\"fileName\" must me specified for base64 upload!');\n      }\n\n      if (!!~this.config.file.indexOf('data:')) {\n        this.config.file = this.config.file.replace('data:', '');\n      }\n\n      if (!!~this.config.file.indexOf(',')) {\n        const _file = this.config.file.split(',');\n        this.fileData = {\n          size: Math.floor(((_file[1].replace(/\\=/g, '')).length / 4) * 3),\n          type: _file[0].split(';')[0],\n          name: this.config.fileName,\n          meta: this.config.meta\n        };\n        this.config.file = _file[1];\n      } else if (!this.config.type) {\n        throw new Meteor.Error(400, '\"type\" must me specified for base64 upload! And represent mime-type of the file');\n      } else {\n        this.fileData = {\n          size: Math.floor(((this.config.file.replace(/\\=/g, '')).length / 4) * 3),\n          type: this.config.type,\n          name: this.config.fileName,\n          meta: this.config.meta\n        };\n      }\n    }\n\n    if (this.config.file) {\n      if (!this.config.isBase64) {\n        try {\n          if (!this.config.file.name || !this.config.file.size) {\n            throw new Meteor.Error(500, 'Not a File!');\n          }\n        } catch (e) {\n          throw new Meteor.Error(500, '[FilesCollection] [insert] Insert method accepts File, not a FileList. You need to provide a real File. File must have `.name` property, and its size must be larger than zero.');\n        }\n\n        this.fileData = {\n          size: this.config.file.size,\n          type: this.config.type || this.config.file.type,\n          name: this.config.fileName || this.config.file.name,\n          meta: this.config.meta\n        };\n      }\n\n      if (this.collection.debug) {\n        console.time(`insert ${this.fileData.name}`);\n        console.time(`loadFile ${this.fileData.name}`);\n      }\n\n      if (this.collection._supportWebWorker && this.config.allowWebWorkers) {\n        try {\n          this.worker = new Worker(this.collection._webWorkerUrl);\n        } catch (wwError) {\n          this.worker = false;\n          this.collection._debug('[FilesCollection] [insert] [create WebWorker]: Can\\'t create WebWorker, fallback to MainThread', wwError);\n        }\n      } else {\n        this.worker = null;\n      }\n\n      this.startTime     = {};\n      this.config.debug  = this.collection.debug;\n      this.config._debug = this.collection._debug;\n      this.currentChunk  = 0;\n      this.transferTime  = 0;\n      this.trackerComp   = null;\n      this.sentChunks    = 0;\n      this.fileLength    = 1;\n      this.EOFsent       = false;\n      this.fileId        = Random.id();\n      this.FSName        = this.collection.namingFunction ? this.collection.namingFunction(this.fileData) : this.fileId;\n      this.pipes         = [];\n\n      this.fileData = _.extend(this.fileData, this.collection._getExt(this.fileData.name), {mime: this.collection._getMimeType(this.fileData)});\n      this.fileData['mime-type'] = this.fileData.mime;\n\n      this.result = new FileUpload(_.extend(this.config, {\n        fileData: this.fileData,\n        fileId: this.fileId,\n        _Abort: this.collection._methodNames._Abort\n      }));\n\n      this.beforeunload = (e) => {\n        const message = _.isFunction(this.collection.onbeforeunloadMessage) ? this.collection.onbeforeunloadMessage.call(this.result, this.fileData) : this.collection.onbeforeunloadMessage;\n\n        if (e) {\n          e.returnValue = message;\n        }\n        return message;\n      };\n\n      this.result.config.beforeunload = this.beforeunload;\n      window.addEventListener('beforeunload', this.beforeunload, false);\n\n      this.result.config._onEnd = () => this.emit('_onEnd');\n\n      this.addListener('end', this.end);\n      this.addListener('start', this.start);\n      this.addListener('upload', this.upload);\n      this.addListener('sendEOF', this.sendEOF);\n      this.addListener('prepare', this.prepare);\n      this.addListener('sendChunk', this.sendChunk);\n      this.addListener('proceedChunk', this.proceedChunk);\n      this.addListener('createStreams', this.createStreams);\n\n      this.addListener('calculateStats', _.throttle(() => {\n        const _t = (this.transferTime / this.sentChunks) / this.config.streams;\n        this.result.estimateTime.set((_t * (this.fileLength - this.sentChunks)));\n        this.result.estimateSpeed.set((this.config.chunkSize / (_t / 1000)));\n\n        const progress = Math.round((this.sentChunks / this.fileLength) * 100);\n        this.result.progress.set(progress);\n        this.config.onProgress && this.config.onProgress.call(this.result, progress, this.fileData);\n        this.result.emit('progress', progress, this.fileData);\n      }, 250));\n\n      this.addListener('_onEnd', () => {\n        if (this.result.estimateTimer) {\n          Meteor.clearInterval(this.result.estimateTimer);\n        }\n        if (this.worker) {\n          this.worker.terminate();\n        }\n        if (this.trackerComp) {\n          this.trackerComp.stop();\n        }\n        if (this.beforeunload) {\n          window.removeEventListener('beforeunload', this.beforeunload, false);\n        }\n        if (this.result) {\n          return this.result.progress.set(0);\n        }\n        return void 0;\n      });\n    } else {\n      throw new Meteor.Error(500, '[FilesCollection] [insert] Have you forget to pass a File itself?');\n    }\n  }\n\n  end(error, data) {\n    this.collection._debug('[FilesCollection] [UploadInstance] [end]', this.fileData.name);\n    if (this.collection.debug) {\n      console.timeEnd(`insert ${this.fileData.name}`);\n    }\n\n    this.emit('_onEnd');\n    this.result.emit('uploaded', error, data);\n    this.config.onUploaded && this.config.onUploaded.call(this.result, error, data);\n\n    if (error) {\n      this.collection._debug('[FilesCollection] [insert] [end] Error:', error);\n      this.result.abort();\n      this.result.state.set('aborted');\n      this.result.emit('error', error, this.fileData);\n      this.config.onError && this.config.onError.call(this.result, error, this.fileData);\n    } else {\n      this.result.state.set('completed');\n      this.collection.emit('afterUpload', data);\n    }\n    this.result.emit('end', error, (data || this.fileData));\n    return this.result;\n  }\n\n  sendChunk(evt) {\n    const opts = {\n      fileId: this.fileId,\n      binData: evt.data.bin,\n      chunkId: evt.data.chunkId\n    };\n\n    if (this.config.isBase64) {\n      const pad = opts.binData.length % 4;\n      if (pad) {\n        let p = 0;\n        while (p < pad) {\n          opts.binData += '=';\n          p++;\n        }\n      }\n    }\n\n    this.emit('data', evt.data.bin);\n    if (this.pipes.length) {\n      for (let i = this.pipes.length - 1; i >= 0; i--) {\n        opts.binData = this.pipes[i](opts.binData);\n      }\n    }\n\n    if (this.fileLength === evt.data.chunkId) {\n      if (this.collection.debug) {\n        console.timeEnd(`loadFile ${this.fileData.name}`);\n      }\n      this.emit('readEnd');\n    }\n\n    if (opts.binData) {\n      if (this.config.transport === 'ddp') {\n        this.config.ddp.call(this.collection._methodNames._Write, opts, (error) => {\n          this.transferTime += (+new Date) - this.startTime[opts.chunkId];\n          if (error) {\n            if (this.result.state.get() !== 'aborted') {\n              this.emit('end', error);\n            }\n          } else {\n            ++this.sentChunks;\n            if (this.sentChunks >= this.fileLength) {\n              this.emit('sendEOF');\n            } else if (this.currentChunk < this.fileLength) {\n              this.emit('upload');\n            }\n            this.emit('calculateStats');\n          }\n        });\n      } else {\n        HTTP.call('POST', `${this.collection.downloadRoute}/${this.collection.collectionName}/__upload`, {\n          content: opts.binData,\n          headers: {\n            'x-mtok': (_.isObject(Meteor.connection) ? Meteor.connection._lastSessionId : undefined) || null,\n            'x-fileid': opts.fileId,\n            'x-chunkid': opts.chunkId,\n            'content-type': 'text/plain'\n          }\n        }, (error) => {\n          this.transferTime += +new Date() - this.startTime[opts.chunkId];\n          if (error) {\n            if (`${error}` === 'Error: network') {\n              this.result.pause();\n            } else {\n              if (this.result.state.get() !== 'aborted') {\n                this.emit('end', error);\n              }\n            }\n          } else {\n            ++this.sentChunks;\n            if (this.sentChunks >= this.fileLength) {\n              this.emit('sendEOF');\n            } else if (this.currentChunk < this.fileLength) {\n              this.emit('upload');\n            }\n            this.emit('calculateStats');\n          }\n        });\n      }\n    }\n  }\n\n  sendEOF() {\n    this.collection._debug('[FilesCollection] [UploadInstance] [sendEOF]', this.EOFsent);\n    if (!this.EOFsent) {\n      this.EOFsent = true;\n      const opts = {\n        eof: true,\n        fileId: this.fileId\n      };\n\n      if (this.config.transport === 'ddp') {\n        this.config.ddp.call(this.collection._methodNames._Write, opts, (error, result) => {\n          this.emit('end', error, result);\n        });\n      } else {\n        HTTP.call('POST', `${this.collection.downloadRoute}/${this.collection.collectionName}/__upload`, {\n          content: '',\n          headers: {\n            'x-eof': '1',\n            'x-mtok': (_.isObject(Meteor.connection) ? Meteor.connection._lastSessionId : undefined) || null,\n            'x-fileId': opts.fileId,\n            'content-type': 'text/plain'\n          }\n        }, (error, _result) => {\n          let result;\n          try {\n            result = JSON.parse((_.isObject(_result) ? _result.content : undefined) || {});\n          } catch (e) {\n            console.warn('Something went wrong! [sendEOF] method doesn\\'t returned JSON! Looks like you\\'re on Cordova app or behind proxy, switching to DDP transport is recommended.');\n            result = {};\n          }\n\n          if (result.meta) {\n            result.meta = fixJSONParse(result.meta);\n          }\n\n          this.emit('end', error, result);\n        });\n      }\n    }\n  }\n\n  proceedChunk(chunkId) {\n    const chunk = this.config.file.slice((this.config.chunkSize * (chunkId - 1)), (this.config.chunkSize * chunkId));\n\n    if (this.config.isBase64) {\n      this.emit('sendChunk', {\n        data: {\n          bin: chunk,\n          chunkId\n        }\n      });\n    } else {\n      let fileReader;\n      if (FileReader) {\n        fileReader = new FileReader;\n\n        fileReader.onloadend = (evt) => {\n          this.emit('sendChunk', {\n            data: {\n              bin: ((_.isObject(fileReader) ? fileReader.result : undefined) || (evt.srcElement ? evt.srcElement.result : undefined) || (evt.target ? evt.target.result : undefined)).split(',')[1],\n              chunkId\n            }\n          });\n        };\n\n        fileReader.onerror = (e) => {\n          this.emit('end', (e.target || e.srcElement).error);\n        };\n\n        fileReader.readAsDataURL(chunk);\n      } else if (FileReaderSync) {\n        fileReader = new FileReaderSync;\n\n        this.emit('sendChunk', {\n          data: {\n            bin: fileReader.readAsDataURL(chunk).split(',')[1],\n            chunkId\n          }\n        });\n      } else {\n        this.emit('end', 'File API is not supported in this Browser!');\n      }\n    }\n  }\n\n  upload() {\n    if (this.result.onPause.get()) {\n      return this;\n    }\n\n    if (this.result.state.get() === 'aborted') {\n      return this;\n    }\n\n    if (this.currentChunk <= this.fileLength) {\n      ++this.currentChunk;\n      if (this.worker) {\n        this.worker.postMessage({\n          f: this.config.file,\n          sc: this.sentChunks,\n          cc: this.currentChunk,\n          cs: this.config.chunkSize,\n          ib: this.config.isBase64\n        });\n      } else {\n        this.emit('proceedChunk', this.currentChunk);\n      }\n    } else {\n      this.emit('sendEOF');\n    }\n    this.startTime[this.currentChunk] = +new Date();\n    return this;\n  }\n\n  createStreams() {\n    this.collection._debug('[FilesCollection] [UploadInstance] [createStreams]');\n    let i = 1;\n    while (i <= this.config.streams) {\n      this.emit('upload');\n      i++;\n    }\n  }\n\n  prepare() {\n    let _len;\n\n    this.config.onStart && this.config.onStart.call(this.result, null, this.fileData);\n    this.result.emit('start', null, this.fileData);\n\n    if (this.config.chunkSize === 'dynamic') {\n      this.config.chunkSize = this.fileData.size / 1000;\n      if (this.config.chunkSize < 327680) {\n        this.config.chunkSize = 327680;\n      } else if (this.config.chunkSize > 1048576) {\n        this.config.chunkSize = 1048576;\n      }\n\n      if (this.config.transport === 'http') {\n        this.config.chunkSize = Math.round(this.config.chunkSize / 2);\n      } else if (isSafari) {\n        this.config.chunkSize = Math.ceil(this.config.chunkSize / 8);\n      }\n    }\n\n    if (this.config.isBase64) {\n      this.config.chunkSize = Math.floor(this.config.chunkSize / 4) * 4;\n      _len = Math.ceil(this.config.file.length / this.config.chunkSize);\n    } else {\n      this.config.chunkSize = Math.floor(this.config.chunkSize / 8) * 8;\n      _len = Math.ceil(this.fileData.size / this.config.chunkSize);\n    }\n\n    if (this.config.streams === 'dynamic') {\n      this.config.streams = _.clone(_len);\n      if (this.config.streams > 24) { this.config.streams = 24; }\n\n      if (this.config.transport === 'http') {\n        this.config.streams = Math.round(this.config.streams / 2);\n      } else if (isSafari) {\n        this.config.streams = 1;\n      }\n    }\n\n    this.fileLength = _len <= 0 ? 1 : _len;\n    if (this.config.streams > this.fileLength) {\n      this.config.streams = this.fileLength;\n    }\n    this.result.config.fileLength = this.fileLength;\n\n    const opts = {\n      file: this.fileData,\n      fileId: this.fileId,\n      chunkSize: this.config.isBase64 ? ((this.config.chunkSize  / 4) * 3) : this.config.chunkSize,\n      fileLength: this.fileLength\n    };\n\n    if (this.FSName !== this.fileId) {\n      opts.FSName = this.FSName;\n    }\n\n    const handleStart = (error) => {\n      if (error) {\n        this.collection._debug('[FilesCollection] [_Start] Error:', error);\n        this.emit('end', error);\n      } else {\n        this.result.continueFunc = () => {\n          this.collection._debug('[FilesCollection] [insert] [continueFunc]');\n          this.emit('createStreams');\n        };\n        this.emit('createStreams');\n      }\n    };\n\n    if (this.config.transport === 'ddp') {\n      this.config.ddp.call(this.collection._methodNames._Start, opts, handleStart);\n    } else {\n      if (_.isObject(opts.file) ? opts.file.meta : undefined) {\n        opts.file.meta = fixJSONStringify(opts.file.meta);\n      }\n\n      HTTP.call('POST', `${this.collection.downloadRoute}/${this.collection.collectionName}/__upload`, {\n        data: opts,\n        headers: {\n          'x-start': '1',\n          'x-mtok': (_.isObject(Meteor.connection) ? Meteor.connection._lastSessionId : undefined) || null\n        }\n      }, handleStart);\n    }\n  }\n\n  pipe(func) {\n    this.pipes.push(func);\n    return this;\n  }\n\n  start() {\n    let isUploadAllowed;\n    if (this.fileData.size <= 0) {\n      this.end(new Meteor.Error(400, 'Can\\'t upload empty file'));\n      return this.result;\n    }\n\n    if (this.config.onBeforeUpload && _.isFunction(this.config.onBeforeUpload)) {\n      isUploadAllowed = this.config.onBeforeUpload.call(_.extend(this.result, this.collection._getUser()), this.fileData);\n      if (isUploadAllowed !== true) {\n        return this.end(new Meteor.Error(403, _.isString(isUploadAllowed) ? isUploadAllowed : 'config.onBeforeUpload() returned false'));\n      }\n    }\n\n    if (this.collection.onBeforeUpload && _.isFunction(this.collection.onBeforeUpload)) {\n      isUploadAllowed = this.collection.onBeforeUpload.call(_.extend(this.result, this.collection._getUser()), this.fileData);\n      if (isUploadAllowed !== true) {\n        return this.end(new Meteor.Error(403, _.isString(isUploadAllowed) ? isUploadAllowed : 'collection.onBeforeUpload() returned false'));\n      }\n    }\n\n    Tracker.autorun((computation) => {\n      this.trackerComp = computation;\n      if (!this.result.onPause.curValue && !Meteor.status().connected) {\n        this.collection._debug('[FilesCollection] [insert] [Tracker] [pause]');\n        this.result.pause();\n      }\n    });\n\n    if (this.worker) {\n      this.collection._debug('[FilesCollection] [insert] using WebWorkers');\n      this.worker.onmessage = (evt) => {\n        if (evt.data.error) {\n          this.collection._debug('[FilesCollection] [insert] [worker] [onmessage] [ERROR:]', evt.data.error);\n          this.emit('proceedChunk', evt.data.chunkId);\n        } else {\n          this.emit('sendChunk', evt);\n        }\n      };\n\n      this.worker.onerror = (e) => {\n        this.collection._debug('[FilesCollection] [insert] [worker] [onerror] [ERROR:]', e);\n        this.emit('end', e.message);\n      };\n    } else {\n      this.collection._debug('[FilesCollection] [insert] using MainThread');\n    }\n\n    this.emit('prepare');\n    return this.result;\n  }\n\n  manual() {\n    this.result.start = () => {\n      this.emit('start');\n    };\n\n    this.result.pipe = function (func) {\n      self.pipe(func);\n      return this;\n    };\n    return this.result;\n  }\n}\n\n/*\n * @locus Client\n * @name FileUpload\n * @class FileUpload\n * @summary Internal Class, instance of this class is returned from `.insert()` method\n */\nexport class FileUpload extends EventEmitter {\n  constructor(config) {\n    super();\n    this.config = config;\n    this.config._debug('[FilesCollection] [FileUpload] [constructor]');\n\n    if (!this.config.isBase64) {\n      this.file        = _.extend(this.config.file, this.config.fileData);\n    } else {\n      this.file        = this.config.fileData;\n    }\n    this.state         = new ReactiveVar('active');\n    this.onPause       = new ReactiveVar(false);\n    this.progress      = new ReactiveVar(0);\n    this.continueFunc  = () => { };\n    this.estimateTime  = new ReactiveVar(1000);\n    this.estimateSpeed = new ReactiveVar(0);\n    this.estimateTimer = Meteor.setInterval(() => {\n      if (this.state.get() === 'active') {\n        const _currentTime = this.estimateTime.get();\n        if (_currentTime > 1000) {\n          this.estimateTime.set(_currentTime - 1000);\n        }\n      }\n    }, 1000);\n  }\n  pause() {\n    this.config._debug('[FilesCollection] [insert] [.pause()]');\n    if (!this.onPause.get()) {\n      this.onPause.set(true);\n      this.state.set('paused');\n      this.emit('pause', this.file);\n    }\n  }\n  continue() {\n    this.config._debug('[FilesCollection] [insert] [.continue()]');\n    if (this.onPause.get()) {\n      this.onPause.set(false);\n      this.state.set('active');\n      this.emit('continue', this.file);\n      this.continueFunc();\n    }\n  }\n  toggle() {\n    this.config._debug('[FilesCollection] [insert] [.toggle()]');\n    if (this.onPause.get()) {\n      this.continue();\n    } else {\n      this.pause();\n    }\n  }\n  abort() {\n    this.config._debug('[FilesCollection] [insert] [.abort()]');\n    window.removeEventListener('beforeunload', this.config.beforeunload, false);\n    this.config.onAbort && this.config.onAbort.call(this, this.file);\n    this.emit('abort', this.file);\n    this.pause();\n    this.config._onEnd();\n    this.state.set('aborted');\n    if (this.config.debug) {\n      console.timeEnd(`insert ${this.config.fileData.name}`);\n    }\n\n    this.config.ddp.call(this.config._Abort, this.config.fileId);\n  }\n}\n"]}}]