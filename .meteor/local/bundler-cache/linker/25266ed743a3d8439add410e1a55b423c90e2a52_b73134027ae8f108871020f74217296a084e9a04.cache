[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/summernote_summernote/dist/summernote.js                                                                 //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/**                                                                                                                  // 1\n * Super simple wysiwyg editor v0.8.1                                                                                // 2\n * http://summernote.org/                                                                                            // 3\n *                                                                                                                   // 4\n * summernote.js                                                                                                     // 5\n * Copyright 2013-2015 Alan Hong. and other contributors                                                             // 6\n * summernote may be freely distributed under the MIT license./                                                      // 7\n *                                                                                                                   // 8\n * Date: 2016-02-15T18:35Z                                                                                           // 9\n */                                                                                                                  // 10\n(function (factory) {                                                                                                // 11\n  /* global define */                                                                                                // 12\n  if (typeof define === 'function' && define.amd) {                                                                  // 13\n    // AMD. Register as an anonymous module.                                                                         // 14\n    define(['jquery'], factory);                                                                                     // 15\n  } else if (typeof module === 'object' && module.exports) {                                                         // 16\n    // Node/CommonJS                                                                                                 // 17\n    module.exports = factory(require('jquery'));                                                                     // 18\n  } else {                                                                                                           // 19\n    // Browser globals                                                                                               // 20\n    factory(window.jQuery);                                                                                          // 21\n  }                                                                                                                  // 22\n}(function ($) {                                                                                                     // 23\n  'use strict';                                                                                                      // 24\n                                                                                                                     // 25\n  /**                                                                                                                // 26\n   * @class core.func                                                                                                // 27\n   *                                                                                                                 // 28\n   * func utils (for high-order func's arg)                                                                          // 29\n   *                                                                                                                 // 30\n   * @singleton                                                                                                      // 31\n   * @alternateClassName func                                                                                        // 32\n   */                                                                                                                // 33\n  var func = (function () {                                                                                          // 34\n    var eq = function (itemA) {                                                                                      // 35\n      return function (itemB) {                                                                                      // 36\n        return itemA === itemB;                                                                                      // 37\n      };                                                                                                             // 38\n    };                                                                                                               // 39\n                                                                                                                     // 40\n    var eq2 = function (itemA, itemB) {                                                                              // 41\n      return itemA === itemB;                                                                                        // 42\n    };                                                                                                               // 43\n                                                                                                                     // 44\n    var peq2 = function (propName) {                                                                                 // 45\n      return function (itemA, itemB) {                                                                               // 46\n        return itemA[propName] === itemB[propName];                                                                  // 47\n      };                                                                                                             // 48\n    };                                                                                                               // 49\n                                                                                                                     // 50\n    var ok = function () {                                                                                           // 51\n      return true;                                                                                                   // 52\n    };                                                                                                               // 53\n                                                                                                                     // 54\n    var fail = function () {                                                                                         // 55\n      return false;                                                                                                  // 56\n    };                                                                                                               // 57\n                                                                                                                     // 58\n    var not = function (f) {                                                                                         // 59\n      return function () {                                                                                           // 60\n        return !f.apply(f, arguments);                                                                               // 61\n      };                                                                                                             // 62\n    };                                                                                                               // 63\n                                                                                                                     // 64\n    var and = function (fA, fB) {                                                                                    // 65\n      return function (item) {                                                                                       // 66\n        return fA(item) && fB(item);                                                                                 // 67\n      };                                                                                                             // 68\n    };                                                                                                               // 69\n                                                                                                                     // 70\n    var self = function (a) {                                                                                        // 71\n      return a;                                                                                                      // 72\n    };                                                                                                               // 73\n                                                                                                                     // 74\n    var invoke = function (obj, method) {                                                                            // 75\n      return function () {                                                                                           // 76\n        return obj[method].apply(obj, arguments);                                                                    // 77\n      };                                                                                                             // 78\n    };                                                                                                               // 79\n                                                                                                                     // 80\n    var idCounter = 0;                                                                                               // 81\n                                                                                                                     // 82\n    /**                                                                                                              // 83\n     * generate a globally-unique id                                                                                 // 84\n     *                                                                                                               // 85\n     * @param {String} [prefix]                                                                                      // 86\n     */                                                                                                              // 87\n    var uniqueId = function (prefix) {                                                                               // 88\n      var id = ++idCounter + '';                                                                                     // 89\n      return prefix ? prefix + id : id;                                                                              // 90\n    };                                                                                                               // 91\n                                                                                                                     // 92\n    /**                                                                                                              // 93\n     * returns bnd (bounds) from rect                                                                                // 94\n     *                                                                                                               // 95\n     * - IE Compatibility Issue: http://goo.gl/sRLOAo                                                                // 96\n     * - Scroll Issue: http://goo.gl/sNjUc                                                                           // 97\n     *                                                                                                               // 98\n     * @param {Rect} rect                                                                                            // 99\n     * @return {Object} bounds                                                                                       // 100\n     * @return {Number} bounds.top                                                                                   // 101\n     * @return {Number} bounds.left                                                                                  // 102\n     * @return {Number} bounds.width                                                                                 // 103\n     * @return {Number} bounds.height                                                                                // 104\n     */                                                                                                              // 105\n    var rect2bnd = function (rect) {                                                                                 // 106\n      var $document = $(document);                                                                                   // 107\n      return {                                                                                                       // 108\n        top: rect.top + $document.scrollTop(),                                                                       // 109\n        left: rect.left + $document.scrollLeft(),                                                                    // 110\n        width: rect.right - rect.left,                                                                               // 111\n        height: rect.bottom - rect.top                                                                               // 112\n      };                                                                                                             // 113\n    };                                                                                                               // 114\n                                                                                                                     // 115\n    /**                                                                                                              // 116\n     * returns a copy of the object where the keys have become the values and the values the keys.                   // 117\n     * @param {Object} obj                                                                                           // 118\n     * @return {Object}                                                                                              // 119\n     */                                                                                                              // 120\n    var invertObject = function (obj) {                                                                              // 121\n      var inverted = {};                                                                                             // 122\n      for (var key in obj) {                                                                                         // 123\n        if (obj.hasOwnProperty(key)) {                                                                               // 124\n          inverted[obj[key]] = key;                                                                                  // 125\n        }                                                                                                            // 126\n      }                                                                                                              // 127\n      return inverted;                                                                                               // 128\n    };                                                                                                               // 129\n                                                                                                                     // 130\n    /**                                                                                                              // 131\n     * @param {String} namespace                                                                                     // 132\n     * @param {String} [prefix]                                                                                      // 133\n     * @return {String}                                                                                              // 134\n     */                                                                                                              // 135\n    var namespaceToCamel = function (namespace, prefix) {                                                            // 136\n      prefix = prefix || '';                                                                                         // 137\n      return prefix + namespace.split('.').map(function (name) {                                                     // 138\n        return name.substring(0, 1).toUpperCase() + name.substring(1);                                               // 139\n      }).join('');                                                                                                   // 140\n    };                                                                                                               // 141\n                                                                                                                     // 142\n    return {                                                                                                         // 143\n      eq: eq,                                                                                                        // 144\n      eq2: eq2,                                                                                                      // 145\n      peq2: peq2,                                                                                                    // 146\n      ok: ok,                                                                                                        // 147\n      fail: fail,                                                                                                    // 148\n      self: self,                                                                                                    // 149\n      not: not,                                                                                                      // 150\n      and: and,                                                                                                      // 151\n      invoke: invoke,                                                                                                // 152\n      uniqueId: uniqueId,                                                                                            // 153\n      rect2bnd: rect2bnd,                                                                                            // 154\n      invertObject: invertObject,                                                                                    // 155\n      namespaceToCamel: namespaceToCamel                                                                             // 156\n    };                                                                                                               // 157\n  })();                                                                                                              // 158\n                                                                                                                     // 159\n  /**                                                                                                                // 160\n   * @class core.list                                                                                                // 161\n   *                                                                                                                 // 162\n   * list utils                                                                                                      // 163\n   *                                                                                                                 // 164\n   * @singleton                                                                                                      // 165\n   * @alternateClassName list                                                                                        // 166\n   */                                                                                                                // 167\n  var list = (function () {                                                                                          // 168\n    /**                                                                                                              // 169\n     * returns the first item of an array.                                                                           // 170\n     *                                                                                                               // 171\n     * @param {Array} array                                                                                          // 172\n     */                                                                                                              // 173\n    var head = function (array) {                                                                                    // 174\n      return array[0];                                                                                               // 175\n    };                                                                                                               // 176\n                                                                                                                     // 177\n    /**                                                                                                              // 178\n     * returns the last item of an array.                                                                            // 179\n     *                                                                                                               // 180\n     * @param {Array} array                                                                                          // 181\n     */                                                                                                              // 182\n    var last = function (array) {                                                                                    // 183\n      return array[array.length - 1];                                                                                // 184\n    };                                                                                                               // 185\n                                                                                                                     // 186\n    /**                                                                                                              // 187\n     * returns everything but the last entry of the array.                                                           // 188\n     *                                                                                                               // 189\n     * @param {Array} array                                                                                          // 190\n     */                                                                                                              // 191\n    var initial = function (array) {                                                                                 // 192\n      return array.slice(0, array.length - 1);                                                                       // 193\n    };                                                                                                               // 194\n                                                                                                                     // 195\n    /**                                                                                                              // 196\n     * returns the rest of the items in an array.                                                                    // 197\n     *                                                                                                               // 198\n     * @param {Array} array                                                                                          // 199\n     */                                                                                                              // 200\n    var tail = function (array) {                                                                                    // 201\n      return array.slice(1);                                                                                         // 202\n    };                                                                                                               // 203\n                                                                                                                     // 204\n    /**                                                                                                              // 205\n     * returns item of array                                                                                         // 206\n     */                                                                                                              // 207\n    var find = function (array, pred) {                                                                              // 208\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                     // 209\n        var item = array[idx];                                                                                       // 210\n        if (pred(item)) {                                                                                            // 211\n          return item;                                                                                               // 212\n        }                                                                                                            // 213\n      }                                                                                                              // 214\n    };                                                                                                               // 215\n                                                                                                                     // 216\n    /**                                                                                                              // 217\n     * returns true if all of the values in the array pass the predicate truth test.                                 // 218\n     */                                                                                                              // 219\n    var all = function (array, pred) {                                                                               // 220\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                     // 221\n        if (!pred(array[idx])) {                                                                                     // 222\n          return false;                                                                                              // 223\n        }                                                                                                            // 224\n      }                                                                                                              // 225\n      return true;                                                                                                   // 226\n    };                                                                                                               // 227\n                                                                                                                     // 228\n    /**                                                                                                              // 229\n     * returns index of item                                                                                         // 230\n     */                                                                                                              // 231\n    var indexOf = function (array, item) {                                                                           // 232\n      return $.inArray(item, array);                                                                                 // 233\n    };                                                                                                               // 234\n                                                                                                                     // 235\n    /**                                                                                                              // 236\n     * returns true if the value is present in the list.                                                             // 237\n     */                                                                                                              // 238\n    var contains = function (array, item) {                                                                          // 239\n      return indexOf(array, item) !== -1;                                                                            // 240\n    };                                                                                                               // 241\n                                                                                                                     // 242\n    /**                                                                                                              // 243\n     * get sum from a list                                                                                           // 244\n     *                                                                                                               // 245\n     * @param {Array} array - array                                                                                  // 246\n     * @param {Function} fn - iterator                                                                               // 247\n     */                                                                                                              // 248\n    var sum = function (array, fn) {                                                                                 // 249\n      fn = fn || func.self;                                                                                          // 250\n      return array.reduce(function (memo, v) {                                                                       // 251\n        return memo + fn(v);                                                                                         // 252\n      }, 0);                                                                                                         // 253\n    };                                                                                                               // 254\n                                                                                                                     // 255\n    /**                                                                                                              // 256\n     * returns a copy of the collection with array type.                                                             // 257\n     * @param {Collection} collection - collection eg) node.childNodes, ...                                          // 258\n     */                                                                                                              // 259\n    var from = function (collection) {                                                                               // 260\n      var result = [], idx = -1, length = collection.length;                                                         // 261\n      while (++idx < length) {                                                                                       // 262\n        result[idx] = collection[idx];                                                                               // 263\n      }                                                                                                              // 264\n      return result;                                                                                                 // 265\n    };                                                                                                               // 266\n                                                                                                                     // 267\n    /**                                                                                                              // 268\n     * returns whether list is empty or not                                                                          // 269\n     */                                                                                                              // 270\n    var isEmpty = function (array) {                                                                                 // 271\n      return !array || !array.length;                                                                                // 272\n    };                                                                                                               // 273\n                                                                                                                     // 274\n    /**                                                                                                              // 275\n     * cluster elements by predicate function.                                                                       // 276\n     *                                                                                                               // 277\n     * @param {Array} array - array                                                                                  // 278\n     * @param {Function} fn - predicate function for cluster rule                                                    // 279\n     * @param {Array[]}                                                                                              // 280\n     */                                                                                                              // 281\n    var clusterBy = function (array, fn) {                                                                           // 282\n      if (!array.length) { return []; }                                                                              // 283\n      var aTail = tail(array);                                                                                       // 284\n      return aTail.reduce(function (memo, v) {                                                                       // 285\n        var aLast = last(memo);                                                                                      // 286\n        if (fn(last(aLast), v)) {                                                                                    // 287\n          aLast[aLast.length] = v;                                                                                   // 288\n        } else {                                                                                                     // 289\n          memo[memo.length] = [v];                                                                                   // 290\n        }                                                                                                            // 291\n        return memo;                                                                                                 // 292\n      }, [[head(array)]]);                                                                                           // 293\n    };                                                                                                               // 294\n                                                                                                                     // 295\n    /**                                                                                                              // 296\n     * returns a copy of the array with all falsy values removed                                                     // 297\n     *                                                                                                               // 298\n     * @param {Array} array - array                                                                                  // 299\n     * @param {Function} fn - predicate function for cluster rule                                                    // 300\n     */                                                                                                              // 301\n    var compact = function (array) {                                                                                 // 302\n      var aResult = [];                                                                                              // 303\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                     // 304\n        if (array[idx]) { aResult.push(array[idx]); }                                                                // 305\n      }                                                                                                              // 306\n      return aResult;                                                                                                // 307\n    };                                                                                                               // 308\n                                                                                                                     // 309\n    /**                                                                                                              // 310\n     * produces a duplicate-free version of the array                                                                // 311\n     *                                                                                                               // 312\n     * @param {Array} array                                                                                          // 313\n     */                                                                                                              // 314\n    var unique = function (array) {                                                                                  // 315\n      var results = [];                                                                                              // 316\n                                                                                                                     // 317\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                     // 318\n        if (!contains(results, array[idx])) {                                                                        // 319\n          results.push(array[idx]);                                                                                  // 320\n        }                                                                                                            // 321\n      }                                                                                                              // 322\n                                                                                                                     // 323\n      return results;                                                                                                // 324\n    };                                                                                                               // 325\n                                                                                                                     // 326\n    /**                                                                                                              // 327\n     * returns next item.                                                                                            // 328\n     * @param {Array} array                                                                                          // 329\n     */                                                                                                              // 330\n    var next = function (array, item) {                                                                              // 331\n      var idx = indexOf(array, item);                                                                                // 332\n      if (idx === -1) { return null; }                                                                               // 333\n                                                                                                                     // 334\n      return array[idx + 1];                                                                                         // 335\n    };                                                                                                               // 336\n                                                                                                                     // 337\n    /**                                                                                                              // 338\n     * returns prev item.                                                                                            // 339\n     * @param {Array} array                                                                                          // 340\n     */                                                                                                              // 341\n    var prev = function (array, item) {                                                                              // 342\n      var idx = indexOf(array, item);                                                                                // 343\n      if (idx === -1) { return null; }                                                                               // 344\n                                                                                                                     // 345\n      return array[idx - 1];                                                                                         // 346\n    };                                                                                                               // 347\n                                                                                                                     // 348\n    return { head: head, last: last, initial: initial, tail: tail,                                                   // 349\n             prev: prev, next: next, find: find, contains: contains,                                                 // 350\n             all: all, sum: sum, from: from, isEmpty: isEmpty,                                                       // 351\n             clusterBy: clusterBy, compact: compact, unique: unique };                                               // 352\n  })();                                                                                                              // 353\n                                                                                                                     // 354\n  var isSupportAmd = typeof define === 'function' && define.amd;                                                     // 355\n                                                                                                                     // 356\n  /**                                                                                                                // 357\n   * returns whether font is installed or not.                                                                       // 358\n   *                                                                                                                 // 359\n   * @param {String} fontName                                                                                        // 360\n   * @return {Boolean}                                                                                               // 361\n   */                                                                                                                // 362\n  var isFontInstalled = function (fontName) {                                                                        // 363\n    var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS';                               // 364\n    var $tester = $('<div>').css({                                                                                   // 365\n      position: 'absolute',                                                                                          // 366\n      left: '-9999px',                                                                                               // 367\n      top: '-9999px',                                                                                                // 368\n      fontSize: '200px'                                                                                              // 369\n    }).text('mmmmmmmmmwwwwwww').appendTo(document.body);                                                             // 370\n                                                                                                                     // 371\n    var originalWidth = $tester.css('fontFamily', testFontName).width();                                             // 372\n    var width = $tester.css('fontFamily', fontName + ',' + testFontName).width();                                    // 373\n                                                                                                                     // 374\n    $tester.remove();                                                                                                // 375\n                                                                                                                     // 376\n    return originalWidth !== width;                                                                                  // 377\n  };                                                                                                                 // 378\n                                                                                                                     // 379\n  var userAgent = navigator.userAgent;                                                                               // 380\n  var isMSIE = /MSIE|Trident/i.test(userAgent);                                                                      // 381\n  var browserVersion;                                                                                                // 382\n  if (isMSIE) {                                                                                                      // 383\n    var matches = /MSIE (\\d+[.]\\d+)/.exec(userAgent);                                                                // 384\n    if (matches) {                                                                                                   // 385\n      browserVersion = parseFloat(matches[1]);                                                                       // 386\n    }                                                                                                                // 387\n    matches = /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(userAgent);                                                // 388\n    if (matches) {                                                                                                   // 389\n      browserVersion = parseFloat(matches[1]);                                                                       // 390\n    }                                                                                                                // 391\n  }                                                                                                                  // 392\n                                                                                                                     // 393\n  var isEdge = /Edge\\/\\d+/.test(userAgent);                                                                          // 394\n                                                                                                                     // 395\n  var hasCodeMirror = !!window.CodeMirror;                                                                           // 396\n  if (!hasCodeMirror && isSupportAmd && require) {                                                                   // 397\n    if (require.hasOwnProperty('resolve')) {                                                                         // 398\n      try {                                                                                                          // 399\n        // If CodeMirror can't be resolved, `require.resolve` will throw an                                          // 400\n        // exception and `hasCodeMirror` won't be set to `true`.                                                     // 401\n        require.resolve('codemirror');                                                                               // 402\n        hasCodeMirror = true;                                                                                        // 403\n      } catch (e) {                                                                                                  // 404\n        hasCodeMirror = false;                                                                                       // 405\n      }                                                                                                              // 406\n    } else if (require.hasOwnProperty('specified')) {                                                                // 407\n      hasCodeMirror = require.specified('codemirror');                                                               // 408\n    }                                                                                                                // 409\n  }                                                                                                                  // 410\n                                                                                                                     // 411\n  /**                                                                                                                // 412\n   * @class core.agent                                                                                               // 413\n   *                                                                                                                 // 414\n   * Object which check platform and agent                                                                           // 415\n   *                                                                                                                 // 416\n   * @singleton                                                                                                      // 417\n   * @alternateClassName agent                                                                                       // 418\n   */                                                                                                                // 419\n  var agent = {                                                                                                      // 420\n    isMac: navigator.appVersion.indexOf('Mac') > -1,                                                                 // 421\n    isMSIE: isMSIE,                                                                                                  // 422\n    isEdge: isEdge,                                                                                                  // 423\n    isFF: !isEdge && /firefox/i.test(userAgent),                                                                     // 424\n    isPhantom: /PhantomJS/i.test(userAgent),                                                                         // 425\n    isWebkit: !isEdge && /webkit/i.test(userAgent),                                                                  // 426\n    isChrome: !isEdge && /chrome/i.test(userAgent),                                                                  // 427\n    isSafari: !isEdge && /safari/i.test(userAgent),                                                                  // 428\n    browserVersion: browserVersion,                                                                                  // 429\n    jqueryVersion: parseFloat($.fn.jquery),                                                                          // 430\n    isSupportAmd: isSupportAmd,                                                                                      // 431\n    hasCodeMirror: hasCodeMirror,                                                                                    // 432\n    isFontInstalled: isFontInstalled,                                                                                // 433\n    isW3CRangeSupport: !!document.createRange                                                                        // 434\n  };                                                                                                                 // 435\n                                                                                                                     // 436\n                                                                                                                     // 437\n  var NBSP_CHAR = String.fromCharCode(160);                                                                          // 438\n  var ZERO_WIDTH_NBSP_CHAR = '\\ufeff';                                                                               // 439\n                                                                                                                     // 440\n  /**                                                                                                                // 441\n   * @class core.dom                                                                                                 // 442\n   *                                                                                                                 // 443\n   * Dom functions                                                                                                   // 444\n   *                                                                                                                 // 445\n   * @singleton                                                                                                      // 446\n   * @alternateClassName dom                                                                                         // 447\n   */                                                                                                                // 448\n  var dom = (function () {                                                                                           // 449\n    /**                                                                                                              // 450\n     * @method isEditable                                                                                            // 451\n     *                                                                                                               // 452\n     * returns whether node is `note-editable` or not.                                                               // 453\n     *                                                                                                               // 454\n     * @param {Node} node                                                                                            // 455\n     * @return {Boolean}                                                                                             // 456\n     */                                                                                                              // 457\n    var isEditable = function (node) {                                                                               // 458\n      return node && $(node).hasClass('note-editable');                                                              // 459\n    };                                                                                                               // 460\n                                                                                                                     // 461\n    /**                                                                                                              // 462\n     * @method isControlSizing                                                                                       // 463\n     *                                                                                                               // 464\n     * returns whether node is `note-control-sizing` or not.                                                         // 465\n     *                                                                                                               // 466\n     * @param {Node} node                                                                                            // 467\n     * @return {Boolean}                                                                                             // 468\n     */                                                                                                              // 469\n    var isControlSizing = function (node) {                                                                          // 470\n      return node && $(node).hasClass('note-control-sizing');                                                        // 471\n    };                                                                                                               // 472\n                                                                                                                     // 473\n    /**                                                                                                              // 474\n     * @method makePredByNodeName                                                                                    // 475\n     *                                                                                                               // 476\n     * returns predicate which judge whether nodeName is same                                                        // 477\n     *                                                                                                               // 478\n     * @param {String} nodeName                                                                                      // 479\n     * @return {Function}                                                                                            // 480\n     */                                                                                                              // 481\n    var makePredByNodeName = function (nodeName) {                                                                   // 482\n      nodeName = nodeName.toUpperCase();                                                                             // 483\n      return function (node) {                                                                                       // 484\n        return node && node.nodeName.toUpperCase() === nodeName;                                                     // 485\n      };                                                                                                             // 486\n    };                                                                                                               // 487\n                                                                                                                     // 488\n    /**                                                                                                              // 489\n     * @method isText                                                                                                // 490\n     *                                                                                                               // 491\n     *                                                                                                               // 492\n     *                                                                                                               // 493\n     * @param {Node} node                                                                                            // 494\n     * @return {Boolean} true if node's type is text(3)                                                              // 495\n     */                                                                                                              // 496\n    var isText = function (node) {                                                                                   // 497\n      return node && node.nodeType === 3;                                                                            // 498\n    };                                                                                                               // 499\n                                                                                                                     // 500\n    /**                                                                                                              // 501\n     * @method isElement                                                                                             // 502\n     *                                                                                                               // 503\n     *                                                                                                               // 504\n     *                                                                                                               // 505\n     * @param {Node} node                                                                                            // 506\n     * @return {Boolean} true if node's type is element(1)                                                           // 507\n     */                                                                                                              // 508\n    var isElement = function (node) {                                                                                // 509\n      return node && node.nodeType === 1;                                                                            // 510\n    };                                                                                                               // 511\n                                                                                                                     // 512\n    /**                                                                                                              // 513\n     * ex) br, col, embed, hr, img, input, ...                                                                       // 514\n     * @see http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements                                   // 515\n     */                                                                                                              // 516\n    var isVoid = function (node) {                                                                                   // 517\n      return node && /^BR|^IMG|^HR|^IFRAME|^BUTTON/.test(node.nodeName.toUpperCase());                               // 518\n    };                                                                                                               // 519\n                                                                                                                     // 520\n    var isPara = function (node) {                                                                                   // 521\n      if (isEditable(node)) {                                                                                        // 522\n        return false;                                                                                                // 523\n      }                                                                                                              // 524\n                                                                                                                     // 525\n      // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph                                                            // 526\n      return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase());                                        // 527\n    };                                                                                                               // 528\n                                                                                                                     // 529\n    var isHeading = function (node) {                                                                                // 530\n      return node && /^H[1-7]/.test(node.nodeName.toUpperCase());                                                    // 531\n    };                                                                                                               // 532\n                                                                                                                     // 533\n    var isPre = makePredByNodeName('PRE');                                                                           // 534\n                                                                                                                     // 535\n    var isLi = makePredByNodeName('LI');                                                                             // 536\n                                                                                                                     // 537\n    var isPurePara = function (node) {                                                                               // 538\n      return isPara(node) && !isLi(node);                                                                            // 539\n    };                                                                                                               // 540\n                                                                                                                     // 541\n    var isTable = makePredByNodeName('TABLE');                                                                       // 542\n                                                                                                                     // 543\n    var isInline = function (node) {                                                                                 // 544\n      return !isBodyContainer(node) &&                                                                               // 545\n             !isList(node) &&                                                                                        // 546\n             !isHr(node) &&                                                                                          // 547\n             !isPara(node) &&                                                                                        // 548\n             !isTable(node) &&                                                                                       // 549\n             !isBlockquote(node);                                                                                    // 550\n    };                                                                                                               // 551\n                                                                                                                     // 552\n    var isList = function (node) {                                                                                   // 553\n      return node && /^UL|^OL/.test(node.nodeName.toUpperCase());                                                    // 554\n    };                                                                                                               // 555\n                                                                                                                     // 556\n    var isHr = makePredByNodeName('HR');                                                                             // 557\n                                                                                                                     // 558\n    var isCell = function (node) {                                                                                   // 559\n      return node && /^TD|^TH/.test(node.nodeName.toUpperCase());                                                    // 560\n    };                                                                                                               // 561\n                                                                                                                     // 562\n    var isBlockquote = makePredByNodeName('BLOCKQUOTE');                                                             // 563\n                                                                                                                     // 564\n    var isBodyContainer = function (node) {                                                                          // 565\n      return isCell(node) || isBlockquote(node) || isEditable(node);                                                 // 566\n    };                                                                                                               // 567\n                                                                                                                     // 568\n    var isAnchor = makePredByNodeName('A');                                                                          // 569\n                                                                                                                     // 570\n    var isParaInline = function (node) {                                                                             // 571\n      return isInline(node) && !!ancestor(node, isPara);                                                             // 572\n    };                                                                                                               // 573\n                                                                                                                     // 574\n    var isBodyInline = function (node) {                                                                             // 575\n      return isInline(node) && !ancestor(node, isPara);                                                              // 576\n    };                                                                                                               // 577\n                                                                                                                     // 578\n    var isBody = makePredByNodeName('BODY');                                                                         // 579\n                                                                                                                     // 580\n    /**                                                                                                              // 581\n     * returns whether nodeB is closest sibling of nodeA                                                             // 582\n     *                                                                                                               // 583\n     * @param {Node} nodeA                                                                                           // 584\n     * @param {Node} nodeB                                                                                           // 585\n     * @return {Boolean}                                                                                             // 586\n     */                                                                                                              // 587\n    var isClosestSibling = function (nodeA, nodeB) {                                                                 // 588\n      return nodeA.nextSibling === nodeB ||                                                                          // 589\n             nodeA.previousSibling === nodeB;                                                                        // 590\n    };                                                                                                               // 591\n                                                                                                                     // 592\n    /**                                                                                                              // 593\n     * returns array of closest siblings with node                                                                   // 594\n     *                                                                                                               // 595\n     * @param {Node} node                                                                                            // 596\n     * @param {function} [pred] - predicate function                                                                 // 597\n     * @return {Node[]}                                                                                              // 598\n     */                                                                                                              // 599\n    var withClosestSiblings = function (node, pred) {                                                                // 600\n      pred = pred || func.ok;                                                                                        // 601\n                                                                                                                     // 602\n      var siblings = [];                                                                                             // 603\n      if (node.previousSibling && pred(node.previousSibling)) {                                                      // 604\n        siblings.push(node.previousSibling);                                                                         // 605\n      }                                                                                                              // 606\n      siblings.push(node);                                                                                           // 607\n      if (node.nextSibling && pred(node.nextSibling)) {                                                              // 608\n        siblings.push(node.nextSibling);                                                                             // 609\n      }                                                                                                              // 610\n      return siblings;                                                                                               // 611\n    };                                                                                                               // 612\n                                                                                                                     // 613\n    /**                                                                                                              // 614\n     * blank HTML for cursor position                                                                                // 615\n     * - [workaround] old IE only works with &nbsp;                                                                  // 616\n     * - [workaround] IE11 and other browser works with bogus br                                                     // 617\n     */                                                                                                              // 618\n    var blankHTML = agent.isMSIE && agent.browserVersion < 11 ? '&nbsp;' : '<br>';                                   // 619\n                                                                                                                     // 620\n    /**                                                                                                              // 621\n     * @method nodeLength                                                                                            // 622\n     *                                                                                                               // 623\n     * returns #text's text size or element's childNodes size                                                        // 624\n     *                                                                                                               // 625\n     * @param {Node} node                                                                                            // 626\n     */                                                                                                              // 627\n    var nodeLength = function (node) {                                                                               // 628\n      if (isText(node)) {                                                                                            // 629\n        return node.nodeValue.length;                                                                                // 630\n      }                                                                                                              // 631\n                                                                                                                     // 632\n      return node.childNodes.length;                                                                                 // 633\n    };                                                                                                               // 634\n                                                                                                                     // 635\n    /**                                                                                                              // 636\n     * returns whether node is empty or not.                                                                         // 637\n     *                                                                                                               // 638\n     * @param {Node} node                                                                                            // 639\n     * @return {Boolean}                                                                                             // 640\n     */                                                                                                              // 641\n    var isEmpty = function (node) {                                                                                  // 642\n      var len = nodeLength(node);                                                                                    // 643\n                                                                                                                     // 644\n      if (len === 0) {                                                                                               // 645\n        return true;                                                                                                 // 646\n      } else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {                                       // 647\n        // ex) <p><br></p>, <span><br></span>                                                                        // 648\n        return true;                                                                                                 // 649\n      } else if (list.all(node.childNodes, isText) && node.innerHTML === '') {                                       // 650\n        // ex) <p></p>, <span></span>                                                                                // 651\n        return true;                                                                                                 // 652\n      }                                                                                                              // 653\n                                                                                                                     // 654\n      return false;                                                                                                  // 655\n    };                                                                                                               // 656\n                                                                                                                     // 657\n    /**                                                                                                              // 658\n     * padding blankHTML if node is empty (for cursor position)                                                      // 659\n     */                                                                                                              // 660\n    var paddingBlankHTML = function (node) {                                                                         // 661\n      if (!isVoid(node) && !nodeLength(node)) {                                                                      // 662\n        node.innerHTML = blankHTML;                                                                                  // 663\n      }                                                                                                              // 664\n    };                                                                                                               // 665\n                                                                                                                     // 666\n    /**                                                                                                              // 667\n     * find nearest ancestor predicate hit                                                                           // 668\n     *                                                                                                               // 669\n     * @param {Node} node                                                                                            // 670\n     * @param {Function} pred - predicate function                                                                   // 671\n     */                                                                                                              // 672\n    var ancestor = function (node, pred) {                                                                           // 673\n      while (node) {                                                                                                 // 674\n        if (pred(node)) { return node; }                                                                             // 675\n        if (isEditable(node)) { break; }                                                                             // 676\n                                                                                                                     // 677\n        node = node.parentNode;                                                                                      // 678\n      }                                                                                                              // 679\n      return null;                                                                                                   // 680\n    };                                                                                                               // 681\n                                                                                                                     // 682\n    /**                                                                                                              // 683\n     * find nearest ancestor only single child blood line and predicate hit                                          // 684\n     *                                                                                                               // 685\n     * @param {Node} node                                                                                            // 686\n     * @param {Function} pred - predicate function                                                                   // 687\n     */                                                                                                              // 688\n    var singleChildAncestor = function (node, pred) {                                                                // 689\n      node = node.parentNode;                                                                                        // 690\n                                                                                                                     // 691\n      while (node) {                                                                                                 // 692\n        if (nodeLength(node) !== 1) { break; }                                                                       // 693\n        if (pred(node)) { return node; }                                                                             // 694\n        if (isEditable(node)) { break; }                                                                             // 695\n                                                                                                                     // 696\n        node = node.parentNode;                                                                                      // 697\n      }                                                                                                              // 698\n      return null;                                                                                                   // 699\n    };                                                                                                               // 700\n                                                                                                                     // 701\n    /**                                                                                                              // 702\n     * returns new array of ancestor nodes (until predicate hit).                                                    // 703\n     *                                                                                                               // 704\n     * @param {Node} node                                                                                            // 705\n     * @param {Function} [optional] pred - predicate function                                                        // 706\n     */                                                                                                              // 707\n    var listAncestor = function (node, pred) {                                                                       // 708\n      pred = pred || func.fail;                                                                                      // 709\n                                                                                                                     // 710\n      var ancestors = [];                                                                                            // 711\n      ancestor(node, function (el) {                                                                                 // 712\n        if (!isEditable(el)) {                                                                                       // 713\n          ancestors.push(el);                                                                                        // 714\n        }                                                                                                            // 715\n                                                                                                                     // 716\n        return pred(el);                                                                                             // 717\n      });                                                                                                            // 718\n      return ancestors;                                                                                              // 719\n    };                                                                                                               // 720\n                                                                                                                     // 721\n    /**                                                                                                              // 722\n     * find farthest ancestor predicate hit                                                                          // 723\n     */                                                                                                              // 724\n    var lastAncestor = function (node, pred) {                                                                       // 725\n      var ancestors = listAncestor(node);                                                                            // 726\n      return list.last(ancestors.filter(pred));                                                                      // 727\n    };                                                                                                               // 728\n                                                                                                                     // 729\n    /**                                                                                                              // 730\n     * returns common ancestor node between two nodes.                                                               // 731\n     *                                                                                                               // 732\n     * @param {Node} nodeA                                                                                           // 733\n     * @param {Node} nodeB                                                                                           // 734\n     */                                                                                                              // 735\n    var commonAncestor = function (nodeA, nodeB) {                                                                   // 736\n      var ancestors = listAncestor(nodeA);                                                                           // 737\n      for (var n = nodeB; n; n = n.parentNode) {                                                                     // 738\n        if ($.inArray(n, ancestors) > -1) { return n; }                                                              // 739\n      }                                                                                                              // 740\n      return null; // difference document area                                                                       // 741\n    };                                                                                                               // 742\n                                                                                                                     // 743\n    /**                                                                                                              // 744\n     * listing all previous siblings (until predicate hit).                                                          // 745\n     *                                                                                                               // 746\n     * @param {Node} node                                                                                            // 747\n     * @param {Function} [optional] pred - predicate function                                                        // 748\n     */                                                                                                              // 749\n    var listPrev = function (node, pred) {                                                                           // 750\n      pred = pred || func.fail;                                                                                      // 751\n                                                                                                                     // 752\n      var nodes = [];                                                                                                // 753\n      while (node) {                                                                                                 // 754\n        if (pred(node)) { break; }                                                                                   // 755\n        nodes.push(node);                                                                                            // 756\n        node = node.previousSibling;                                                                                 // 757\n      }                                                                                                              // 758\n      return nodes;                                                                                                  // 759\n    };                                                                                                               // 760\n                                                                                                                     // 761\n    /**                                                                                                              // 762\n     * listing next siblings (until predicate hit).                                                                  // 763\n     *                                                                                                               // 764\n     * @param {Node} node                                                                                            // 765\n     * @param {Function} [pred] - predicate function                                                                 // 766\n     */                                                                                                              // 767\n    var listNext = function (node, pred) {                                                                           // 768\n      pred = pred || func.fail;                                                                                      // 769\n                                                                                                                     // 770\n      var nodes = [];                                                                                                // 771\n      while (node) {                                                                                                 // 772\n        if (pred(node)) { break; }                                                                                   // 773\n        nodes.push(node);                                                                                            // 774\n        node = node.nextSibling;                                                                                     // 775\n      }                                                                                                              // 776\n      return nodes;                                                                                                  // 777\n    };                                                                                                               // 778\n                                                                                                                     // 779\n    /**                                                                                                              // 780\n     * listing descendant nodes                                                                                      // 781\n     *                                                                                                               // 782\n     * @param {Node} node                                                                                            // 783\n     * @param {Function} [pred] - predicate function                                                                 // 784\n     */                                                                                                              // 785\n    var listDescendant = function (node, pred) {                                                                     // 786\n      var descendants = [];                                                                                          // 787\n      pred = pred || func.ok;                                                                                        // 788\n                                                                                                                     // 789\n      // start DFS(depth first search) with node                                                                     // 790\n      (function fnWalk(current) {                                                                                    // 791\n        if (node !== current && pred(current)) {                                                                     // 792\n          descendants.push(current);                                                                                 // 793\n        }                                                                                                            // 794\n        for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {                                       // 795\n          fnWalk(current.childNodes[idx]);                                                                           // 796\n        }                                                                                                            // 797\n      })(node);                                                                                                      // 798\n                                                                                                                     // 799\n      return descendants;                                                                                            // 800\n    };                                                                                                               // 801\n                                                                                                                     // 802\n    /**                                                                                                              // 803\n     * wrap node with new tag.                                                                                       // 804\n     *                                                                                                               // 805\n     * @param {Node} node                                                                                            // 806\n     * @param {Node} tagName of wrapper                                                                              // 807\n     * @return {Node} - wrapper                                                                                      // 808\n     */                                                                                                              // 809\n    var wrap = function (node, wrapperName) {                                                                        // 810\n      var parent = node.parentNode;                                                                                  // 811\n      var wrapper = $('<' + wrapperName + '>')[0];                                                                   // 812\n                                                                                                                     // 813\n      parent.insertBefore(wrapper, node);                                                                            // 814\n      wrapper.appendChild(node);                                                                                     // 815\n                                                                                                                     // 816\n      return wrapper;                                                                                                // 817\n    };                                                                                                               // 818\n                                                                                                                     // 819\n    /**                                                                                                              // 820\n     * insert node after preceding                                                                                   // 821\n     *                                                                                                               // 822\n     * @param {Node} node                                                                                            // 823\n     * @param {Node} preceding - predicate function                                                                  // 824\n     */                                                                                                              // 825\n    var insertAfter = function (node, preceding) {                                                                   // 826\n      var next = preceding.nextSibling, parent = preceding.parentNode;                                               // 827\n      if (next) {                                                                                                    // 828\n        parent.insertBefore(node, next);                                                                             // 829\n      } else {                                                                                                       // 830\n        parent.appendChild(node);                                                                                    // 831\n      }                                                                                                              // 832\n      return node;                                                                                                   // 833\n    };                                                                                                               // 834\n                                                                                                                     // 835\n    /**                                                                                                              // 836\n     * append elements.                                                                                              // 837\n     *                                                                                                               // 838\n     * @param {Node} node                                                                                            // 839\n     * @param {Collection} aChild                                                                                    // 840\n     */                                                                                                              // 841\n    var appendChildNodes = function (node, aChild) {                                                                 // 842\n      $.each(aChild, function (idx, child) {                                                                         // 843\n        node.appendChild(child);                                                                                     // 844\n      });                                                                                                            // 845\n      return node;                                                                                                   // 846\n    };                                                                                                               // 847\n                                                                                                                     // 848\n    /**                                                                                                              // 849\n     * returns whether boundaryPoint is left edge or not.                                                            // 850\n     *                                                                                                               // 851\n     * @param {BoundaryPoint} point                                                                                  // 852\n     * @return {Boolean}                                                                                             // 853\n     */                                                                                                              // 854\n    var isLeftEdgePoint = function (point) {                                                                         // 855\n      return point.offset === 0;                                                                                     // 856\n    };                                                                                                               // 857\n                                                                                                                     // 858\n    /**                                                                                                              // 859\n     * returns whether boundaryPoint is right edge or not.                                                           // 860\n     *                                                                                                               // 861\n     * @param {BoundaryPoint} point                                                                                  // 862\n     * @return {Boolean}                                                                                             // 863\n     */                                                                                                              // 864\n    var isRightEdgePoint = function (point) {                                                                        // 865\n      return point.offset === nodeLength(point.node);                                                                // 866\n    };                                                                                                               // 867\n                                                                                                                     // 868\n    /**                                                                                                              // 869\n     * returns whether boundaryPoint is edge or not.                                                                 // 870\n     *                                                                                                               // 871\n     * @param {BoundaryPoint} point                                                                                  // 872\n     * @return {Boolean}                                                                                             // 873\n     */                                                                                                              // 874\n    var isEdgePoint = function (point) {                                                                             // 875\n      return isLeftEdgePoint(point) || isRightEdgePoint(point);                                                      // 876\n    };                                                                                                               // 877\n                                                                                                                     // 878\n    /**                                                                                                              // 879\n     * returns whether node is left edge of ancestor or not.                                                         // 880\n     *                                                                                                               // 881\n     * @param {Node} node                                                                                            // 882\n     * @param {Node} ancestor                                                                                        // 883\n     * @return {Boolean}                                                                                             // 884\n     */                                                                                                              // 885\n    var isLeftEdgeOf = function (node, ancestor) {                                                                   // 886\n      while (node && node !== ancestor) {                                                                            // 887\n        if (position(node) !== 0) {                                                                                  // 888\n          return false;                                                                                              // 889\n        }                                                                                                            // 890\n        node = node.parentNode;                                                                                      // 891\n      }                                                                                                              // 892\n                                                                                                                     // 893\n      return true;                                                                                                   // 894\n    };                                                                                                               // 895\n                                                                                                                     // 896\n    /**                                                                                                              // 897\n     * returns whether node is right edge of ancestor or not.                                                        // 898\n     *                                                                                                               // 899\n     * @param {Node} node                                                                                            // 900\n     * @param {Node} ancestor                                                                                        // 901\n     * @return {Boolean}                                                                                             // 902\n     */                                                                                                              // 903\n    var isRightEdgeOf = function (node, ancestor) {                                                                  // 904\n      while (node && node !== ancestor) {                                                                            // 905\n        if (position(node) !== nodeLength(node.parentNode) - 1) {                                                    // 906\n          return false;                                                                                              // 907\n        }                                                                                                            // 908\n        node = node.parentNode;                                                                                      // 909\n      }                                                                                                              // 910\n                                                                                                                     // 911\n      return true;                                                                                                   // 912\n    };                                                                                                               // 913\n                                                                                                                     // 914\n    /**                                                                                                              // 915\n     * returns whether point is left edge of ancestor or not.                                                        // 916\n     * @param {BoundaryPoint} point                                                                                  // 917\n     * @param {Node} ancestor                                                                                        // 918\n     * @return {Boolean}                                                                                             // 919\n     */                                                                                                              // 920\n    var isLeftEdgePointOf = function (point, ancestor) {                                                             // 921\n      return isLeftEdgePoint(point) && isLeftEdgeOf(point.node, ancestor);                                           // 922\n    };                                                                                                               // 923\n                                                                                                                     // 924\n    /**                                                                                                              // 925\n     * returns whether point is right edge of ancestor or not.                                                       // 926\n     * @param {BoundaryPoint} point                                                                                  // 927\n     * @param {Node} ancestor                                                                                        // 928\n     * @return {Boolean}                                                                                             // 929\n     */                                                                                                              // 930\n    var isRightEdgePointOf = function (point, ancestor) {                                                            // 931\n      return isRightEdgePoint(point) && isRightEdgeOf(point.node, ancestor);                                         // 932\n    };                                                                                                               // 933\n                                                                                                                     // 934\n    /**                                                                                                              // 935\n     * returns offset from parent.                                                                                   // 936\n     *                                                                                                               // 937\n     * @param {Node} node                                                                                            // 938\n     */                                                                                                              // 939\n    var position = function (node) {                                                                                 // 940\n      var offset = 0;                                                                                                // 941\n      while ((node = node.previousSibling)) {                                                                        // 942\n        offset += 1;                                                                                                 // 943\n      }                                                                                                              // 944\n      return offset;                                                                                                 // 945\n    };                                                                                                               // 946\n                                                                                                                     // 947\n    var hasChildren = function (node) {                                                                              // 948\n      return !!(node && node.childNodes && node.childNodes.length);                                                  // 949\n    };                                                                                                               // 950\n                                                                                                                     // 951\n    /**                                                                                                              // 952\n     * returns previous boundaryPoint                                                                                // 953\n     *                                                                                                               // 954\n     * @param {BoundaryPoint} point                                                                                  // 955\n     * @param {Boolean} isSkipInnerOffset                                                                            // 956\n     * @return {BoundaryPoint}                                                                                       // 957\n     */                                                                                                              // 958\n    var prevPoint = function (point, isSkipInnerOffset) {                                                            // 959\n      var node, offset;                                                                                              // 960\n                                                                                                                     // 961\n      if (point.offset === 0) {                                                                                      // 962\n        if (isEditable(point.node)) {                                                                                // 963\n          return null;                                                                                               // 964\n        }                                                                                                            // 965\n                                                                                                                     // 966\n        node = point.node.parentNode;                                                                                // 967\n        offset = position(point.node);                                                                               // 968\n      } else if (hasChildren(point.node)) {                                                                          // 969\n        node = point.node.childNodes[point.offset - 1];                                                              // 970\n        offset = nodeLength(node);                                                                                   // 971\n      } else {                                                                                                       // 972\n        node = point.node;                                                                                           // 973\n        offset = isSkipInnerOffset ? 0 : point.offset - 1;                                                           // 974\n      }                                                                                                              // 975\n                                                                                                                     // 976\n      return {                                                                                                       // 977\n        node: node,                                                                                                  // 978\n        offset: offset                                                                                               // 979\n      };                                                                                                             // 980\n    };                                                                                                               // 981\n                                                                                                                     // 982\n    /**                                                                                                              // 983\n     * returns next boundaryPoint                                                                                    // 984\n     *                                                                                                               // 985\n     * @param {BoundaryPoint} point                                                                                  // 986\n     * @param {Boolean} isSkipInnerOffset                                                                            // 987\n     * @return {BoundaryPoint}                                                                                       // 988\n     */                                                                                                              // 989\n    var nextPoint = function (point, isSkipInnerOffset) {                                                            // 990\n      var node, offset;                                                                                              // 991\n                                                                                                                     // 992\n      if (nodeLength(point.node) === point.offset) {                                                                 // 993\n        if (isEditable(point.node)) {                                                                                // 994\n          return null;                                                                                               // 995\n        }                                                                                                            // 996\n                                                                                                                     // 997\n        node = point.node.parentNode;                                                                                // 998\n        offset = position(point.node) + 1;                                                                           // 999\n      } else if (hasChildren(point.node)) {                                                                          // 1000\n        node = point.node.childNodes[point.offset];                                                                  // 1001\n        offset = 0;                                                                                                  // 1002\n      } else {                                                                                                       // 1003\n        node = point.node;                                                                                           // 1004\n        offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;                                      // 1005\n      }                                                                                                              // 1006\n                                                                                                                     // 1007\n      return {                                                                                                       // 1008\n        node: node,                                                                                                  // 1009\n        offset: offset                                                                                               // 1010\n      };                                                                                                             // 1011\n    };                                                                                                               // 1012\n                                                                                                                     // 1013\n    /**                                                                                                              // 1014\n     * returns whether pointA and pointB is same or not.                                                             // 1015\n     *                                                                                                               // 1016\n     * @param {BoundaryPoint} pointA                                                                                 // 1017\n     * @param {BoundaryPoint} pointB                                                                                 // 1018\n     * @return {Boolean}                                                                                             // 1019\n     */                                                                                                              // 1020\n    var isSamePoint = function (pointA, pointB) {                                                                    // 1021\n      return pointA.node === pointB.node && pointA.offset === pointB.offset;                                         // 1022\n    };                                                                                                               // 1023\n                                                                                                                     // 1024\n    /**                                                                                                              // 1025\n     * returns whether point is visible (can set cursor) or not.                                                     // 1026\n     *                                                                                                               // 1027\n     * @param {BoundaryPoint} point                                                                                  // 1028\n     * @return {Boolean}                                                                                             // 1029\n     */                                                                                                              // 1030\n    var isVisiblePoint = function (point) {                                                                          // 1031\n      if (isText(point.node) || !hasChildren(point.node) || isEmpty(point.node)) {                                   // 1032\n        return true;                                                                                                 // 1033\n      }                                                                                                              // 1034\n                                                                                                                     // 1035\n      var leftNode = point.node.childNodes[point.offset - 1];                                                        // 1036\n      var rightNode = point.node.childNodes[point.offset];                                                           // 1037\n      if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) {                                    // 1038\n        return true;                                                                                                 // 1039\n      }                                                                                                              // 1040\n                                                                                                                     // 1041\n      return false;                                                                                                  // 1042\n    };                                                                                                               // 1043\n                                                                                                                     // 1044\n    /**                                                                                                              // 1045\n     * @method prevPointUtil                                                                                         // 1046\n     *                                                                                                               // 1047\n     * @param {BoundaryPoint} point                                                                                  // 1048\n     * @param {Function} pred                                                                                        // 1049\n     * @return {BoundaryPoint}                                                                                       // 1050\n     */                                                                                                              // 1051\n    var prevPointUntil = function (point, pred) {                                                                    // 1052\n      while (point) {                                                                                                // 1053\n        if (pred(point)) {                                                                                           // 1054\n          return point;                                                                                              // 1055\n        }                                                                                                            // 1056\n                                                                                                                     // 1057\n        point = prevPoint(point);                                                                                    // 1058\n      }                                                                                                              // 1059\n                                                                                                                     // 1060\n      return null;                                                                                                   // 1061\n    };                                                                                                               // 1062\n                                                                                                                     // 1063\n    /**                                                                                                              // 1064\n     * @method nextPointUntil                                                                                        // 1065\n     *                                                                                                               // 1066\n     * @param {BoundaryPoint} point                                                                                  // 1067\n     * @param {Function} pred                                                                                        // 1068\n     * @return {BoundaryPoint}                                                                                       // 1069\n     */                                                                                                              // 1070\n    var nextPointUntil = function (point, pred) {                                                                    // 1071\n      while (point) {                                                                                                // 1072\n        if (pred(point)) {                                                                                           // 1073\n          return point;                                                                                              // 1074\n        }                                                                                                            // 1075\n                                                                                                                     // 1076\n        point = nextPoint(point);                                                                                    // 1077\n      }                                                                                                              // 1078\n                                                                                                                     // 1079\n      return null;                                                                                                   // 1080\n    };                                                                                                               // 1081\n                                                                                                                     // 1082\n    /**                                                                                                              // 1083\n     * returns whether point has character or not.                                                                   // 1084\n     *                                                                                                               // 1085\n     * @param {Point} point                                                                                          // 1086\n     * @return {Boolean}                                                                                             // 1087\n     */                                                                                                              // 1088\n    var isCharPoint = function (point) {                                                                             // 1089\n      if (!isText(point.node)) {                                                                                     // 1090\n        return false;                                                                                                // 1091\n      }                                                                                                              // 1092\n                                                                                                                     // 1093\n      var ch = point.node.nodeValue.charAt(point.offset - 1);                                                        // 1094\n      return ch && (ch !== ' ' && ch !== NBSP_CHAR);                                                                 // 1095\n    };                                                                                                               // 1096\n                                                                                                                     // 1097\n    /**                                                                                                              // 1098\n     * @method walkPoint                                                                                             // 1099\n     *                                                                                                               // 1100\n     * @param {BoundaryPoint} startPoint                                                                             // 1101\n     * @param {BoundaryPoint} endPoint                                                                               // 1102\n     * @param {Function} handler                                                                                     // 1103\n     * @param {Boolean} isSkipInnerOffset                                                                            // 1104\n     */                                                                                                              // 1105\n    var walkPoint = function (startPoint, endPoint, handler, isSkipInnerOffset) {                                    // 1106\n      var point = startPoint;                                                                                        // 1107\n                                                                                                                     // 1108\n      while (point) {                                                                                                // 1109\n        handler(point);                                                                                              // 1110\n                                                                                                                     // 1111\n        if (isSamePoint(point, endPoint)) {                                                                          // 1112\n          break;                                                                                                     // 1113\n        }                                                                                                            // 1114\n                                                                                                                     // 1115\n        var isSkipOffset = isSkipInnerOffset &&                                                                      // 1116\n                           startPoint.node !== point.node &&                                                         // 1117\n                           endPoint.node !== point.node;                                                             // 1118\n        point = nextPoint(point, isSkipOffset);                                                                      // 1119\n      }                                                                                                              // 1120\n    };                                                                                                               // 1121\n                                                                                                                     // 1122\n    /**                                                                                                              // 1123\n     * @method makeOffsetPath                                                                                        // 1124\n     *                                                                                                               // 1125\n     * return offsetPath(array of offset) from ancestor                                                              // 1126\n     *                                                                                                               // 1127\n     * @param {Node} ancestor - ancestor node                                                                        // 1128\n     * @param {Node} node                                                                                            // 1129\n     */                                                                                                              // 1130\n    var makeOffsetPath = function (ancestor, node) {                                                                 // 1131\n      var ancestors = listAncestor(node, func.eq(ancestor));                                                         // 1132\n      return ancestors.map(position).reverse();                                                                      // 1133\n    };                                                                                                               // 1134\n                                                                                                                     // 1135\n    /**                                                                                                              // 1136\n     * @method fromOffsetPath                                                                                        // 1137\n     *                                                                                                               // 1138\n     * return element from offsetPath(array of offset)                                                               // 1139\n     *                                                                                                               // 1140\n     * @param {Node} ancestor - ancestor node                                                                        // 1141\n     * @param {array} offsets - offsetPath                                                                           // 1142\n     */                                                                                                              // 1143\n    var fromOffsetPath = function (ancestor, offsets) {                                                              // 1144\n      var current = ancestor;                                                                                        // 1145\n      for (var i = 0, len = offsets.length; i < len; i++) {                                                          // 1146\n        if (current.childNodes.length <= offsets[i]) {                                                               // 1147\n          current = current.childNodes[current.childNodes.length - 1];                                               // 1148\n        } else {                                                                                                     // 1149\n          current = current.childNodes[offsets[i]];                                                                  // 1150\n        }                                                                                                            // 1151\n      }                                                                                                              // 1152\n      return current;                                                                                                // 1153\n    };                                                                                                               // 1154\n                                                                                                                     // 1155\n    /**                                                                                                              // 1156\n     * @method splitNode                                                                                             // 1157\n     *                                                                                                               // 1158\n     * split element or #text                                                                                        // 1159\n     *                                                                                                               // 1160\n     * @param {BoundaryPoint} point                                                                                  // 1161\n     * @param {Object} [options]                                                                                     // 1162\n     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false                                            // 1163\n     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false                                               // 1164\n     * @return {Node} right node of boundaryPoint                                                                    // 1165\n     */                                                                                                              // 1166\n    var splitNode = function (point, options) {                                                                      // 1167\n      var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML;                                        // 1168\n      var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint;                                              // 1169\n                                                                                                                     // 1170\n      // edge case                                                                                                   // 1171\n      if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {                                       // 1172\n        if (isLeftEdgePoint(point)) {                                                                                // 1173\n          return point.node;                                                                                         // 1174\n        } else if (isRightEdgePoint(point)) {                                                                        // 1175\n          return point.node.nextSibling;                                                                             // 1176\n        }                                                                                                            // 1177\n      }                                                                                                              // 1178\n                                                                                                                     // 1179\n      // split #text                                                                                                 // 1180\n      if (isText(point.node)) {                                                                                      // 1181\n        return point.node.splitText(point.offset);                                                                   // 1182\n      } else {                                                                                                       // 1183\n        var childNode = point.node.childNodes[point.offset];                                                         // 1184\n        var clone = insertAfter(point.node.cloneNode(false), point.node);                                            // 1185\n        appendChildNodes(clone, listNext(childNode));                                                                // 1186\n                                                                                                                     // 1187\n        if (!isSkipPaddingBlankHTML) {                                                                               // 1188\n          paddingBlankHTML(point.node);                                                                              // 1189\n          paddingBlankHTML(clone);                                                                                   // 1190\n        }                                                                                                            // 1191\n                                                                                                                     // 1192\n        return clone;                                                                                                // 1193\n      }                                                                                                              // 1194\n    };                                                                                                               // 1195\n                                                                                                                     // 1196\n    /**                                                                                                              // 1197\n     * @method splitTree                                                                                             // 1198\n     *                                                                                                               // 1199\n     * split tree by point                                                                                           // 1200\n     *                                                                                                               // 1201\n     * @param {Node} root - split root                                                                               // 1202\n     * @param {BoundaryPoint} point                                                                                  // 1203\n     * @param {Object} [options]                                                                                     // 1204\n     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false                                            // 1205\n     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false                                               // 1206\n     * @return {Node} right node of boundaryPoint                                                                    // 1207\n     */                                                                                                              // 1208\n    var splitTree = function (root, point, options) {                                                                // 1209\n      // ex) [#text, <span>, <p>]                                                                                    // 1210\n      var ancestors = listAncestor(point.node, func.eq(root));                                                       // 1211\n                                                                                                                     // 1212\n      if (!ancestors.length) {                                                                                       // 1213\n        return null;                                                                                                 // 1214\n      } else if (ancestors.length === 1) {                                                                           // 1215\n        return splitNode(point, options);                                                                            // 1216\n      }                                                                                                              // 1217\n                                                                                                                     // 1218\n      return ancestors.reduce(function (node, parent) {                                                              // 1219\n        if (node === point.node) {                                                                                   // 1220\n          node = splitNode(point, options);                                                                          // 1221\n        }                                                                                                            // 1222\n                                                                                                                     // 1223\n        return splitNode({                                                                                           // 1224\n          node: parent,                                                                                              // 1225\n          offset: node ? dom.position(node) : nodeLength(parent)                                                     // 1226\n        }, options);                                                                                                 // 1227\n      });                                                                                                            // 1228\n    };                                                                                                               // 1229\n                                                                                                                     // 1230\n    /**                                                                                                              // 1231\n     * split point                                                                                                   // 1232\n     *                                                                                                               // 1233\n     * @param {Point} point                                                                                          // 1234\n     * @param {Boolean} isInline                                                                                     // 1235\n     * @return {Object}                                                                                              // 1236\n     */                                                                                                              // 1237\n    var splitPoint = function (point, isInline) {                                                                    // 1238\n      // find splitRoot, container                                                                                   // 1239\n      //  - inline: splitRoot is a child of paragraph                                                                // 1240\n      //  - block: splitRoot is a child of bodyContainer                                                             // 1241\n      var pred = isInline ? isPara : isBodyContainer;                                                                // 1242\n      var ancestors = listAncestor(point.node, pred);                                                                // 1243\n      var topAncestor = list.last(ancestors) || point.node;                                                          // 1244\n                                                                                                                     // 1245\n      var splitRoot, container;                                                                                      // 1246\n      if (pred(topAncestor)) {                                                                                       // 1247\n        splitRoot = ancestors[ancestors.length - 2];                                                                 // 1248\n        container = topAncestor;                                                                                     // 1249\n      } else {                                                                                                       // 1250\n        splitRoot = topAncestor;                                                                                     // 1251\n        container = splitRoot.parentNode;                                                                            // 1252\n      }                                                                                                              // 1253\n                                                                                                                     // 1254\n      // if splitRoot is exists, split with splitTree                                                                // 1255\n      var pivot = splitRoot && splitTree(splitRoot, point, {                                                         // 1256\n        isSkipPaddingBlankHTML: isInline,                                                                            // 1257\n        isNotSplitEdgePoint: isInline                                                                                // 1258\n      });                                                                                                            // 1259\n                                                                                                                     // 1260\n      // if container is point.node, find pivot with point.offset                                                    // 1261\n      if (!pivot && container === point.node) {                                                                      // 1262\n        pivot = point.node.childNodes[point.offset];                                                                 // 1263\n      }                                                                                                              // 1264\n                                                                                                                     // 1265\n      return {                                                                                                       // 1266\n        rightNode: pivot,                                                                                            // 1267\n        container: container                                                                                         // 1268\n      };                                                                                                             // 1269\n    };                                                                                                               // 1270\n                                                                                                                     // 1271\n    var create = function (nodeName) {                                                                               // 1272\n      return document.createElement(nodeName);                                                                       // 1273\n    };                                                                                                               // 1274\n                                                                                                                     // 1275\n    var createText = function (text) {                                                                               // 1276\n      return document.createTextNode(text);                                                                          // 1277\n    };                                                                                                               // 1278\n                                                                                                                     // 1279\n    /**                                                                                                              // 1280\n     * @method remove                                                                                                // 1281\n     *                                                                                                               // 1282\n     * remove node, (isRemoveChild: remove child or not)                                                             // 1283\n     *                                                                                                               // 1284\n     * @param {Node} node                                                                                            // 1285\n     * @param {Boolean} isRemoveChild                                                                                // 1286\n     */                                                                                                              // 1287\n    var remove = function (node, isRemoveChild) {                                                                    // 1288\n      if (!node || !node.parentNode) { return; }                                                                     // 1289\n      if (node.removeNode) { return node.removeNode(isRemoveChild); }                                                // 1290\n                                                                                                                     // 1291\n      var parent = node.parentNode;                                                                                  // 1292\n      if (!isRemoveChild) {                                                                                          // 1293\n        var nodes = [];                                                                                              // 1294\n        var i, len;                                                                                                  // 1295\n        for (i = 0, len = node.childNodes.length; i < len; i++) {                                                    // 1296\n          nodes.push(node.childNodes[i]);                                                                            // 1297\n        }                                                                                                            // 1298\n                                                                                                                     // 1299\n        for (i = 0, len = nodes.length; i < len; i++) {                                                              // 1300\n          parent.insertBefore(nodes[i], node);                                                                       // 1301\n        }                                                                                                            // 1302\n      }                                                                                                              // 1303\n                                                                                                                     // 1304\n      parent.removeChild(node);                                                                                      // 1305\n    };                                                                                                               // 1306\n                                                                                                                     // 1307\n    /**                                                                                                              // 1308\n     * @method removeWhile                                                                                           // 1309\n     *                                                                                                               // 1310\n     * @param {Node} node                                                                                            // 1311\n     * @param {Function} pred                                                                                        // 1312\n     */                                                                                                              // 1313\n    var removeWhile = function (node, pred) {                                                                        // 1314\n      while (node) {                                                                                                 // 1315\n        if (isEditable(node) || !pred(node)) {                                                                       // 1316\n          break;                                                                                                     // 1317\n        }                                                                                                            // 1318\n                                                                                                                     // 1319\n        var parent = node.parentNode;                                                                                // 1320\n        remove(node);                                                                                                // 1321\n        node = parent;                                                                                               // 1322\n      }                                                                                                              // 1323\n    };                                                                                                               // 1324\n                                                                                                                     // 1325\n    /**                                                                                                              // 1326\n     * @method replace                                                                                               // 1327\n     *                                                                                                               // 1328\n     * replace node with provided nodeName                                                                           // 1329\n     *                                                                                                               // 1330\n     * @param {Node} node                                                                                            // 1331\n     * @param {String} nodeName                                                                                      // 1332\n     * @return {Node} - new node                                                                                     // 1333\n     */                                                                                                              // 1334\n    var replace = function (node, nodeName) {                                                                        // 1335\n      if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {                                                  // 1336\n        return node;                                                                                                 // 1337\n      }                                                                                                              // 1338\n                                                                                                                     // 1339\n      var newNode = create(nodeName);                                                                                // 1340\n                                                                                                                     // 1341\n      if (node.style.cssText) {                                                                                      // 1342\n        newNode.style.cssText = node.style.cssText;                                                                  // 1343\n      }                                                                                                              // 1344\n                                                                                                                     // 1345\n      appendChildNodes(newNode, list.from(node.childNodes));                                                         // 1346\n      insertAfter(newNode, node);                                                                                    // 1347\n      remove(node);                                                                                                  // 1348\n                                                                                                                     // 1349\n      return newNode;                                                                                                // 1350\n    };                                                                                                               // 1351\n                                                                                                                     // 1352\n    var isTextarea = makePredByNodeName('TEXTAREA');                                                                 // 1353\n                                                                                                                     // 1354\n    /**                                                                                                              // 1355\n     * @param {jQuery} $node                                                                                         // 1356\n     * @param {Boolean} [stripLinebreaks] - default: false                                                           // 1357\n     */                                                                                                              // 1358\n    var value = function ($node, stripLinebreaks) {                                                                  // 1359\n      var val = isTextarea($node[0]) ? $node.val() : $node.html();                                                   // 1360\n      if (stripLinebreaks) {                                                                                         // 1361\n        return val.replace(/[\\n\\r]/g, '');                                                                           // 1362\n      }                                                                                                              // 1363\n      return val;                                                                                                    // 1364\n    };                                                                                                               // 1365\n                                                                                                                     // 1366\n    /**                                                                                                              // 1367\n     * @method html                                                                                                  // 1368\n     *                                                                                                               // 1369\n     * get the HTML contents of node                                                                                 // 1370\n     *                                                                                                               // 1371\n     * @param {jQuery} $node                                                                                         // 1372\n     * @param {Boolean} [isNewlineOnBlock]                                                                           // 1373\n     */                                                                                                              // 1374\n    var html = function ($node, isNewlineOnBlock) {                                                                  // 1375\n      var markup = value($node);                                                                                     // 1376\n                                                                                                                     // 1377\n      if (isNewlineOnBlock) {                                                                                        // 1378\n        var regexTag = /<(\\/?)(\\b(?!!)[^>\\s]*)(.*?)(\\s*\\/?>)/g;                                                      // 1379\n        markup = markup.replace(regexTag, function (match, endSlash, name) {                                         // 1380\n          name = name.toUpperCase();                                                                                 // 1381\n          var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) &&                                   // 1382\n                                       !!endSlash;                                                                   // 1383\n          var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name);                                  // 1384\n                                                                                                                     // 1385\n          return match + ((isEndOfInlineContainer || isBlockNode) ? '\\n' : '');                                      // 1386\n        });                                                                                                          // 1387\n        markup = $.trim(markup);                                                                                     // 1388\n      }                                                                                                              // 1389\n                                                                                                                     // 1390\n      return markup;                                                                                                 // 1391\n    };                                                                                                               // 1392\n                                                                                                                     // 1393\n    var posFromPlaceholder = function (placeholder) {                                                                // 1394\n      var $placeholder = $(placeholder);                                                                             // 1395\n      var pos = $placeholder.offset();                                                                               // 1396\n      var height = $placeholder.outerHeight(true); // include margin                                                 // 1397\n                                                                                                                     // 1398\n      return {                                                                                                       // 1399\n        left: pos.left,                                                                                              // 1400\n        top: pos.top + height                                                                                        // 1401\n      };                                                                                                             // 1402\n    };                                                                                                               // 1403\n                                                                                                                     // 1404\n    var attachEvents = function ($node, events) {                                                                    // 1405\n      Object.keys(events).forEach(function (key) {                                                                   // 1406\n        $node.on(key, events[key]);                                                                                  // 1407\n      });                                                                                                            // 1408\n    };                                                                                                               // 1409\n                                                                                                                     // 1410\n    var detachEvents = function ($node, events) {                                                                    // 1411\n      Object.keys(events).forEach(function (key) {                                                                   // 1412\n        $node.off(key, events[key]);                                                                                 // 1413\n      });                                                                                                            // 1414\n    };                                                                                                               // 1415\n                                                                                                                     // 1416\n    return {                                                                                                         // 1417\n      /** @property {String} NBSP_CHAR */                                                                            // 1418\n      NBSP_CHAR: NBSP_CHAR,                                                                                          // 1419\n      /** @property {String} ZERO_WIDTH_NBSP_CHAR */                                                                 // 1420\n      ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR,                                                                    // 1421\n      /** @property {String} blank */                                                                                // 1422\n      blank: blankHTML,                                                                                              // 1423\n      /** @property {String} emptyPara */                                                                            // 1424\n      emptyPara: '<p>' + blankHTML + '</p>',                                                                         // 1425\n      makePredByNodeName: makePredByNodeName,                                                                        // 1426\n      isEditable: isEditable,                                                                                        // 1427\n      isControlSizing: isControlSizing,                                                                              // 1428\n      isText: isText,                                                                                                // 1429\n      isElement: isElement,                                                                                          // 1430\n      isVoid: isVoid,                                                                                                // 1431\n      isPara: isPara,                                                                                                // 1432\n      isPurePara: isPurePara,                                                                                        // 1433\n      isHeading: isHeading,                                                                                          // 1434\n      isInline: isInline,                                                                                            // 1435\n      isBlock: func.not(isInline),                                                                                   // 1436\n      isBodyInline: isBodyInline,                                                                                    // 1437\n      isBody: isBody,                                                                                                // 1438\n      isParaInline: isParaInline,                                                                                    // 1439\n      isPre: isPre,                                                                                                  // 1440\n      isList: isList,                                                                                                // 1441\n      isTable: isTable,                                                                                              // 1442\n      isCell: isCell,                                                                                                // 1443\n      isBlockquote: isBlockquote,                                                                                    // 1444\n      isBodyContainer: isBodyContainer,                                                                              // 1445\n      isAnchor: isAnchor,                                                                                            // 1446\n      isDiv: makePredByNodeName('DIV'),                                                                              // 1447\n      isLi: isLi,                                                                                                    // 1448\n      isBR: makePredByNodeName('BR'),                                                                                // 1449\n      isSpan: makePredByNodeName('SPAN'),                                                                            // 1450\n      isB: makePredByNodeName('B'),                                                                                  // 1451\n      isU: makePredByNodeName('U'),                                                                                  // 1452\n      isS: makePredByNodeName('S'),                                                                                  // 1453\n      isI: makePredByNodeName('I'),                                                                                  // 1454\n      isImg: makePredByNodeName('IMG'),                                                                              // 1455\n      isTextarea: isTextarea,                                                                                        // 1456\n      isEmpty: isEmpty,                                                                                              // 1457\n      isEmptyAnchor: func.and(isAnchor, isEmpty),                                                                    // 1458\n      isClosestSibling: isClosestSibling,                                                                            // 1459\n      withClosestSiblings: withClosestSiblings,                                                                      // 1460\n      nodeLength: nodeLength,                                                                                        // 1461\n      isLeftEdgePoint: isLeftEdgePoint,                                                                              // 1462\n      isRightEdgePoint: isRightEdgePoint,                                                                            // 1463\n      isEdgePoint: isEdgePoint,                                                                                      // 1464\n      isLeftEdgeOf: isLeftEdgeOf,                                                                                    // 1465\n      isRightEdgeOf: isRightEdgeOf,                                                                                  // 1466\n      isLeftEdgePointOf: isLeftEdgePointOf,                                                                          // 1467\n      isRightEdgePointOf: isRightEdgePointOf,                                                                        // 1468\n      prevPoint: prevPoint,                                                                                          // 1469\n      nextPoint: nextPoint,                                                                                          // 1470\n      isSamePoint: isSamePoint,                                                                                      // 1471\n      isVisiblePoint: isVisiblePoint,                                                                                // 1472\n      prevPointUntil: prevPointUntil,                                                                                // 1473\n      nextPointUntil: nextPointUntil,                                                                                // 1474\n      isCharPoint: isCharPoint,                                                                                      // 1475\n      walkPoint: walkPoint,                                                                                          // 1476\n      ancestor: ancestor,                                                                                            // 1477\n      singleChildAncestor: singleChildAncestor,                                                                      // 1478\n      listAncestor: listAncestor,                                                                                    // 1479\n      lastAncestor: lastAncestor,                                                                                    // 1480\n      listNext: listNext,                                                                                            // 1481\n      listPrev: listPrev,                                                                                            // 1482\n      listDescendant: listDescendant,                                                                                // 1483\n      commonAncestor: commonAncestor,                                                                                // 1484\n      wrap: wrap,                                                                                                    // 1485\n      insertAfter: insertAfter,                                                                                      // 1486\n      appendChildNodes: appendChildNodes,                                                                            // 1487\n      position: position,                                                                                            // 1488\n      hasChildren: hasChildren,                                                                                      // 1489\n      makeOffsetPath: makeOffsetPath,                                                                                // 1490\n      fromOffsetPath: fromOffsetPath,                                                                                // 1491\n      splitTree: splitTree,                                                                                          // 1492\n      splitPoint: splitPoint,                                                                                        // 1493\n      create: create,                                                                                                // 1494\n      createText: createText,                                                                                        // 1495\n      remove: remove,                                                                                                // 1496\n      removeWhile: removeWhile,                                                                                      // 1497\n      replace: replace,                                                                                              // 1498\n      html: html,                                                                                                    // 1499\n      value: value,                                                                                                  // 1500\n      posFromPlaceholder: posFromPlaceholder,                                                                        // 1501\n      attachEvents: attachEvents,                                                                                    // 1502\n      detachEvents: detachEvents                                                                                     // 1503\n    };                                                                                                               // 1504\n  })();                                                                                                              // 1505\n                                                                                                                     // 1506\n  /**                                                                                                                // 1507\n   * @param {jQuery} $note                                                                                           // 1508\n   * @param {Object} options                                                                                         // 1509\n   * @return {Context}                                                                                               // 1510\n   */                                                                                                                // 1511\n  var Context = function ($note, options) {                                                                          // 1512\n    var self = this;                                                                                                 // 1513\n                                                                                                                     // 1514\n    var ui = $.summernote.ui;                                                                                        // 1515\n    this.memos = {};                                                                                                 // 1516\n    this.modules = {};                                                                                               // 1517\n    this.layoutInfo = {};                                                                                            // 1518\n    this.options = options;                                                                                          // 1519\n                                                                                                                     // 1520\n    /**                                                                                                              // 1521\n     * create layout and initialize modules and other resources                                                      // 1522\n     */                                                                                                              // 1523\n    this.initialize = function () {                                                                                  // 1524\n      this.layoutInfo = ui.createLayout($note, options);                                                             // 1525\n      this._initialize();                                                                                            // 1526\n      $note.hide();                                                                                                  // 1527\n      return this;                                                                                                   // 1528\n    };                                                                                                               // 1529\n                                                                                                                     // 1530\n    /**                                                                                                              // 1531\n     * destroy modules and other resources and remove layout                                                         // 1532\n     */                                                                                                              // 1533\n    this.destroy = function () {                                                                                     // 1534\n      this._destroy();                                                                                               // 1535\n      $note.removeData('summernote');                                                                                // 1536\n      ui.removeLayout($note, this.layoutInfo);                                                                       // 1537\n    };                                                                                                               // 1538\n                                                                                                                     // 1539\n    /**                                                                                                              // 1540\n     * destory modules and other resources and initialize it again                                                   // 1541\n     */                                                                                                              // 1542\n    this.reset = function () {                                                                                       // 1543\n      var disabled = self.isDisabled();                                                                              // 1544\n      this.code(dom.emptyPara);                                                                                      // 1545\n      this._destroy();                                                                                               // 1546\n      this._initialize();                                                                                            // 1547\n                                                                                                                     // 1548\n      if (disabled) {                                                                                                // 1549\n        self.disable();                                                                                              // 1550\n      }                                                                                                              // 1551\n    };                                                                                                               // 1552\n                                                                                                                     // 1553\n    this._initialize = function () {                                                                                 // 1554\n      // add optional buttons                                                                                        // 1555\n      var buttons = $.extend({}, this.options.buttons);                                                              // 1556\n      Object.keys(buttons).forEach(function (key) {                                                                  // 1557\n        self.memo('button.' + key, buttons[key]);                                                                    // 1558\n      });                                                                                                            // 1559\n                                                                                                                     // 1560\n      var modules = $.extend({}, this.options.modules, $.summernote.plugins || {});                                  // 1561\n                                                                                                                     // 1562\n      // add and initialize modules                                                                                  // 1563\n      Object.keys(modules).forEach(function (key) {                                                                  // 1564\n        self.module(key, modules[key], true);                                                                        // 1565\n      });                                                                                                            // 1566\n                                                                                                                     // 1567\n      Object.keys(this.modules).forEach(function (key) {                                                             // 1568\n        self.initializeModule(key);                                                                                  // 1569\n      });                                                                                                            // 1570\n    };                                                                                                               // 1571\n                                                                                                                     // 1572\n    this._destroy = function () {                                                                                    // 1573\n      // destroy modules with reversed order                                                                         // 1574\n      Object.keys(this.modules).reverse().forEach(function (key) {                                                   // 1575\n        self.removeModule(key);                                                                                      // 1576\n      });                                                                                                            // 1577\n                                                                                                                     // 1578\n      Object.keys(this.memos).forEach(function (key) {                                                               // 1579\n        self.removeMemo(key);                                                                                        // 1580\n      });                                                                                                            // 1581\n    };                                                                                                               // 1582\n                                                                                                                     // 1583\n    this.code = function (html) {                                                                                    // 1584\n      var isActivated = this.invoke('codeview.isActivated');                                                         // 1585\n                                                                                                                     // 1586\n      if (html === undefined) {                                                                                      // 1587\n        this.invoke('codeview.sync');                                                                                // 1588\n        return isActivated ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html();                        // 1589\n      } else {                                                                                                       // 1590\n        if (isActivated) {                                                                                           // 1591\n          this.layoutInfo.codable.val(html);                                                                         // 1592\n        } else {                                                                                                     // 1593\n          this.layoutInfo.editable.html(html);                                                                       // 1594\n        }                                                                                                            // 1595\n        $note.val(html);                                                                                             // 1596\n        this.triggerEvent('change', html);                                                                           // 1597\n      }                                                                                                              // 1598\n    };                                                                                                               // 1599\n                                                                                                                     // 1600\n    this.isDisabled = function () {                                                                                  // 1601\n      return this.layoutInfo.editable.attr('contenteditable') === 'false';                                           // 1602\n    };                                                                                                               // 1603\n                                                                                                                     // 1604\n    this.enable = function () {                                                                                      // 1605\n      this.layoutInfo.editable.attr('contenteditable', true);                                                        // 1606\n      this.invoke('toolbar.activate', true);                                                                         // 1607\n    };                                                                                                               // 1608\n                                                                                                                     // 1609\n    this.disable = function () {                                                                                     // 1610\n      // close codeview if codeview is opend                                                                         // 1611\n      if (this.invoke('codeview.isActivated')) {                                                                     // 1612\n        this.invoke('codeview.deactivate');                                                                          // 1613\n      }                                                                                                              // 1614\n      this.layoutInfo.editable.attr('contenteditable', false);                                                       // 1615\n      this.invoke('toolbar.deactivate', true);                                                                       // 1616\n    };                                                                                                               // 1617\n                                                                                                                     // 1618\n    this.triggerEvent = function () {                                                                                // 1619\n      var namespace = list.head(arguments);                                                                          // 1620\n      var args = list.tail(list.from(arguments));                                                                    // 1621\n                                                                                                                     // 1622\n      var callback = this.options.callbacks[func.namespaceToCamel(namespace, 'on')];                                 // 1623\n      if (callback) {                                                                                                // 1624\n        callback.apply($note[0], args);                                                                              // 1625\n      }                                                                                                              // 1626\n      $note.trigger('summernote.' + namespace, args);                                                                // 1627\n    };                                                                                                               // 1628\n                                                                                                                     // 1629\n    this.initializeModule = function (key) {                                                                         // 1630\n      var module = this.modules[key];                                                                                // 1631\n      module.shouldInitialize = module.shouldInitialize || func.ok;                                                  // 1632\n      if (!module.shouldInitialize()) {                                                                              // 1633\n        return;                                                                                                      // 1634\n      }                                                                                                              // 1635\n                                                                                                                     // 1636\n      // initialize module                                                                                           // 1637\n      if (module.initialize) {                                                                                       // 1638\n        module.initialize();                                                                                         // 1639\n      }                                                                                                              // 1640\n                                                                                                                     // 1641\n      // attach events                                                                                               // 1642\n      if (module.events) {                                                                                           // 1643\n        dom.attachEvents($note, module.events);                                                                      // 1644\n      }                                                                                                              // 1645\n    };                                                                                                               // 1646\n                                                                                                                     // 1647\n    this.module = function (key, ModuleClass, withoutIntialize) {                                                    // 1648\n      if (arguments.length === 1) {                                                                                  // 1649\n        return this.modules[key];                                                                                    // 1650\n      }                                                                                                              // 1651\n                                                                                                                     // 1652\n      this.modules[key] = new ModuleClass(this);                                                                     // 1653\n                                                                                                                     // 1654\n      if (!withoutIntialize) {                                                                                       // 1655\n        this.initializeModule(key);                                                                                  // 1656\n      }                                                                                                              // 1657\n    };                                                                                                               // 1658\n                                                                                                                     // 1659\n    this.removeModule = function (key) {                                                                             // 1660\n      var module = this.modules[key];                                                                                // 1661\n      if (module.shouldInitialize()) {                                                                               // 1662\n        if (module.events) {                                                                                         // 1663\n          dom.detachEvents($note, module.events);                                                                    // 1664\n        }                                                                                                            // 1665\n                                                                                                                     // 1666\n        if (module.destroy) {                                                                                        // 1667\n          module.destroy();                                                                                          // 1668\n        }                                                                                                            // 1669\n      }                                                                                                              // 1670\n                                                                                                                     // 1671\n      delete this.modules[key];                                                                                      // 1672\n    };                                                                                                               // 1673\n                                                                                                                     // 1674\n    this.memo = function (key, obj) {                                                                                // 1675\n      if (arguments.length === 1) {                                                                                  // 1676\n        return this.memos[key];                                                                                      // 1677\n      }                                                                                                              // 1678\n      this.memos[key] = obj;                                                                                         // 1679\n    };                                                                                                               // 1680\n                                                                                                                     // 1681\n    this.removeMemo = function (key) {                                                                               // 1682\n      if (this.memos[key] && this.memos[key].destroy) {                                                              // 1683\n        this.memos[key].destroy();                                                                                   // 1684\n      }                                                                                                              // 1685\n                                                                                                                     // 1686\n      delete this.memos[key];                                                                                        // 1687\n    };                                                                                                               // 1688\n                                                                                                                     // 1689\n    this.createInvokeHandler = function (namespace, value) {                                                         // 1690\n      return function (event) {                                                                                      // 1691\n        event.preventDefault();                                                                                      // 1692\n        self.invoke(namespace, value || $(event.target).closest('[data-value]').data('value'));                      // 1693\n      };                                                                                                             // 1694\n    };                                                                                                               // 1695\n                                                                                                                     // 1696\n    this.invoke = function () {                                                                                      // 1697\n      var namespace = list.head(arguments);                                                                          // 1698\n      var args = list.tail(list.from(arguments));                                                                    // 1699\n                                                                                                                     // 1700\n      var splits = namespace.split('.');                                                                             // 1701\n      var hasSeparator = splits.length > 1;                                                                          // 1702\n      var moduleName = hasSeparator && list.head(splits);                                                            // 1703\n      var methodName = hasSeparator ? list.last(splits) : list.head(splits);                                         // 1704\n                                                                                                                     // 1705\n      var module = this.modules[moduleName || 'editor'];                                                             // 1706\n      if (!moduleName && this[methodName]) {                                                                         // 1707\n        return this[methodName].apply(this, args);                                                                   // 1708\n      } else if (module && module[methodName] && module.shouldInitialize()) {                                        // 1709\n        return module[methodName].apply(module, args);                                                               // 1710\n      }                                                                                                              // 1711\n    };                                                                                                               // 1712\n                                                                                                                     // 1713\n    return this.initialize();                                                                                        // 1714\n  };                                                                                                                 // 1715\n                                                                                                                     // 1716\n  $.fn.extend({                                                                                                      // 1717\n    /**                                                                                                              // 1718\n     * Summernote API                                                                                                // 1719\n     *                                                                                                               // 1720\n     * @param {Object|String}                                                                                        // 1721\n     * @return {this}                                                                                                // 1722\n     */                                                                                                              // 1723\n    summernote: function () {                                                                                        // 1724\n      var type = $.type(list.head(arguments));                                                                       // 1725\n      var isExternalAPICalled = type === 'string';                                                                   // 1726\n      var hasInitOptions = type === 'object';                                                                        // 1727\n                                                                                                                     // 1728\n      var options = hasInitOptions ? list.head(arguments) : {};                                                      // 1729\n                                                                                                                     // 1730\n      options = $.extend({}, $.summernote.options, options);                                                         // 1731\n      options.langInfo = $.extend(true, {}, $.summernote.lang['en-US'], $.summernote.lang[options.lang]);            // 1732\n                                                                                                                     // 1733\n      this.each(function (idx, note) {                                                                               // 1734\n        var $note = $(note);                                                                                         // 1735\n        if (!$note.data('summernote')) {                                                                             // 1736\n          var context = new Context($note, options);                                                                 // 1737\n          $note.data('summernote', context);                                                                         // 1738\n          $note.data('summernote').triggerEvent('init', context.layoutInfo);                                         // 1739\n        }                                                                                                            // 1740\n      });                                                                                                            // 1741\n                                                                                                                     // 1742\n      var $note = this.first();                                                                                      // 1743\n      if ($note.length) {                                                                                            // 1744\n        var context = $note.data('summernote');                                                                      // 1745\n        if (isExternalAPICalled) {                                                                                   // 1746\n          return context.invoke.apply(context, list.from(arguments));                                                // 1747\n        } else if (options.focus) {                                                                                  // 1748\n          context.invoke('editor.focus');                                                                            // 1749\n        }                                                                                                            // 1750\n      }                                                                                                              // 1751\n                                                                                                                     // 1752\n      return this;                                                                                                   // 1753\n    }                                                                                                                // 1754\n  });                                                                                                                // 1755\n                                                                                                                     // 1756\n                                                                                                                     // 1757\n  var Renderer = function (markup, children, options, callback) {                                                    // 1758\n    this.render = function ($parent) {                                                                               // 1759\n      var $node = $(markup);                                                                                         // 1760\n                                                                                                                     // 1761\n      if (options && options.contents) {                                                                             // 1762\n        $node.html(options.contents);                                                                                // 1763\n      }                                                                                                              // 1764\n                                                                                                                     // 1765\n      if (options && options.className) {                                                                            // 1766\n        $node.addClass(options.className);                                                                           // 1767\n      }                                                                                                              // 1768\n                                                                                                                     // 1769\n      if (options && options.data) {                                                                                 // 1770\n        $.each(options.data, function (k, v) {                                                                       // 1771\n          $node.attr('data-' + k, v);                                                                                // 1772\n        });                                                                                                          // 1773\n      }                                                                                                              // 1774\n                                                                                                                     // 1775\n      if (options && options.click) {                                                                                // 1776\n        $node.on('click', options.click);                                                                            // 1777\n      }                                                                                                              // 1778\n                                                                                                                     // 1779\n      if (children) {                                                                                                // 1780\n        var $container = $node.find('.note-children-container');                                                     // 1781\n        children.forEach(function (child) {                                                                          // 1782\n          child.render($container.length ? $container : $node);                                                      // 1783\n        });                                                                                                          // 1784\n      }                                                                                                              // 1785\n                                                                                                                     // 1786\n      if (callback) {                                                                                                // 1787\n        callback($node, options);                                                                                    // 1788\n      }                                                                                                              // 1789\n                                                                                                                     // 1790\n      if (options && options.callback) {                                                                             // 1791\n        options.callback($node);                                                                                     // 1792\n      }                                                                                                              // 1793\n                                                                                                                     // 1794\n      if ($parent) {                                                                                                 // 1795\n        $parent.append($node);                                                                                       // 1796\n      }                                                                                                              // 1797\n                                                                                                                     // 1798\n      return $node;                                                                                                  // 1799\n    };                                                                                                               // 1800\n  };                                                                                                                 // 1801\n                                                                                                                     // 1802\n  var renderer = {                                                                                                   // 1803\n    create: function (markup, callback) {                                                                            // 1804\n      return function () {                                                                                           // 1805\n        var children = $.isArray(arguments[0]) ? arguments[0] : [];                                                  // 1806\n        var options = typeof arguments[1] === 'object' ? arguments[1] : arguments[0];                                // 1807\n        if (options && options.children) {                                                                           // 1808\n          children = options.children;                                                                               // 1809\n        }                                                                                                            // 1810\n        return new Renderer(markup, children, options, callback);                                                    // 1811\n      };                                                                                                             // 1812\n    }                                                                                                                // 1813\n  };                                                                                                                 // 1814\n                                                                                                                     // 1815\n  var editor = renderer.create('<div class=\"note-editor note-frame panel panel-default\"/>');                         // 1816\n  var toolbar = renderer.create('<div class=\"note-toolbar panel-heading\"/>');                                        // 1817\n  var editingArea = renderer.create('<div class=\"note-editing-area\"/>');                                             // 1818\n  var codable = renderer.create('<textarea class=\"note-codable\"/>');                                                 // 1819\n  var editable = renderer.create('<div class=\"note-editable panel-body\" contentEditable=\"true\"/>');                  // 1820\n  var statusbar = renderer.create([                                                                                  // 1821\n    '<div class=\"note-statusbar\">',                                                                                  // 1822\n    '  <div class=\"note-resizebar\">',                                                                                // 1823\n    '    <div class=\"note-icon-bar\"/>',                                                                              // 1824\n    '    <div class=\"note-icon-bar\"/>',                                                                              // 1825\n    '    <div class=\"note-icon-bar\"/>',                                                                              // 1826\n    '  </div>',                                                                                                      // 1827\n    '</div>'                                                                                                         // 1828\n  ].join(''));                                                                                                       // 1829\n                                                                                                                     // 1830\n  var airEditor = renderer.create('<div class=\"note-editor\"/>');                                                     // 1831\n  var airEditable = renderer.create('<div class=\"note-editable\" contentEditable=\"true\"/>');                          // 1832\n                                                                                                                     // 1833\n  var buttonGroup = renderer.create('<div class=\"note-btn-group btn-group\">');                                       // 1834\n  var button = renderer.create('<button type=\"button\" class=\"note-btn btn btn-default btn-sm\">', function ($node, options) {\n    if (options && options.tooltip) {                                                                                // 1836\n      $node.attr({                                                                                                   // 1837\n        title: options.tooltip                                                                                       // 1838\n      }).tooltip({                                                                                                   // 1839\n        container: 'body',                                                                                           // 1840\n        trigger: 'hover',                                                                                            // 1841\n        placement: 'bottom'                                                                                          // 1842\n      });                                                                                                            // 1843\n    }                                                                                                                // 1844\n  });                                                                                                                // 1845\n                                                                                                                     // 1846\n  var dropdown = renderer.create('<div class=\"dropdown-menu\">', function ($node, options) {                          // 1847\n    var markup = $.isArray(options.items) ? options.items.map(function (item) {                                      // 1848\n      var value = (typeof item === 'string') ? item : (item.value || '');                                            // 1849\n      var content = options.template ? options.template(item) : item;                                                // 1850\n      return '<li><a href=\"#\" data-value=\"' + value + '\">' + content + '</a></li>';                                  // 1851\n    }).join('') : options.items;                                                                                     // 1852\n                                                                                                                     // 1853\n    $node.html(markup);                                                                                              // 1854\n  });                                                                                                                // 1855\n                                                                                                                     // 1856\n  var dropdownCheck = renderer.create('<div class=\"dropdown-menu note-check\">', function ($node, options) {          // 1857\n    var markup = $.isArray(options.items) ? options.items.map(function (item) {                                      // 1858\n      var value = (typeof item === 'string') ? item : (item.value || '');                                            // 1859\n      var content = options.template ? options.template(item) : item;                                                // 1860\n      return '<li><a href=\"#\" data-value=\"' + value + '\">' + icon(options.checkClassName) + ' ' + content + '</a></li>';\n    }).join('') : options.items;                                                                                     // 1862\n    $node.html(markup);                                                                                              // 1863\n  });                                                                                                                // 1864\n                                                                                                                     // 1865\n  var palette = renderer.create('<div class=\"note-color-palette\"/>', function ($node, options) {                     // 1866\n    var contents = [];                                                                                               // 1867\n    for (var row = 0, rowSize = options.colors.length; row < rowSize; row++) {                                       // 1868\n      var eventName = options.eventName;                                                                             // 1869\n      var colors = options.colors[row];                                                                              // 1870\n      var buttons = [];                                                                                              // 1871\n      for (var col = 0, colSize = colors.length; col < colSize; col++) {                                             // 1872\n        var color = colors[col];                                                                                     // 1873\n        buttons.push([                                                                                               // 1874\n          '<button type=\"button\" class=\"note-color-btn\"',                                                            // 1875\n          'style=\"background-color:', color, '\" ',                                                                   // 1876\n          'data-event=\"', eventName, '\" ',                                                                           // 1877\n          'data-value=\"', color, '\" ',                                                                               // 1878\n          'title=\"', color, '\" ',                                                                                    // 1879\n          'data-toggle=\"button\" tabindex=\"-1\"></button>'                                                             // 1880\n        ].join(''));                                                                                                 // 1881\n      }                                                                                                              // 1882\n      contents.push('<div class=\"note-color-row\">' + buttons.join('') + '</div>');                                   // 1883\n    }                                                                                                                // 1884\n    $node.html(contents.join(''));                                                                                   // 1885\n                                                                                                                     // 1886\n    $node.find('.note-color-btn').tooltip({                                                                          // 1887\n      container: 'body',                                                                                             // 1888\n      trigger: 'hover',                                                                                              // 1889\n      placement: 'bottom'                                                                                            // 1890\n    });                                                                                                              // 1891\n  });                                                                                                                // 1892\n                                                                                                                     // 1893\n  var dialog = renderer.create('<div class=\"modal\" aria-hidden=\"false\" tabindex=\"-1\"/>', function ($node, options) {\n    if (options.fade) {                                                                                              // 1895\n      $node.addClass('fade');                                                                                        // 1896\n    }                                                                                                                // 1897\n    $node.html([                                                                                                     // 1898\n      '<div class=\"modal-dialog\">',                                                                                  // 1899\n      '  <div class=\"modal-content\">',                                                                               // 1900\n      (options.title ?                                                                                               // 1901\n      '    <div class=\"modal-header\">' +                                                                             // 1902\n      '      <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>' +\n      '      <h4 class=\"modal-title\">' + options.title + '</h4>' +                                                   // 1904\n      '    </div>' : ''                                                                                              // 1905\n      ),                                                                                                             // 1906\n      '    <div class=\"modal-body\">' + options.body + '</div>',                                                      // 1907\n      (options.footer ?                                                                                              // 1908\n      '    <div class=\"modal-footer\">' + options.footer + '</div>' : ''                                              // 1909\n      ),                                                                                                             // 1910\n      '  </div>',                                                                                                    // 1911\n      '</div>'                                                                                                       // 1912\n    ].join(''));                                                                                                     // 1913\n  });                                                                                                                // 1914\n                                                                                                                     // 1915\n  var popover = renderer.create([                                                                                    // 1916\n    '<div class=\"note-popover popover in\">',                                                                         // 1917\n    '  <div class=\"arrow\"/>',                                                                                        // 1918\n    '  <div class=\"popover-content note-children-container\"/>',                                                      // 1919\n    '</div>'                                                                                                         // 1920\n  ].join(''), function ($node, options) {                                                                            // 1921\n    var direction = typeof options.direction !== 'undefined' ? options.direction : 'bottom';                         // 1922\n                                                                                                                     // 1923\n    $node.addClass(direction);                                                                                       // 1924\n                                                                                                                     // 1925\n    if (options.hideArrow) {                                                                                         // 1926\n      $node.find('.arrow').hide();                                                                                   // 1927\n    }                                                                                                                // 1928\n  });                                                                                                                // 1929\n                                                                                                                     // 1930\n  var icon = function (iconClassName, tagName) {                                                                     // 1931\n    tagName = tagName || 'i';                                                                                        // 1932\n    return '<' + tagName + ' class=\"' + iconClassName + '\"/>';                                                       // 1933\n  };                                                                                                                 // 1934\n                                                                                                                     // 1935\n  var ui = {                                                                                                         // 1936\n    editor: editor,                                                                                                  // 1937\n    toolbar: toolbar,                                                                                                // 1938\n    editingArea: editingArea,                                                                                        // 1939\n    codable: codable,                                                                                                // 1940\n    editable: editable,                                                                                              // 1941\n    statusbar: statusbar,                                                                                            // 1942\n    airEditor: airEditor,                                                                                            // 1943\n    airEditable: airEditable,                                                                                        // 1944\n    buttonGroup: buttonGroup,                                                                                        // 1945\n    button: button,                                                                                                  // 1946\n    dropdown: dropdown,                                                                                              // 1947\n    dropdownCheck: dropdownCheck,                                                                                    // 1948\n    palette: palette,                                                                                                // 1949\n    dialog: dialog,                                                                                                  // 1950\n    popover: popover,                                                                                                // 1951\n    icon: icon,                                                                                                      // 1952\n                                                                                                                     // 1953\n    toggleBtn: function ($btn, isEnable) {                                                                           // 1954\n      $btn.toggleClass('disabled', !isEnable);                                                                       // 1955\n      $btn.attr('disabled', !isEnable);                                                                              // 1956\n    },                                                                                                               // 1957\n                                                                                                                     // 1958\n    toggleBtnActive: function ($btn, isActive) {                                                                     // 1959\n      $btn.toggleClass('active', isActive);                                                                          // 1960\n    },                                                                                                               // 1961\n                                                                                                                     // 1962\n    onDialogShown: function ($dialog, handler) {                                                                     // 1963\n      $dialog.one('shown.bs.modal', handler);                                                                        // 1964\n    },                                                                                                               // 1965\n                                                                                                                     // 1966\n    onDialogHidden: function ($dialog, handler) {                                                                    // 1967\n      $dialog.one('hidden.bs.modal', handler);                                                                       // 1968\n    },                                                                                                               // 1969\n                                                                                                                     // 1970\n    showDialog: function ($dialog) {                                                                                 // 1971\n      $dialog.modal('show');                                                                                         // 1972\n    },                                                                                                               // 1973\n                                                                                                                     // 1974\n    hideDialog: function ($dialog) {                                                                                 // 1975\n      $dialog.modal('hide');                                                                                         // 1976\n    },                                                                                                               // 1977\n                                                                                                                     // 1978\n    createLayout: function ($note, options) {                                                                        // 1979\n      var $editor = (options.airMode ? ui.airEditor([                                                                // 1980\n        ui.editingArea([                                                                                             // 1981\n          ui.airEditable()                                                                                           // 1982\n        ])                                                                                                           // 1983\n      ]) : ui.editor([                                                                                               // 1984\n        ui.toolbar(),                                                                                                // 1985\n        ui.editingArea([                                                                                             // 1986\n          ui.codable(),                                                                                              // 1987\n          ui.editable()                                                                                              // 1988\n        ]),                                                                                                          // 1989\n        ui.statusbar()                                                                                               // 1990\n      ])).render();                                                                                                  // 1991\n                                                                                                                     // 1992\n      $editor.insertAfter($note);                                                                                    // 1993\n                                                                                                                     // 1994\n      return {                                                                                                       // 1995\n        note: $note,                                                                                                 // 1996\n        editor: $editor,                                                                                             // 1997\n        toolbar: $editor.find('.note-toolbar'),                                                                      // 1998\n        editingArea: $editor.find('.note-editing-area'),                                                             // 1999\n        editable: $editor.find('.note-editable'),                                                                    // 2000\n        codable: $editor.find('.note-codable'),                                                                      // 2001\n        statusbar: $editor.find('.note-statusbar')                                                                   // 2002\n      };                                                                                                             // 2003\n    },                                                                                                               // 2004\n                                                                                                                     // 2005\n    removeLayout: function ($note, layoutInfo) {                                                                     // 2006\n      $note.html(layoutInfo.editable.html());                                                                        // 2007\n      layoutInfo.editor.remove();                                                                                    // 2008\n      $note.show();                                                                                                  // 2009\n    }                                                                                                                // 2010\n  };                                                                                                                 // 2011\n                                                                                                                     // 2012\n  $.summernote = $.summernote || {                                                                                   // 2013\n    lang: {}                                                                                                         // 2014\n  };                                                                                                                 // 2015\n                                                                                                                     // 2016\n  $.extend($.summernote.lang, {                                                                                      // 2017\n    'en-US': {                                                                                                       // 2018\n      font: {                                                                                                        // 2019\n        bold: 'Bold',                                                                                                // 2020\n        italic: 'Italic',                                                                                            // 2021\n        underline: 'Underline',                                                                                      // 2022\n        clear: 'Remove Font Style',                                                                                  // 2023\n        height: 'Line Height',                                                                                       // 2024\n        name: 'Font Family',                                                                                         // 2025\n        strikethrough: 'Strikethrough',                                                                              // 2026\n        subscript: 'Subscript',                                                                                      // 2027\n        superscript: 'Superscript',                                                                                  // 2028\n        size: 'Font Size'                                                                                            // 2029\n      },                                                                                                             // 2030\n      image: {                                                                                                       // 2031\n        image: 'Picture',                                                                                            // 2032\n        insert: 'Insert Image',                                                                                      // 2033\n        resizeFull: 'Resize Full',                                                                                   // 2034\n        resizeHalf: 'Resize Half',                                                                                   // 2035\n        resizeQuarter: 'Resize Quarter',                                                                             // 2036\n        floatLeft: 'Float Left',                                                                                     // 2037\n        floatRight: 'Float Right',                                                                                   // 2038\n        floatNone: 'Float None',                                                                                     // 2039\n        shapeRounded: 'Shape: Rounded',                                                                              // 2040\n        shapeCircle: 'Shape: Circle',                                                                                // 2041\n        shapeThumbnail: 'Shape: Thumbnail',                                                                          // 2042\n        shapeNone: 'Shape: None',                                                                                    // 2043\n        dragImageHere: 'Drag image or text here',                                                                    // 2044\n        dropImage: 'Drop image or Text',                                                                             // 2045\n        selectFromFiles: 'Select from files',                                                                        // 2046\n        maximumFileSize: 'Maximum file size',                                                                        // 2047\n        maximumFileSizeError: 'Maximum file size exceeded.',                                                         // 2048\n        url: 'Image URL',                                                                                            // 2049\n        remove: 'Remove Image'                                                                                       // 2050\n      },                                                                                                             // 2051\n      video: {                                                                                                       // 2052\n        video: 'Video',                                                                                              // 2053\n        videoLink: 'Video Link',                                                                                     // 2054\n        insert: 'Insert Video',                                                                                      // 2055\n        url: 'Video URL?',                                                                                           // 2056\n        providers: '(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)'                                         // 2057\n      },                                                                                                             // 2058\n      link: {                                                                                                        // 2059\n        link: 'Link',                                                                                                // 2060\n        insert: 'Insert Link',                                                                                       // 2061\n        unlink: 'Unlink',                                                                                            // 2062\n        edit: 'Edit',                                                                                                // 2063\n        textToDisplay: 'Text to display',                                                                            // 2064\n        url: 'To what URL should this link go?',                                                                     // 2065\n        openInNewWindow: 'Open in new window'                                                                        // 2066\n      },                                                                                                             // 2067\n      table: {                                                                                                       // 2068\n        table: 'Table'                                                                                               // 2069\n      },                                                                                                             // 2070\n      hr: {                                                                                                          // 2071\n        insert: 'Insert Horizontal Rule'                                                                             // 2072\n      },                                                                                                             // 2073\n      style: {                                                                                                       // 2074\n        style: 'Style',                                                                                              // 2075\n        normal: 'Normal',                                                                                            // 2076\n        blockquote: 'Quote',                                                                                         // 2077\n        pre: 'Code',                                                                                                 // 2078\n        h1: 'Header 1',                                                                                              // 2079\n        h2: 'Header 2',                                                                                              // 2080\n        h3: 'Header 3',                                                                                              // 2081\n        h4: 'Header 4',                                                                                              // 2082\n        h5: 'Header 5',                                                                                              // 2083\n        h6: 'Header 6'                                                                                               // 2084\n      },                                                                                                             // 2085\n      lists: {                                                                                                       // 2086\n        unordered: 'Unordered list',                                                                                 // 2087\n        ordered: 'Ordered list'                                                                                      // 2088\n      },                                                                                                             // 2089\n      options: {                                                                                                     // 2090\n        help: 'Help',                                                                                                // 2091\n        fullscreen: 'Full Screen',                                                                                   // 2092\n        codeview: 'Code View'                                                                                        // 2093\n      },                                                                                                             // 2094\n      paragraph: {                                                                                                   // 2095\n        paragraph: 'Paragraph',                                                                                      // 2096\n        outdent: 'Outdent',                                                                                          // 2097\n        indent: 'Indent',                                                                                            // 2098\n        left: 'Align left',                                                                                          // 2099\n        center: 'Align center',                                                                                      // 2100\n        right: 'Align right',                                                                                        // 2101\n        justify: 'Justify full'                                                                                      // 2102\n      },                                                                                                             // 2103\n      color: {                                                                                                       // 2104\n        recent: 'Recent Color',                                                                                      // 2105\n        more: 'More Color',                                                                                          // 2106\n        background: 'Background Color',                                                                              // 2107\n        foreground: 'Foreground Color',                                                                              // 2108\n        transparent: 'Transparent',                                                                                  // 2109\n        setTransparent: 'Set transparent',                                                                           // 2110\n        reset: 'Reset',                                                                                              // 2111\n        resetToDefault: 'Reset to default'                                                                           // 2112\n      },                                                                                                             // 2113\n      shortcut: {                                                                                                    // 2114\n        shortcuts: 'Keyboard shortcuts',                                                                             // 2115\n        close: 'Close',                                                                                              // 2116\n        textFormatting: 'Text formatting',                                                                           // 2117\n        action: 'Action',                                                                                            // 2118\n        paragraphFormatting: 'Paragraph formatting',                                                                 // 2119\n        documentStyle: 'Document Style',                                                                             // 2120\n        extraKeys: 'Extra keys'                                                                                      // 2121\n      },                                                                                                             // 2122\n      help: {                                                                                                        // 2123\n        'insertParagraph': 'Insert Paragraph',                                                                       // 2124\n        'undo': 'Undoes the last command',                                                                           // 2125\n        'redo': 'Redoes the last command',                                                                           // 2126\n        'tab': 'Tab',                                                                                                // 2127\n        'untab': 'Untab',                                                                                            // 2128\n        'bold': 'Set a bold style',                                                                                  // 2129\n        'italic': 'Set a italic style',                                                                              // 2130\n        'underline': 'Set a underline style',                                                                        // 2131\n        'strikethrough': 'Set a strikethrough style',                                                                // 2132\n        'removeFormat': 'Clean a style',                                                                             // 2133\n        'justifyLeft': 'Set left align',                                                                             // 2134\n        'justifyCenter': 'Set center align',                                                                         // 2135\n        'justifyRight': 'Set right align',                                                                           // 2136\n        'justifyFull': 'Set full align',                                                                             // 2137\n        'insertUnorderedList': 'Toggle unordered list',                                                              // 2138\n        'insertOrderedList': 'Toggle ordered list',                                                                  // 2139\n        'outdent': 'Outdent on current paragraph',                                                                   // 2140\n        'indent': 'Indent on current paragraph',                                                                     // 2141\n        'formatPara': 'Change current block\\'s format as a paragraph(P tag)',                                        // 2142\n        'formatH1': 'Change current block\\'s format as H1',                                                          // 2143\n        'formatH2': 'Change current block\\'s format as H2',                                                          // 2144\n        'formatH3': 'Change current block\\'s format as H3',                                                          // 2145\n        'formatH4': 'Change current block\\'s format as H4',                                                          // 2146\n        'formatH5': 'Change current block\\'s format as H5',                                                          // 2147\n        'formatH6': 'Change current block\\'s format as H6',                                                          // 2148\n        'insertHorizontalRule': 'Insert horizontal rule',                                                            // 2149\n        'linkDialog.show': 'Show Link Dialog'                                                                        // 2150\n      },                                                                                                             // 2151\n      history: {                                                                                                     // 2152\n        undo: 'Undo',                                                                                                // 2153\n        redo: 'Redo'                                                                                                 // 2154\n      },                                                                                                             // 2155\n      specialChar: {                                                                                                 // 2156\n        specialChar: 'SPECIAL CHARACTERS',                                                                           // 2157\n        select: 'Select Special characters'                                                                          // 2158\n      }                                                                                                              // 2159\n    }                                                                                                                // 2160\n  });                                                                                                                // 2161\n                                                                                                                     // 2162\n                                                                                                                     // 2163\n  /**                                                                                                                // 2164\n   * @class core.key                                                                                                 // 2165\n   *                                                                                                                 // 2166\n   * Object for keycodes.                                                                                            // 2167\n   *                                                                                                                 // 2168\n   * @singleton                                                                                                      // 2169\n   * @alternateClassName key                                                                                         // 2170\n   */                                                                                                                // 2171\n  var key = (function () {                                                                                           // 2172\n    var keyMap = {                                                                                                   // 2173\n      'BACKSPACE': 8,                                                                                                // 2174\n      'TAB': 9,                                                                                                      // 2175\n      'ENTER': 13,                                                                                                   // 2176\n      'SPACE': 32,                                                                                                   // 2177\n                                                                                                                     // 2178\n      // Arrow                                                                                                       // 2179\n      'LEFT': 37,                                                                                                    // 2180\n      'UP': 38,                                                                                                      // 2181\n      'RIGHT': 39,                                                                                                   // 2182\n      'DOWN': 40,                                                                                                    // 2183\n                                                                                                                     // 2184\n      // Number: 0-9                                                                                                 // 2185\n      'NUM0': 48,                                                                                                    // 2186\n      'NUM1': 49,                                                                                                    // 2187\n      'NUM2': 50,                                                                                                    // 2188\n      'NUM3': 51,                                                                                                    // 2189\n      'NUM4': 52,                                                                                                    // 2190\n      'NUM5': 53,                                                                                                    // 2191\n      'NUM6': 54,                                                                                                    // 2192\n      'NUM7': 55,                                                                                                    // 2193\n      'NUM8': 56,                                                                                                    // 2194\n                                                                                                                     // 2195\n      // Alphabet: a-z                                                                                               // 2196\n      'B': 66,                                                                                                       // 2197\n      'E': 69,                                                                                                       // 2198\n      'I': 73,                                                                                                       // 2199\n      'J': 74,                                                                                                       // 2200\n      'K': 75,                                                                                                       // 2201\n      'L': 76,                                                                                                       // 2202\n      'R': 82,                                                                                                       // 2203\n      'S': 83,                                                                                                       // 2204\n      'U': 85,                                                                                                       // 2205\n      'V': 86,                                                                                                       // 2206\n      'Y': 89,                                                                                                       // 2207\n      'Z': 90,                                                                                                       // 2208\n                                                                                                                     // 2209\n      'SLASH': 191,                                                                                                  // 2210\n      'LEFTBRACKET': 219,                                                                                            // 2211\n      'BACKSLASH': 220,                                                                                              // 2212\n      'RIGHTBRACKET': 221                                                                                            // 2213\n    };                                                                                                               // 2214\n                                                                                                                     // 2215\n    return {                                                                                                         // 2216\n      /**                                                                                                            // 2217\n       * @method isEdit                                                                                              // 2218\n       *                                                                                                             // 2219\n       * @param {Number} keyCode                                                                                     // 2220\n       * @return {Boolean}                                                                                           // 2221\n       */                                                                                                            // 2222\n      isEdit: function (keyCode) {                                                                                   // 2223\n        return list.contains([                                                                                       // 2224\n          keyMap.BACKSPACE,                                                                                          // 2225\n          keyMap.TAB,                                                                                                // 2226\n          keyMap.ENTER,                                                                                              // 2227\n          keyMap.SPACE                                                                                               // 2228\n        ], keyCode);                                                                                                 // 2229\n      },                                                                                                             // 2230\n      /**                                                                                                            // 2231\n       * @method isMove                                                                                              // 2232\n       *                                                                                                             // 2233\n       * @param {Number} keyCode                                                                                     // 2234\n       * @return {Boolean}                                                                                           // 2235\n       */                                                                                                            // 2236\n      isMove: function (keyCode) {                                                                                   // 2237\n        return list.contains([                                                                                       // 2238\n          keyMap.LEFT,                                                                                               // 2239\n          keyMap.UP,                                                                                                 // 2240\n          keyMap.RIGHT,                                                                                              // 2241\n          keyMap.DOWN                                                                                                // 2242\n        ], keyCode);                                                                                                 // 2243\n      },                                                                                                             // 2244\n      /**                                                                                                            // 2245\n       * @property {Object} nameFromCode                                                                             // 2246\n       * @property {String} nameFromCode.8 \"BACKSPACE\"                                                               // 2247\n       */                                                                                                            // 2248\n      nameFromCode: func.invertObject(keyMap),                                                                       // 2249\n      code: keyMap                                                                                                   // 2250\n    };                                                                                                               // 2251\n  })();                                                                                                              // 2252\n                                                                                                                     // 2253\n  var range = (function () {                                                                                         // 2254\n                                                                                                                     // 2255\n    /**                                                                                                              // 2256\n     * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js                                      // 2257\n     *                                                                                                               // 2258\n     * @param {TextRange} textRange                                                                                  // 2259\n     * @param {Boolean} isStart                                                                                      // 2260\n     * @return {BoundaryPoint}                                                                                       // 2261\n     *                                                                                                               // 2262\n     * @see http://msdn.microsoft.com/en-us/library/ie/ms535872(v=vs.85).aspx                                        // 2263\n     */                                                                                                              // 2264\n    var textRangeToPoint = function (textRange, isStart) {                                                           // 2265\n      var container = textRange.parentElement(), offset;                                                             // 2266\n                                                                                                                     // 2267\n      var tester = document.body.createTextRange(), prevContainer;                                                   // 2268\n      var childNodes = list.from(container.childNodes);                                                              // 2269\n      for (offset = 0; offset < childNodes.length; offset++) {                                                       // 2270\n        if (dom.isText(childNodes[offset])) {                                                                        // 2271\n          continue;                                                                                                  // 2272\n        }                                                                                                            // 2273\n        tester.moveToElementText(childNodes[offset]);                                                                // 2274\n        if (tester.compareEndPoints('StartToStart', textRange) >= 0) {                                               // 2275\n          break;                                                                                                     // 2276\n        }                                                                                                            // 2277\n        prevContainer = childNodes[offset];                                                                          // 2278\n      }                                                                                                              // 2279\n                                                                                                                     // 2280\n      if (offset !== 0 && dom.isText(childNodes[offset - 1])) {                                                      // 2281\n        var textRangeStart = document.body.createTextRange(), curTextNode = null;                                    // 2282\n        textRangeStart.moveToElementText(prevContainer || container);                                                // 2283\n        textRangeStart.collapse(!prevContainer);                                                                     // 2284\n        curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild;                              // 2285\n                                                                                                                     // 2286\n        var pointTester = textRange.duplicate();                                                                     // 2287\n        pointTester.setEndPoint('StartToStart', textRangeStart);                                                     // 2288\n        var textCount = pointTester.text.replace(/[\\r\\n]/g, '').length;                                              // 2289\n                                                                                                                     // 2290\n        while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {                                // 2291\n          textCount -= curTextNode.nodeValue.length;                                                                 // 2292\n          curTextNode = curTextNode.nextSibling;                                                                     // 2293\n        }                                                                                                            // 2294\n                                                                                                                     // 2295\n        /* jshint ignore:start */                                                                                    // 2296\n        var dummy = curTextNode.nodeValue; // enforce IE to re-reference curTextNode, hack                           // 2297\n        /* jshint ignore:end */                                                                                      // 2298\n                                                                                                                     // 2299\n        if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) &&                             // 2300\n            textCount === curTextNode.nodeValue.length) {                                                            // 2301\n          textCount -= curTextNode.nodeValue.length;                                                                 // 2302\n          curTextNode = curTextNode.nextSibling;                                                                     // 2303\n        }                                                                                                            // 2304\n                                                                                                                     // 2305\n        container = curTextNode;                                                                                     // 2306\n        offset = textCount;                                                                                          // 2307\n      }                                                                                                              // 2308\n                                                                                                                     // 2309\n      return {                                                                                                       // 2310\n        cont: container,                                                                                             // 2311\n        offset: offset                                                                                               // 2312\n      };                                                                                                             // 2313\n    };                                                                                                               // 2314\n                                                                                                                     // 2315\n    /**                                                                                                              // 2316\n     * return TextRange from boundary point (inspired by google closure-library)                                     // 2317\n     * @param {BoundaryPoint} point                                                                                  // 2318\n     * @return {TextRange}                                                                                           // 2319\n     */                                                                                                              // 2320\n    var pointToTextRange = function (point) {                                                                        // 2321\n      var textRangeInfo = function (container, offset) {                                                             // 2322\n        var node, isCollapseToStart;                                                                                 // 2323\n                                                                                                                     // 2324\n        if (dom.isText(container)) {                                                                                 // 2325\n          var prevTextNodes = dom.listPrev(container, func.not(dom.isText));                                         // 2326\n          var prevContainer = list.last(prevTextNodes).previousSibling;                                              // 2327\n          node =  prevContainer || container.parentNode;                                                             // 2328\n          offset += list.sum(list.tail(prevTextNodes), dom.nodeLength);                                              // 2329\n          isCollapseToStart = !prevContainer;                                                                        // 2330\n        } else {                                                                                                     // 2331\n          node = container.childNodes[offset] || container;                                                          // 2332\n          if (dom.isText(node)) {                                                                                    // 2333\n            return textRangeInfo(node, 0);                                                                           // 2334\n          }                                                                                                          // 2335\n                                                                                                                     // 2336\n          offset = 0;                                                                                                // 2337\n          isCollapseToStart = false;                                                                                 // 2338\n        }                                                                                                            // 2339\n                                                                                                                     // 2340\n        return {                                                                                                     // 2341\n          node: node,                                                                                                // 2342\n          collapseToStart: isCollapseToStart,                                                                        // 2343\n          offset: offset                                                                                             // 2344\n        };                                                                                                           // 2345\n      };                                                                                                             // 2346\n                                                                                                                     // 2347\n      var textRange = document.body.createTextRange();                                                               // 2348\n      var info = textRangeInfo(point.node, point.offset);                                                            // 2349\n                                                                                                                     // 2350\n      textRange.moveToElementText(info.node);                                                                        // 2351\n      textRange.collapse(info.collapseToStart);                                                                      // 2352\n      textRange.moveStart('character', info.offset);                                                                 // 2353\n      return textRange;                                                                                              // 2354\n    };                                                                                                               // 2355\n                                                                                                                     // 2356\n    /**                                                                                                              // 2357\n     * Wrapped Range                                                                                                 // 2358\n     *                                                                                                               // 2359\n     * @constructor                                                                                                  // 2360\n     * @param {Node} sc - start container                                                                            // 2361\n     * @param {Number} so - start offset                                                                             // 2362\n     * @param {Node} ec - end container                                                                              // 2363\n     * @param {Number} eo - end offset                                                                               // 2364\n     */                                                                                                              // 2365\n    var WrappedRange = function (sc, so, ec, eo) {                                                                   // 2366\n      this.sc = sc;                                                                                                  // 2367\n      this.so = so;                                                                                                  // 2368\n      this.ec = ec;                                                                                                  // 2369\n      this.eo = eo;                                                                                                  // 2370\n                                                                                                                     // 2371\n      // nativeRange: get nativeRange from sc, so, ec, eo                                                            // 2372\n      var nativeRange = function () {                                                                                // 2373\n        if (agent.isW3CRangeSupport) {                                                                               // 2374\n          var w3cRange = document.createRange();                                                                     // 2375\n          w3cRange.setStart(sc, so);                                                                                 // 2376\n          w3cRange.setEnd(ec, eo);                                                                                   // 2377\n                                                                                                                     // 2378\n          return w3cRange;                                                                                           // 2379\n        } else {                                                                                                     // 2380\n          var textRange = pointToTextRange({                                                                         // 2381\n            node: sc,                                                                                                // 2382\n            offset: so                                                                                               // 2383\n          });                                                                                                        // 2384\n                                                                                                                     // 2385\n          textRange.setEndPoint('EndToEnd', pointToTextRange({                                                       // 2386\n            node: ec,                                                                                                // 2387\n            offset: eo                                                                                               // 2388\n          }));                                                                                                       // 2389\n                                                                                                                     // 2390\n          return textRange;                                                                                          // 2391\n        }                                                                                                            // 2392\n      };                                                                                                             // 2393\n                                                                                                                     // 2394\n      this.getPoints = function () {                                                                                 // 2395\n        return {                                                                                                     // 2396\n          sc: sc,                                                                                                    // 2397\n          so: so,                                                                                                    // 2398\n          ec: ec,                                                                                                    // 2399\n          eo: eo                                                                                                     // 2400\n        };                                                                                                           // 2401\n      };                                                                                                             // 2402\n                                                                                                                     // 2403\n      this.getStartPoint = function () {                                                                             // 2404\n        return {                                                                                                     // 2405\n          node: sc,                                                                                                  // 2406\n          offset: so                                                                                                 // 2407\n        };                                                                                                           // 2408\n      };                                                                                                             // 2409\n                                                                                                                     // 2410\n      this.getEndPoint = function () {                                                                               // 2411\n        return {                                                                                                     // 2412\n          node: ec,                                                                                                  // 2413\n          offset: eo                                                                                                 // 2414\n        };                                                                                                           // 2415\n      };                                                                                                             // 2416\n                                                                                                                     // 2417\n      /**                                                                                                            // 2418\n       * select update visible range                                                                                 // 2419\n       */                                                                                                            // 2420\n      this.select = function () {                                                                                    // 2421\n        var nativeRng = nativeRange();                                                                               // 2422\n        if (agent.isW3CRangeSupport) {                                                                               // 2423\n          var selection = document.getSelection();                                                                   // 2424\n          if (selection.rangeCount > 0) {                                                                            // 2425\n            selection.removeAllRanges();                                                                             // 2426\n          }                                                                                                          // 2427\n          selection.addRange(nativeRng);                                                                             // 2428\n        } else {                                                                                                     // 2429\n          nativeRng.select();                                                                                        // 2430\n        }                                                                                                            // 2431\n                                                                                                                     // 2432\n        return this;                                                                                                 // 2433\n      };                                                                                                             // 2434\n                                                                                                                     // 2435\n      /**                                                                                                            // 2436\n       * Moves the scrollbar to start container(sc) of current range                                                 // 2437\n       *                                                                                                             // 2438\n       * @return {WrappedRange}                                                                                      // 2439\n       */                                                                                                            // 2440\n      this.scrollIntoView = function (container) {                                                                   // 2441\n        var height = $(container).height();                                                                          // 2442\n        if (container.scrollTop + height < this.sc.offsetTop) {                                                      // 2443\n          container.scrollTop += Math.abs(container.scrollTop + height - this.sc.offsetTop);                         // 2444\n        }                                                                                                            // 2445\n                                                                                                                     // 2446\n        return this;                                                                                                 // 2447\n      };                                                                                                             // 2448\n                                                                                                                     // 2449\n      /**                                                                                                            // 2450\n       * @return {WrappedRange}                                                                                      // 2451\n       */                                                                                                            // 2452\n      this.normalize = function () {                                                                                 // 2453\n                                                                                                                     // 2454\n        /**                                                                                                          // 2455\n         * @param {BoundaryPoint} point                                                                              // 2456\n         * @param {Boolean} isLeftToRight                                                                            // 2457\n         * @return {BoundaryPoint}                                                                                   // 2458\n         */                                                                                                          // 2459\n        var getVisiblePoint = function (point, isLeftToRight) {                                                      // 2460\n          if ((dom.isVisiblePoint(point) && !dom.isEdgePoint(point)) ||                                              // 2461\n              (dom.isVisiblePoint(point) && dom.isRightEdgePoint(point) && !isLeftToRight) ||                        // 2462\n              (dom.isVisiblePoint(point) && dom.isLeftEdgePoint(point) && isLeftToRight) ||                          // 2463\n              (dom.isVisiblePoint(point) && dom.isBlock(point.node) && dom.isEmpty(point.node))) {                   // 2464\n            return point;                                                                                            // 2465\n          }                                                                                                          // 2466\n                                                                                                                     // 2467\n          // point on block's edge                                                                                   // 2468\n          var block = dom.ancestor(point.node, dom.isBlock);                                                         // 2469\n          if (((dom.isLeftEdgePointOf(point, block) || dom.isVoid(dom.prevPoint(point).node)) && !isLeftToRight) ||  // 2470\n              ((dom.isRightEdgePointOf(point, block) || dom.isVoid(dom.nextPoint(point).node)) && isLeftToRight)) {  // 2471\n                                                                                                                     // 2472\n            // returns point already on visible point                                                                // 2473\n            if (dom.isVisiblePoint(point)) {                                                                         // 2474\n              return point;                                                                                          // 2475\n            }                                                                                                        // 2476\n            // reverse direction                                                                                     // 2477\n            isLeftToRight = !isLeftToRight;                                                                          // 2478\n          }                                                                                                          // 2479\n                                                                                                                     // 2480\n          var nextPoint = isLeftToRight ? dom.nextPointUntil(dom.nextPoint(point), dom.isVisiblePoint) :             // 2481\n                                          dom.prevPointUntil(dom.prevPoint(point), dom.isVisiblePoint);              // 2482\n          return nextPoint || point;                                                                                 // 2483\n        };                                                                                                           // 2484\n                                                                                                                     // 2485\n        var endPoint = getVisiblePoint(this.getEndPoint(), false);                                                   // 2486\n        var startPoint = this.isCollapsed() ? endPoint : getVisiblePoint(this.getStartPoint(), true);                // 2487\n                                                                                                                     // 2488\n        return new WrappedRange(                                                                                     // 2489\n          startPoint.node,                                                                                           // 2490\n          startPoint.offset,                                                                                         // 2491\n          endPoint.node,                                                                                             // 2492\n          endPoint.offset                                                                                            // 2493\n        );                                                                                                           // 2494\n      };                                                                                                             // 2495\n                                                                                                                     // 2496\n      /**                                                                                                            // 2497\n       * returns matched nodes on range                                                                              // 2498\n       *                                                                                                             // 2499\n       * @param {Function} [pred] - predicate function                                                               // 2500\n       * @param {Object} [options]                                                                                   // 2501\n       * @param {Boolean} [options.includeAncestor]                                                                  // 2502\n       * @param {Boolean} [options.fullyContains]                                                                    // 2503\n       * @return {Node[]}                                                                                            // 2504\n       */                                                                                                            // 2505\n      this.nodes = function (pred, options) {                                                                        // 2506\n        pred = pred || func.ok;                                                                                      // 2507\n                                                                                                                     // 2508\n        var includeAncestor = options && options.includeAncestor;                                                    // 2509\n        var fullyContains = options && options.fullyContains;                                                        // 2510\n                                                                                                                     // 2511\n        // TODO compare points and sort                                                                              // 2512\n        var startPoint = this.getStartPoint();                                                                       // 2513\n        var endPoint = this.getEndPoint();                                                                           // 2514\n                                                                                                                     // 2515\n        var nodes = [];                                                                                              // 2516\n        var leftEdgeNodes = [];                                                                                      // 2517\n                                                                                                                     // 2518\n        dom.walkPoint(startPoint, endPoint, function (point) {                                                       // 2519\n          if (dom.isEditable(point.node)) {                                                                          // 2520\n            return;                                                                                                  // 2521\n          }                                                                                                          // 2522\n                                                                                                                     // 2523\n          var node;                                                                                                  // 2524\n          if (fullyContains) {                                                                                       // 2525\n            if (dom.isLeftEdgePoint(point)) {                                                                        // 2526\n              leftEdgeNodes.push(point.node);                                                                        // 2527\n            }                                                                                                        // 2528\n            if (dom.isRightEdgePoint(point) && list.contains(leftEdgeNodes, point.node)) {                           // 2529\n              node = point.node;                                                                                     // 2530\n            }                                                                                                        // 2531\n          } else if (includeAncestor) {                                                                              // 2532\n            node = dom.ancestor(point.node, pred);                                                                   // 2533\n          } else {                                                                                                   // 2534\n            node = point.node;                                                                                       // 2535\n          }                                                                                                          // 2536\n                                                                                                                     // 2537\n          if (node && pred(node)) {                                                                                  // 2538\n            nodes.push(node);                                                                                        // 2539\n          }                                                                                                          // 2540\n        }, true);                                                                                                    // 2541\n                                                                                                                     // 2542\n        return list.unique(nodes);                                                                                   // 2543\n      };                                                                                                             // 2544\n                                                                                                                     // 2545\n      /**                                                                                                            // 2546\n       * returns commonAncestor of range                                                                             // 2547\n       * @return {Element} - commonAncestor                                                                          // 2548\n       */                                                                                                            // 2549\n      this.commonAncestor = function () {                                                                            // 2550\n        return dom.commonAncestor(sc, ec);                                                                           // 2551\n      };                                                                                                             // 2552\n                                                                                                                     // 2553\n      /**                                                                                                            // 2554\n       * returns expanded range by pred                                                                              // 2555\n       *                                                                                                             // 2556\n       * @param {Function} pred - predicate function                                                                 // 2557\n       * @return {WrappedRange}                                                                                      // 2558\n       */                                                                                                            // 2559\n      this.expand = function (pred) {                                                                                // 2560\n        var startAncestor = dom.ancestor(sc, pred);                                                                  // 2561\n        var endAncestor = dom.ancestor(ec, pred);                                                                    // 2562\n                                                                                                                     // 2563\n        if (!startAncestor && !endAncestor) {                                                                        // 2564\n          return new WrappedRange(sc, so, ec, eo);                                                                   // 2565\n        }                                                                                                            // 2566\n                                                                                                                     // 2567\n        var boundaryPoints = this.getPoints();                                                                       // 2568\n                                                                                                                     // 2569\n        if (startAncestor) {                                                                                         // 2570\n          boundaryPoints.sc = startAncestor;                                                                         // 2571\n          boundaryPoints.so = 0;                                                                                     // 2572\n        }                                                                                                            // 2573\n                                                                                                                     // 2574\n        if (endAncestor) {                                                                                           // 2575\n          boundaryPoints.ec = endAncestor;                                                                           // 2576\n          boundaryPoints.eo = dom.nodeLength(endAncestor);                                                           // 2577\n        }                                                                                                            // 2578\n                                                                                                                     // 2579\n        return new WrappedRange(                                                                                     // 2580\n          boundaryPoints.sc,                                                                                         // 2581\n          boundaryPoints.so,                                                                                         // 2582\n          boundaryPoints.ec,                                                                                         // 2583\n          boundaryPoints.eo                                                                                          // 2584\n        );                                                                                                           // 2585\n      };                                                                                                             // 2586\n                                                                                                                     // 2587\n      /**                                                                                                            // 2588\n       * @param {Boolean} isCollapseToStart                                                                          // 2589\n       * @return {WrappedRange}                                                                                      // 2590\n       */                                                                                                            // 2591\n      this.collapse = function (isCollapseToStart) {                                                                 // 2592\n        if (isCollapseToStart) {                                                                                     // 2593\n          return new WrappedRange(sc, so, sc, so);                                                                   // 2594\n        } else {                                                                                                     // 2595\n          return new WrappedRange(ec, eo, ec, eo);                                                                   // 2596\n        }                                                                                                            // 2597\n      };                                                                                                             // 2598\n                                                                                                                     // 2599\n      /**                                                                                                            // 2600\n       * splitText on range                                                                                          // 2601\n       */                                                                                                            // 2602\n      this.splitText = function () {                                                                                 // 2603\n        var isSameContainer = sc === ec;                                                                             // 2604\n        var boundaryPoints = this.getPoints();                                                                       // 2605\n                                                                                                                     // 2606\n        if (dom.isText(ec) && !dom.isEdgePoint(this.getEndPoint())) {                                                // 2607\n          ec.splitText(eo);                                                                                          // 2608\n        }                                                                                                            // 2609\n                                                                                                                     // 2610\n        if (dom.isText(sc) && !dom.isEdgePoint(this.getStartPoint())) {                                              // 2611\n          boundaryPoints.sc = sc.splitText(so);                                                                      // 2612\n          boundaryPoints.so = 0;                                                                                     // 2613\n                                                                                                                     // 2614\n          if (isSameContainer) {                                                                                     // 2615\n            boundaryPoints.ec = boundaryPoints.sc;                                                                   // 2616\n            boundaryPoints.eo = eo - so;                                                                             // 2617\n          }                                                                                                          // 2618\n        }                                                                                                            // 2619\n                                                                                                                     // 2620\n        return new WrappedRange(                                                                                     // 2621\n          boundaryPoints.sc,                                                                                         // 2622\n          boundaryPoints.so,                                                                                         // 2623\n          boundaryPoints.ec,                                                                                         // 2624\n          boundaryPoints.eo                                                                                          // 2625\n        );                                                                                                           // 2626\n      };                                                                                                             // 2627\n                                                                                                                     // 2628\n      /**                                                                                                            // 2629\n       * delete contents on range                                                                                    // 2630\n       * @return {WrappedRange}                                                                                      // 2631\n       */                                                                                                            // 2632\n      this.deleteContents = function () {                                                                            // 2633\n        if (this.isCollapsed()) {                                                                                    // 2634\n          return this;                                                                                               // 2635\n        }                                                                                                            // 2636\n                                                                                                                     // 2637\n        var rng = this.splitText();                                                                                  // 2638\n        var nodes = rng.nodes(null, {                                                                                // 2639\n          fullyContains: true                                                                                        // 2640\n        });                                                                                                          // 2641\n                                                                                                                     // 2642\n        // find new cursor point                                                                                     // 2643\n        var point = dom.prevPointUntil(rng.getStartPoint(), function (point) {                                       // 2644\n          return !list.contains(nodes, point.node);                                                                  // 2645\n        });                                                                                                          // 2646\n                                                                                                                     // 2647\n        var emptyParents = [];                                                                                       // 2648\n        $.each(nodes, function (idx, node) {                                                                         // 2649\n          // find empty parents                                                                                      // 2650\n          var parent = node.parentNode;                                                                              // 2651\n          if (point.node !== parent && dom.nodeLength(parent) === 1) {                                               // 2652\n            emptyParents.push(parent);                                                                               // 2653\n          }                                                                                                          // 2654\n          dom.remove(node, false);                                                                                   // 2655\n        });                                                                                                          // 2656\n                                                                                                                     // 2657\n        // remove empty parents                                                                                      // 2658\n        $.each(emptyParents, function (idx, node) {                                                                  // 2659\n          dom.remove(node, false);                                                                                   // 2660\n        });                                                                                                          // 2661\n                                                                                                                     // 2662\n        return new WrappedRange(                                                                                     // 2663\n          point.node,                                                                                                // 2664\n          point.offset,                                                                                              // 2665\n          point.node,                                                                                                // 2666\n          point.offset                                                                                               // 2667\n        ).normalize();                                                                                               // 2668\n      };                                                                                                             // 2669\n                                                                                                                     // 2670\n      /**                                                                                                            // 2671\n       * makeIsOn: return isOn(pred) function                                                                        // 2672\n       */                                                                                                            // 2673\n      var makeIsOn = function (pred) {                                                                               // 2674\n        return function () {                                                                                         // 2675\n          var ancestor = dom.ancestor(sc, pred);                                                                     // 2676\n          return !!ancestor && (ancestor === dom.ancestor(ec, pred));                                                // 2677\n        };                                                                                                           // 2678\n      };                                                                                                             // 2679\n                                                                                                                     // 2680\n      // isOnEditable: judge whether range is on editable or not                                                     // 2681\n      this.isOnEditable = makeIsOn(dom.isEditable);                                                                  // 2682\n      // isOnList: judge whether range is on list node or not                                                        // 2683\n      this.isOnList = makeIsOn(dom.isList);                                                                          // 2684\n      // isOnAnchor: judge whether range is on anchor node or not                                                    // 2685\n      this.isOnAnchor = makeIsOn(dom.isAnchor);                                                                      // 2686\n      // isOnAnchor: judge whether range is on cell node or not                                                      // 2687\n      this.isOnCell = makeIsOn(dom.isCell);                                                                          // 2688\n                                                                                                                     // 2689\n      /**                                                                                                            // 2690\n       * @param {Function} pred                                                                                      // 2691\n       * @return {Boolean}                                                                                           // 2692\n       */                                                                                                            // 2693\n      this.isLeftEdgeOf = function (pred) {                                                                          // 2694\n        if (!dom.isLeftEdgePoint(this.getStartPoint())) {                                                            // 2695\n          return false;                                                                                              // 2696\n        }                                                                                                            // 2697\n                                                                                                                     // 2698\n        var node = dom.ancestor(this.sc, pred);                                                                      // 2699\n        return node && dom.isLeftEdgeOf(this.sc, node);                                                              // 2700\n      };                                                                                                             // 2701\n                                                                                                                     // 2702\n      /**                                                                                                            // 2703\n       * returns whether range was collapsed or not                                                                  // 2704\n       */                                                                                                            // 2705\n      this.isCollapsed = function () {                                                                               // 2706\n        return sc === ec && so === eo;                                                                               // 2707\n      };                                                                                                             // 2708\n                                                                                                                     // 2709\n      /**                                                                                                            // 2710\n       * wrap inline nodes which children of body with paragraph                                                     // 2711\n       *                                                                                                             // 2712\n       * @return {WrappedRange}                                                                                      // 2713\n       */                                                                                                            // 2714\n      this.wrapBodyInlineWithPara = function () {                                                                    // 2715\n        if (dom.isBodyContainer(sc) && dom.isEmpty(sc)) {                                                            // 2716\n          sc.innerHTML = dom.emptyPara;                                                                              // 2717\n          return new WrappedRange(sc.firstChild, 0, sc.firstChild, 0);                                               // 2718\n        }                                                                                                            // 2719\n                                                                                                                     // 2720\n        /**                                                                                                          // 2721\n         * [workaround] firefox often create range on not visible point. so normalize here.                          // 2722\n         *  - firefox: |<p>text</p>|                                                                                 // 2723\n         *  - chrome: <p>|text|</p>                                                                                  // 2724\n         */                                                                                                          // 2725\n        var rng = this.normalize();                                                                                  // 2726\n        if (dom.isParaInline(sc) || dom.isPara(sc)) {                                                                // 2727\n          return rng;                                                                                                // 2728\n        }                                                                                                            // 2729\n                                                                                                                     // 2730\n        // find inline top ancestor                                                                                  // 2731\n        var topAncestor;                                                                                             // 2732\n        if (dom.isInline(rng.sc)) {                                                                                  // 2733\n          var ancestors = dom.listAncestor(rng.sc, func.not(dom.isInline));                                          // 2734\n          topAncestor = list.last(ancestors);                                                                        // 2735\n          if (!dom.isInline(topAncestor)) {                                                                          // 2736\n            topAncestor = ancestors[ancestors.length - 2] || rng.sc.childNodes[rng.so];                              // 2737\n          }                                                                                                          // 2738\n        } else {                                                                                                     // 2739\n          topAncestor = rng.sc.childNodes[rng.so > 0 ? rng.so - 1 : 0];                                              // 2740\n        }                                                                                                            // 2741\n                                                                                                                     // 2742\n        // siblings not in paragraph                                                                                 // 2743\n        var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse();                                  // 2744\n        inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline));             // 2745\n                                                                                                                     // 2746\n        // wrap with paragraph                                                                                       // 2747\n        if (inlineSiblings.length) {                                                                                 // 2748\n          var para = dom.wrap(list.head(inlineSiblings), 'p');                                                       // 2749\n          dom.appendChildNodes(para, list.tail(inlineSiblings));                                                     // 2750\n        }                                                                                                            // 2751\n                                                                                                                     // 2752\n        return this.normalize();                                                                                     // 2753\n      };                                                                                                             // 2754\n                                                                                                                     // 2755\n      /**                                                                                                            // 2756\n       * insert node at current cursor                                                                               // 2757\n       *                                                                                                             // 2758\n       * @param {Node} node                                                                                          // 2759\n       * @return {Node}                                                                                              // 2760\n       */                                                                                                            // 2761\n      this.insertNode = function (node) {                                                                            // 2762\n        var rng = this.wrapBodyInlineWithPara().deleteContents();                                                    // 2763\n        var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node));                                          // 2764\n                                                                                                                     // 2765\n        if (info.rightNode) {                                                                                        // 2766\n          info.rightNode.parentNode.insertBefore(node, info.rightNode);                                              // 2767\n        } else {                                                                                                     // 2768\n          info.container.appendChild(node);                                                                          // 2769\n        }                                                                                                            // 2770\n                                                                                                                     // 2771\n        return node;                                                                                                 // 2772\n      };                                                                                                             // 2773\n                                                                                                                     // 2774\n      /**                                                                                                            // 2775\n       * insert html at current cursor                                                                               // 2776\n       */                                                                                                            // 2777\n      this.pasteHTML = function (markup) {                                                                           // 2778\n        var contentsContainer = $('<div></div>').html(markup)[0];                                                    // 2779\n        var childNodes = list.from(contentsContainer.childNodes);                                                    // 2780\n                                                                                                                     // 2781\n        var rng = this.wrapBodyInlineWithPara().deleteContents();                                                    // 2782\n                                                                                                                     // 2783\n        return childNodes.reverse().map(function (childNode) {                                                       // 2784\n          return rng.insertNode(childNode);                                                                          // 2785\n        }).reverse();                                                                                                // 2786\n      };                                                                                                             // 2787\n                                                                                                                     // 2788\n      /**                                                                                                            // 2789\n       * returns text in range                                                                                       // 2790\n       *                                                                                                             // 2791\n       * @return {String}                                                                                            // 2792\n       */                                                                                                            // 2793\n      this.toString = function () {                                                                                  // 2794\n        var nativeRng = nativeRange();                                                                               // 2795\n        return agent.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;                                      // 2796\n      };                                                                                                             // 2797\n                                                                                                                     // 2798\n      /**                                                                                                            // 2799\n       * returns range for word before cursor                                                                        // 2800\n       *                                                                                                             // 2801\n       * @param {Boolean} [findAfter] - find after cursor, default: false                                            // 2802\n       * @return {WrappedRange}                                                                                      // 2803\n       */                                                                                                            // 2804\n      this.getWordRange = function (findAfter) {                                                                     // 2805\n        var endPoint = this.getEndPoint();                                                                           // 2806\n                                                                                                                     // 2807\n        if (!dom.isCharPoint(endPoint)) {                                                                            // 2808\n          return this;                                                                                               // 2809\n        }                                                                                                            // 2810\n                                                                                                                     // 2811\n        var startPoint = dom.prevPointUntil(endPoint, function (point) {                                             // 2812\n          return !dom.isCharPoint(point);                                                                            // 2813\n        });                                                                                                          // 2814\n                                                                                                                     // 2815\n        if (findAfter) {                                                                                             // 2816\n          endPoint = dom.nextPointUntil(endPoint, function (point) {                                                 // 2817\n            return !dom.isCharPoint(point);                                                                          // 2818\n          });                                                                                                        // 2819\n        }                                                                                                            // 2820\n                                                                                                                     // 2821\n        return new WrappedRange(                                                                                     // 2822\n          startPoint.node,                                                                                           // 2823\n          startPoint.offset,                                                                                         // 2824\n          endPoint.node,                                                                                             // 2825\n          endPoint.offset                                                                                            // 2826\n        );                                                                                                           // 2827\n      };                                                                                                             // 2828\n                                                                                                                     // 2829\n      /**                                                                                                            // 2830\n       * create offsetPath bookmark                                                                                  // 2831\n       *                                                                                                             // 2832\n       * @param {Node} editable                                                                                      // 2833\n       */                                                                                                            // 2834\n      this.bookmark = function (editable) {                                                                          // 2835\n        return {                                                                                                     // 2836\n          s: {                                                                                                       // 2837\n            path: dom.makeOffsetPath(editable, sc),                                                                  // 2838\n            offset: so                                                                                               // 2839\n          },                                                                                                         // 2840\n          e: {                                                                                                       // 2841\n            path: dom.makeOffsetPath(editable, ec),                                                                  // 2842\n            offset: eo                                                                                               // 2843\n          }                                                                                                          // 2844\n        };                                                                                                           // 2845\n      };                                                                                                             // 2846\n                                                                                                                     // 2847\n      /**                                                                                                            // 2848\n       * create offsetPath bookmark base on paragraph                                                                // 2849\n       *                                                                                                             // 2850\n       * @param {Node[]} paras                                                                                       // 2851\n       */                                                                                                            // 2852\n      this.paraBookmark = function (paras) {                                                                         // 2853\n        return {                                                                                                     // 2854\n          s: {                                                                                                       // 2855\n            path: list.tail(dom.makeOffsetPath(list.head(paras), sc)),                                               // 2856\n            offset: so                                                                                               // 2857\n          },                                                                                                         // 2858\n          e: {                                                                                                       // 2859\n            path: list.tail(dom.makeOffsetPath(list.last(paras), ec)),                                               // 2860\n            offset: eo                                                                                               // 2861\n          }                                                                                                          // 2862\n        };                                                                                                           // 2863\n      };                                                                                                             // 2864\n                                                                                                                     // 2865\n      /**                                                                                                            // 2866\n       * getClientRects                                                                                              // 2867\n       * @return {Rect[]}                                                                                            // 2868\n       */                                                                                                            // 2869\n      this.getClientRects = function () {                                                                            // 2870\n        var nativeRng = nativeRange();                                                                               // 2871\n        return nativeRng.getClientRects();                                                                           // 2872\n      };                                                                                                             // 2873\n    };                                                                                                               // 2874\n                                                                                                                     // 2875\n  /**                                                                                                                // 2876\n   * @class core.range                                                                                               // 2877\n   *                                                                                                                 // 2878\n   * Data structure                                                                                                  // 2879\n   *  * BoundaryPoint: a point of dom tree                                                                           // 2880\n   *  * BoundaryPoints: two boundaryPoints corresponding to the start and the end of the Range                       // 2881\n   *                                                                                                                 // 2882\n   * See to http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position                      // 2883\n   *                                                                                                                 // 2884\n   * @singleton                                                                                                      // 2885\n   * @alternateClassName range                                                                                       // 2886\n   */                                                                                                                // 2887\n    return {                                                                                                         // 2888\n      /**                                                                                                            // 2889\n       * create Range Object From arguments or Browser Selection                                                     // 2890\n       *                                                                                                             // 2891\n       * @param {Node} sc - start container                                                                          // 2892\n       * @param {Number} so - start offset                                                                           // 2893\n       * @param {Node} ec - end container                                                                            // 2894\n       * @param {Number} eo - end offset                                                                             // 2895\n       * @return {WrappedRange}                                                                                      // 2896\n       */                                                                                                            // 2897\n      create: function (sc, so, ec, eo) {                                                                            // 2898\n        if (arguments.length === 4) {                                                                                // 2899\n          return new WrappedRange(sc, so, ec, eo);                                                                   // 2900\n        } else if (arguments.length === 2) { //collapsed                                                             // 2901\n          ec = sc;                                                                                                   // 2902\n          eo = so;                                                                                                   // 2903\n          return new WrappedRange(sc, so, ec, eo);                                                                   // 2904\n        } else {                                                                                                     // 2905\n          var wrappedRange = this.createFromSelection();                                                             // 2906\n          if (!wrappedRange && arguments.length === 1) {                                                             // 2907\n            wrappedRange = this.createFromNode(arguments[0]);                                                        // 2908\n            return wrappedRange.collapse(dom.emptyPara === arguments[0].innerHTML);                                  // 2909\n          }                                                                                                          // 2910\n          return wrappedRange;                                                                                       // 2911\n        }                                                                                                            // 2912\n      },                                                                                                             // 2913\n                                                                                                                     // 2914\n      createFromSelection: function () {                                                                             // 2915\n        var sc, so, ec, eo;                                                                                          // 2916\n        if (agent.isW3CRangeSupport) {                                                                               // 2917\n          var selection = document.getSelection();                                                                   // 2918\n          if (!selection || selection.rangeCount === 0) {                                                            // 2919\n            return null;                                                                                             // 2920\n          } else if (dom.isBody(selection.anchorNode)) {                                                             // 2921\n            // Firefox: returns entire body as range on initialization.                                              // 2922\n            // We won't never need it.                                                                               // 2923\n            return null;                                                                                             // 2924\n          }                                                                                                          // 2925\n                                                                                                                     // 2926\n          var nativeRng = selection.getRangeAt(0);                                                                   // 2927\n          sc = nativeRng.startContainer;                                                                             // 2928\n          so = nativeRng.startOffset;                                                                                // 2929\n          ec = nativeRng.endContainer;                                                                               // 2930\n          eo = nativeRng.endOffset;                                                                                  // 2931\n        } else { // IE8: TextRange                                                                                   // 2932\n          var textRange = document.selection.createRange();                                                          // 2933\n          var textRangeEnd = textRange.duplicate();                                                                  // 2934\n          textRangeEnd.collapse(false);                                                                              // 2935\n          var textRangeStart = textRange;                                                                            // 2936\n          textRangeStart.collapse(true);                                                                             // 2937\n                                                                                                                     // 2938\n          var startPoint = textRangeToPoint(textRangeStart, true),                                                   // 2939\n          endPoint = textRangeToPoint(textRangeEnd, false);                                                          // 2940\n                                                                                                                     // 2941\n          // same visible point case: range was collapsed.                                                           // 2942\n          if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) &&                                      // 2943\n              dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) &&                                     // 2944\n              endPoint.node.nextSibling === startPoint.node) {                                                       // 2945\n            startPoint = endPoint;                                                                                   // 2946\n          }                                                                                                          // 2947\n                                                                                                                     // 2948\n          sc = startPoint.cont;                                                                                      // 2949\n          so = startPoint.offset;                                                                                    // 2950\n          ec = endPoint.cont;                                                                                        // 2951\n          eo = endPoint.offset;                                                                                      // 2952\n        }                                                                                                            // 2953\n                                                                                                                     // 2954\n        return new WrappedRange(sc, so, ec, eo);                                                                     // 2955\n      },                                                                                                             // 2956\n                                                                                                                     // 2957\n      /**                                                                                                            // 2958\n       * @method                                                                                                     // 2959\n       *                                                                                                             // 2960\n       * create WrappedRange from node                                                                               // 2961\n       *                                                                                                             // 2962\n       * @param {Node} node                                                                                          // 2963\n       * @return {WrappedRange}                                                                                      // 2964\n       */                                                                                                            // 2965\n      createFromNode: function (node) {                                                                              // 2966\n        var sc = node;                                                                                               // 2967\n        var so = 0;                                                                                                  // 2968\n        var ec = node;                                                                                               // 2969\n        var eo = dom.nodeLength(ec);                                                                                 // 2970\n                                                                                                                     // 2971\n        // browsers can't target a picture or void node                                                              // 2972\n        if (dom.isVoid(sc)) {                                                                                        // 2973\n          so = dom.listPrev(sc).length - 1;                                                                          // 2974\n          sc = sc.parentNode;                                                                                        // 2975\n        }                                                                                                            // 2976\n        if (dom.isBR(ec)) {                                                                                          // 2977\n          eo = dom.listPrev(ec).length - 1;                                                                          // 2978\n          ec = ec.parentNode;                                                                                        // 2979\n        } else if (dom.isVoid(ec)) {                                                                                 // 2980\n          eo = dom.listPrev(ec).length;                                                                              // 2981\n          ec = ec.parentNode;                                                                                        // 2982\n        }                                                                                                            // 2983\n                                                                                                                     // 2984\n        return this.create(sc, so, ec, eo);                                                                          // 2985\n      },                                                                                                             // 2986\n                                                                                                                     // 2987\n      /**                                                                                                            // 2988\n       * create WrappedRange from node after position                                                                // 2989\n       *                                                                                                             // 2990\n       * @param {Node} node                                                                                          // 2991\n       * @return {WrappedRange}                                                                                      // 2992\n       */                                                                                                            // 2993\n      createFromNodeBefore: function (node) {                                                                        // 2994\n        return this.createFromNode(node).collapse(true);                                                             // 2995\n      },                                                                                                             // 2996\n                                                                                                                     // 2997\n      /**                                                                                                            // 2998\n       * create WrappedRange from node after position                                                                // 2999\n       *                                                                                                             // 3000\n       * @param {Node} node                                                                                          // 3001\n       * @return {WrappedRange}                                                                                      // 3002\n       */                                                                                                            // 3003\n      createFromNodeAfter: function (node) {                                                                         // 3004\n        return this.createFromNode(node).collapse();                                                                 // 3005\n      },                                                                                                             // 3006\n                                                                                                                     // 3007\n      /**                                                                                                            // 3008\n       * @method                                                                                                     // 3009\n       *                                                                                                             // 3010\n       * create WrappedRange from bookmark                                                                           // 3011\n       *                                                                                                             // 3012\n       * @param {Node} editable                                                                                      // 3013\n       * @param {Object} bookmark                                                                                    // 3014\n       * @return {WrappedRange}                                                                                      // 3015\n       */                                                                                                            // 3016\n      createFromBookmark: function (editable, bookmark) {                                                            // 3017\n        var sc = dom.fromOffsetPath(editable, bookmark.s.path);                                                      // 3018\n        var so = bookmark.s.offset;                                                                                  // 3019\n        var ec = dom.fromOffsetPath(editable, bookmark.e.path);                                                      // 3020\n        var eo = bookmark.e.offset;                                                                                  // 3021\n        return new WrappedRange(sc, so, ec, eo);                                                                     // 3022\n      },                                                                                                             // 3023\n                                                                                                                     // 3024\n      /**                                                                                                            // 3025\n       * @method                                                                                                     // 3026\n       *                                                                                                             // 3027\n       * create WrappedRange from paraBookmark                                                                       // 3028\n       *                                                                                                             // 3029\n       * @param {Object} bookmark                                                                                    // 3030\n       * @param {Node[]} paras                                                                                       // 3031\n       * @return {WrappedRange}                                                                                      // 3032\n       */                                                                                                            // 3033\n      createFromParaBookmark: function (bookmark, paras) {                                                           // 3034\n        var so = bookmark.s.offset;                                                                                  // 3035\n        var eo = bookmark.e.offset;                                                                                  // 3036\n        var sc = dom.fromOffsetPath(list.head(paras), bookmark.s.path);                                              // 3037\n        var ec = dom.fromOffsetPath(list.last(paras), bookmark.e.path);                                              // 3038\n                                                                                                                     // 3039\n        return new WrappedRange(sc, so, ec, eo);                                                                     // 3040\n      }                                                                                                              // 3041\n    };                                                                                                               // 3042\n  })();                                                                                                              // 3043\n                                                                                                                     // 3044\n  /**                                                                                                                // 3045\n   * @class core.async                                                                                               // 3046\n   *                                                                                                                 // 3047\n   * Async functions which returns `Promise`                                                                         // 3048\n   *                                                                                                                 // 3049\n   * @singleton                                                                                                      // 3050\n   * @alternateClassName async                                                                                       // 3051\n   */                                                                                                                // 3052\n  var async = (function () {                                                                                         // 3053\n    /**                                                                                                              // 3054\n     * @method readFileAsDataURL                                                                                     // 3055\n     *                                                                                                               // 3056\n     * read contents of file as representing URL                                                                     // 3057\n     *                                                                                                               // 3058\n     * @param {File} file                                                                                            // 3059\n     * @return {Promise} - then: dataUrl                                                                             // 3060\n     */                                                                                                              // 3061\n    var readFileAsDataURL = function (file) {                                                                        // 3062\n      return $.Deferred(function (deferred) {                                                                        // 3063\n        $.extend(new FileReader(), {                                                                                 // 3064\n          onload: function (e) {                                                                                     // 3065\n            var dataURL = e.target.result;                                                                           // 3066\n            deferred.resolve(dataURL);                                                                               // 3067\n          },                                                                                                         // 3068\n          onerror: function () {                                                                                     // 3069\n            deferred.reject(this);                                                                                   // 3070\n          }                                                                                                          // 3071\n        }).readAsDataURL(file);                                                                                      // 3072\n      }).promise();                                                                                                  // 3073\n    };                                                                                                               // 3074\n                                                                                                                     // 3075\n    /**                                                                                                              // 3076\n     * @method createImage                                                                                           // 3077\n     *                                                                                                               // 3078\n     * create `<image>` from url string                                                                              // 3079\n     *                                                                                                               // 3080\n     * @param {String} url                                                                                           // 3081\n     * @return {Promise} - then: $image                                                                              // 3082\n     */                                                                                                              // 3083\n    var createImage = function (url) {                                                                               // 3084\n      return $.Deferred(function (deferred) {                                                                        // 3085\n        var $img = $('<img>');                                                                                       // 3086\n                                                                                                                     // 3087\n        $img.one('load', function () {                                                                               // 3088\n          $img.off('error abort');                                                                                   // 3089\n          deferred.resolve($img);                                                                                    // 3090\n        }).one('error abort', function () {                                                                          // 3091\n          $img.off('load').detach();                                                                                 // 3092\n          deferred.reject($img);                                                                                     // 3093\n        }).css({                                                                                                     // 3094\n          display: 'none'                                                                                            // 3095\n        }).appendTo(document.body).attr('src', url);                                                                 // 3096\n      }).promise();                                                                                                  // 3097\n    };                                                                                                               // 3098\n                                                                                                                     // 3099\n    return {                                                                                                         // 3100\n      readFileAsDataURL: readFileAsDataURL,                                                                          // 3101\n      createImage: createImage                                                                                       // 3102\n    };                                                                                                               // 3103\n  })();                                                                                                              // 3104\n                                                                                                                     // 3105\n  /**                                                                                                                // 3106\n   * @class editing.History                                                                                          // 3107\n   *                                                                                                                 // 3108\n   * Editor History                                                                                                  // 3109\n   *                                                                                                                 // 3110\n   */                                                                                                                // 3111\n  var History = function ($editable) {                                                                               // 3112\n    var stack = [], stackOffset = -1;                                                                                // 3113\n    var editable = $editable[0];                                                                                     // 3114\n                                                                                                                     // 3115\n    var makeSnapshot = function () {                                                                                 // 3116\n      var rng = range.create(editable);                                                                              // 3117\n      var emptyBookmark = {s: {path: [], offset: 0}, e: {path: [], offset: 0}};                                      // 3118\n                                                                                                                     // 3119\n      return {                                                                                                       // 3120\n        contents: $editable.html(),                                                                                  // 3121\n        bookmark: (rng ? rng.bookmark(editable) : emptyBookmark)                                                     // 3122\n      };                                                                                                             // 3123\n    };                                                                                                               // 3124\n                                                                                                                     // 3125\n    var applySnapshot = function (snapshot) {                                                                        // 3126\n      if (snapshot.contents !== null) {                                                                              // 3127\n        $editable.html(snapshot.contents);                                                                           // 3128\n      }                                                                                                              // 3129\n      if (snapshot.bookmark !== null) {                                                                              // 3130\n        range.createFromBookmark(editable, snapshot.bookmark).select();                                              // 3131\n      }                                                                                                              // 3132\n    };                                                                                                               // 3133\n                                                                                                                     // 3134\n    /**                                                                                                              // 3135\n    * @method rewind                                                                                                 // 3136\n    * Rewinds the history stack back to the first snapshot taken.                                                    // 3137\n    * Leaves the stack intact, so that \"Redo\" can still be used.                                                     // 3138\n    */                                                                                                               // 3139\n    this.rewind = function () {                                                                                      // 3140\n      // Create snap shot if not yet recorded                                                                        // 3141\n      if ($editable.html() !== stack[stackOffset].contents) {                                                        // 3142\n        this.recordUndo();                                                                                           // 3143\n      }                                                                                                              // 3144\n                                                                                                                     // 3145\n      // Return to the first available snapshot.                                                                     // 3146\n      stackOffset = 0;                                                                                               // 3147\n                                                                                                                     // 3148\n      // Apply that snapshot.                                                                                        // 3149\n      applySnapshot(stack[stackOffset]);                                                                             // 3150\n    };                                                                                                               // 3151\n                                                                                                                     // 3152\n    /**                                                                                                              // 3153\n    * @method reset                                                                                                  // 3154\n    * Resets the history stack completely; reverting to an empty editor.                                             // 3155\n    */                                                                                                               // 3156\n    this.reset = function () {                                                                                       // 3157\n      // Clear the stack.                                                                                            // 3158\n      stack = [];                                                                                                    // 3159\n                                                                                                                     // 3160\n      // Restore stackOffset to its original value.                                                                  // 3161\n      stackOffset = -1;                                                                                              // 3162\n                                                                                                                     // 3163\n      // Clear the editable area.                                                                                    // 3164\n      $editable.html('');                                                                                            // 3165\n                                                                                                                     // 3166\n      // Record our first snapshot (of nothing).                                                                     // 3167\n      this.recordUndo();                                                                                             // 3168\n    };                                                                                                               // 3169\n                                                                                                                     // 3170\n    /**                                                                                                              // 3171\n     * undo                                                                                                          // 3172\n     */                                                                                                              // 3173\n    this.undo = function () {                                                                                        // 3174\n      // Create snap shot if not yet recorded                                                                        // 3175\n      if ($editable.html() !== stack[stackOffset].contents) {                                                        // 3176\n        this.recordUndo();                                                                                           // 3177\n      }                                                                                                              // 3178\n                                                                                                                     // 3179\n      if (0 < stackOffset) {                                                                                         // 3180\n        stackOffset--;                                                                                               // 3181\n        applySnapshot(stack[stackOffset]);                                                                           // 3182\n      }                                                                                                              // 3183\n    };                                                                                                               // 3184\n                                                                                                                     // 3185\n    /**                                                                                                              // 3186\n     * redo                                                                                                          // 3187\n     */                                                                                                              // 3188\n    this.redo = function () {                                                                                        // 3189\n      if (stack.length - 1 > stackOffset) {                                                                          // 3190\n        stackOffset++;                                                                                               // 3191\n        applySnapshot(stack[stackOffset]);                                                                           // 3192\n      }                                                                                                              // 3193\n    };                                                                                                               // 3194\n                                                                                                                     // 3195\n    /**                                                                                                              // 3196\n     * recorded undo                                                                                                 // 3197\n     */                                                                                                              // 3198\n    this.recordUndo = function () {                                                                                  // 3199\n      stackOffset++;                                                                                                 // 3200\n                                                                                                                     // 3201\n      // Wash out stack after stackOffset                                                                            // 3202\n      if (stack.length > stackOffset) {                                                                              // 3203\n        stack = stack.slice(0, stackOffset);                                                                         // 3204\n      }                                                                                                              // 3205\n                                                                                                                     // 3206\n      // Create new snapshot and push it to the end                                                                  // 3207\n      stack.push(makeSnapshot());                                                                                    // 3208\n    };                                                                                                               // 3209\n  };                                                                                                                 // 3210\n                                                                                                                     // 3211\n  /**                                                                                                                // 3212\n   * @class editing.Style                                                                                            // 3213\n   *                                                                                                                 // 3214\n   * Style                                                                                                           // 3215\n   *                                                                                                                 // 3216\n   */                                                                                                                // 3217\n  var Style = function () {                                                                                          // 3218\n    /**                                                                                                              // 3219\n     * @method jQueryCSS                                                                                             // 3220\n     *                                                                                                               // 3221\n     * [workaround] for old jQuery                                                                                   // 3222\n     * passing an array of style properties to .css()                                                                // 3223\n     * will result in an object of property-value pairs.                                                             // 3224\n     * (compability with version < 1.9)                                                                              // 3225\n     *                                                                                                               // 3226\n     * @private                                                                                                      // 3227\n     * @param  {jQuery} $obj                                                                                         // 3228\n     * @param  {Array} propertyNames - An array of one or more CSS properties.                                       // 3229\n     * @return {Object}                                                                                              // 3230\n     */                                                                                                              // 3231\n    var jQueryCSS = function ($obj, propertyNames) {                                                                 // 3232\n      if (agent.jqueryVersion < 1.9) {                                                                               // 3233\n        var result = {};                                                                                             // 3234\n        $.each(propertyNames, function (idx, propertyName) {                                                         // 3235\n          result[propertyName] = $obj.css(propertyName);                                                             // 3236\n        });                                                                                                          // 3237\n        return result;                                                                                               // 3238\n      }                                                                                                              // 3239\n      return $obj.css.call($obj, propertyNames);                                                                     // 3240\n    };                                                                                                               // 3241\n                                                                                                                     // 3242\n    /**                                                                                                              // 3243\n     * returns style object from node                                                                                // 3244\n     *                                                                                                               // 3245\n     * @param {jQuery} $node                                                                                         // 3246\n     * @return {Object}                                                                                              // 3247\n     */                                                                                                              // 3248\n    this.fromNode = function ($node) {                                                                               // 3249\n      var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'];                 // 3250\n      var styleInfo = jQueryCSS($node, properties) || {};                                                            // 3251\n      styleInfo['font-size'] = parseInt(styleInfo['font-size'], 10);                                                 // 3252\n      return styleInfo;                                                                                              // 3253\n    };                                                                                                               // 3254\n                                                                                                                     // 3255\n    /**                                                                                                              // 3256\n     * paragraph level style                                                                                         // 3257\n     *                                                                                                               // 3258\n     * @param {WrappedRange} rng                                                                                     // 3259\n     * @param {Object} styleInfo                                                                                     // 3260\n     */                                                                                                              // 3261\n    this.stylePara = function (rng, styleInfo) {                                                                     // 3262\n      $.each(rng.nodes(dom.isPara, {                                                                                 // 3263\n        includeAncestor: true                                                                                        // 3264\n      }), function (idx, para) {                                                                                     // 3265\n        $(para).css(styleInfo);                                                                                      // 3266\n      });                                                                                                            // 3267\n    };                                                                                                               // 3268\n                                                                                                                     // 3269\n    /**                                                                                                              // 3270\n     * insert and returns styleNodes on range.                                                                       // 3271\n     *                                                                                                               // 3272\n     * @param {WrappedRange} rng                                                                                     // 3273\n     * @param {Object} [options] - options for styleNodes                                                            // 3274\n     * @param {String} [options.nodeName] - default: `SPAN`                                                          // 3275\n     * @param {Boolean} [options.expandClosestSibling] - default: `false`                                            // 3276\n     * @param {Boolean} [options.onlyPartialContains] - default: `false`                                             // 3277\n     * @return {Node[]}                                                                                              // 3278\n     */                                                                                                              // 3279\n    this.styleNodes = function (rng, options) {                                                                      // 3280\n      rng = rng.splitText();                                                                                         // 3281\n                                                                                                                     // 3282\n      var nodeName = options && options.nodeName || 'SPAN';                                                          // 3283\n      var expandClosestSibling = !!(options && options.expandClosestSibling);                                        // 3284\n      var onlyPartialContains = !!(options && options.onlyPartialContains);                                          // 3285\n                                                                                                                     // 3286\n      if (rng.isCollapsed()) {                                                                                       // 3287\n        return [rng.insertNode(dom.create(nodeName))];                                                               // 3288\n      }                                                                                                              // 3289\n                                                                                                                     // 3290\n      var pred = dom.makePredByNodeName(nodeName);                                                                   // 3291\n      var nodes = rng.nodes(dom.isText, {                                                                            // 3292\n        fullyContains: true                                                                                          // 3293\n      }).map(function (text) {                                                                                       // 3294\n        return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName);                                      // 3295\n      });                                                                                                            // 3296\n                                                                                                                     // 3297\n      if (expandClosestSibling) {                                                                                    // 3298\n        if (onlyPartialContains) {                                                                                   // 3299\n          var nodesInRange = rng.nodes();                                                                            // 3300\n          // compose with partial contains predication                                                               // 3301\n          pred = func.and(pred, function (node) {                                                                    // 3302\n            return list.contains(nodesInRange, node);                                                                // 3303\n          });                                                                                                        // 3304\n        }                                                                                                            // 3305\n                                                                                                                     // 3306\n        return nodes.map(function (node) {                                                                           // 3307\n          var siblings = dom.withClosestSiblings(node, pred);                                                        // 3308\n          var head = list.head(siblings);                                                                            // 3309\n          var tails = list.tail(siblings);                                                                           // 3310\n          $.each(tails, function (idx, elem) {                                                                       // 3311\n            dom.appendChildNodes(head, elem.childNodes);                                                             // 3312\n            dom.remove(elem);                                                                                        // 3313\n          });                                                                                                        // 3314\n          return list.head(siblings);                                                                                // 3315\n        });                                                                                                          // 3316\n      } else {                                                                                                       // 3317\n        return nodes;                                                                                                // 3318\n      }                                                                                                              // 3319\n    };                                                                                                               // 3320\n                                                                                                                     // 3321\n    /**                                                                                                              // 3322\n     * get current style on cursor                                                                                   // 3323\n     *                                                                                                               // 3324\n     * @param {WrappedRange} rng                                                                                     // 3325\n     * @return {Object} - object contains style properties.                                                          // 3326\n     */                                                                                                              // 3327\n    this.current = function (rng) {                                                                                  // 3328\n      var $cont = $(!dom.isElement(rng.sc) ? rng.sc.parentNode : rng.sc);                                            // 3329\n      var styleInfo = this.fromNode($cont);                                                                          // 3330\n                                                                                                                     // 3331\n      // document.queryCommandState for toggle state                                                                 // 3332\n      // [workaround] prevent Firefox nsresult: \"0x80004005 (NS_ERROR_FAILURE)\"                                      // 3333\n      try {                                                                                                          // 3334\n        styleInfo = $.extend(styleInfo, {                                                                            // 3335\n          'font-bold': document.queryCommandState('bold') ? 'bold' : 'normal',                                       // 3336\n          'font-italic': document.queryCommandState('italic') ? 'italic' : 'normal',                                 // 3337\n          'font-underline': document.queryCommandState('underline') ? 'underline' : 'normal',                        // 3338\n          'font-subscript': document.queryCommandState('subscript') ? 'subscript' : 'normal',                        // 3339\n          'font-superscript': document.queryCommandState('superscript') ? 'superscript' : 'normal',                  // 3340\n          'font-strikethrough': document.queryCommandState('strikethrough') ? 'strikethrough' : 'normal'             // 3341\n        });                                                                                                          // 3342\n      } catch (e) {}                                                                                                 // 3343\n                                                                                                                     // 3344\n      // list-style-type to list-style(unordered, ordered)                                                           // 3345\n      if (!rng.isOnList()) {                                                                                         // 3346\n        styleInfo['list-style'] = 'none';                                                                            // 3347\n      } else {                                                                                                       // 3348\n        var orderedTypes = ['circle', 'disc', 'disc-leading-zero', 'square'];                                        // 3349\n        var isUnordered = $.inArray(styleInfo['list-style-type'], orderedTypes) > -1;                                // 3350\n        styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered';                                             // 3351\n      }                                                                                                              // 3352\n                                                                                                                     // 3353\n      var para = dom.ancestor(rng.sc, dom.isPara);                                                                   // 3354\n      if (para && para.style['line-height']) {                                                                       // 3355\n        styleInfo['line-height'] = para.style.lineHeight;                                                            // 3356\n      } else {                                                                                                       // 3357\n        var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10);              // 3358\n        styleInfo['line-height'] = lineHeight.toFixed(1);                                                            // 3359\n      }                                                                                                              // 3360\n                                                                                                                     // 3361\n      styleInfo.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);                                     // 3362\n      styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable);                                                // 3363\n      styleInfo.range = rng;                                                                                         // 3364\n                                                                                                                     // 3365\n      return styleInfo;                                                                                              // 3366\n    };                                                                                                               // 3367\n  };                                                                                                                 // 3368\n                                                                                                                     // 3369\n                                                                                                                     // 3370\n  /**                                                                                                                // 3371\n   * @class editing.Bullet                                                                                           // 3372\n   *                                                                                                                 // 3373\n   * @alternateClassName Bullet                                                                                      // 3374\n   */                                                                                                                // 3375\n  var Bullet = function () {                                                                                         // 3376\n    var self = this;                                                                                                 // 3377\n                                                                                                                     // 3378\n    /**                                                                                                              // 3379\n     * toggle ordered list                                                                                           // 3380\n     */                                                                                                              // 3381\n    this.insertOrderedList = function (editable) {                                                                   // 3382\n      this.toggleList('OL', editable);                                                                               // 3383\n    };                                                                                                               // 3384\n                                                                                                                     // 3385\n    /**                                                                                                              // 3386\n     * toggle unordered list                                                                                         // 3387\n     */                                                                                                              // 3388\n    this.insertUnorderedList = function (editable) {                                                                 // 3389\n      this.toggleList('UL', editable);                                                                               // 3390\n    };                                                                                                               // 3391\n                                                                                                                     // 3392\n    /**                                                                                                              // 3393\n     * indent                                                                                                        // 3394\n     */                                                                                                              // 3395\n    this.indent = function (editable) {                                                                              // 3396\n      var self = this;                                                                                               // 3397\n      var rng = range.create(editable).wrapBodyInlineWithPara();                                                     // 3398\n                                                                                                                     // 3399\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });                                                  // 3400\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));                                               // 3401\n                                                                                                                     // 3402\n      $.each(clustereds, function (idx, paras) {                                                                     // 3403\n        var head = list.head(paras);                                                                                 // 3404\n        if (dom.isLi(head)) {                                                                                        // 3405\n          self.wrapList(paras, head.parentNode.nodeName);                                                            // 3406\n        } else {                                                                                                     // 3407\n          $.each(paras, function (idx, para) {                                                                       // 3408\n            $(para).css('marginLeft', function (idx, val) {                                                          // 3409\n              return (parseInt(val, 10) || 0) + 25;                                                                  // 3410\n            });                                                                                                      // 3411\n          });                                                                                                        // 3412\n        }                                                                                                            // 3413\n      });                                                                                                            // 3414\n                                                                                                                     // 3415\n      rng.select();                                                                                                  // 3416\n    };                                                                                                               // 3417\n                                                                                                                     // 3418\n    /**                                                                                                              // 3419\n     * outdent                                                                                                       // 3420\n     */                                                                                                              // 3421\n    this.outdent = function (editable) {                                                                             // 3422\n      var self = this;                                                                                               // 3423\n      var rng = range.create(editable).wrapBodyInlineWithPara();                                                     // 3424\n                                                                                                                     // 3425\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });                                                  // 3426\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));                                               // 3427\n                                                                                                                     // 3428\n      $.each(clustereds, function (idx, paras) {                                                                     // 3429\n        var head = list.head(paras);                                                                                 // 3430\n        if (dom.isLi(head)) {                                                                                        // 3431\n          self.releaseList([paras]);                                                                                 // 3432\n        } else {                                                                                                     // 3433\n          $.each(paras, function (idx, para) {                                                                       // 3434\n            $(para).css('marginLeft', function (idx, val) {                                                          // 3435\n              val = (parseInt(val, 10) || 0);                                                                        // 3436\n              return val > 25 ? val - 25 : '';                                                                       // 3437\n            });                                                                                                      // 3438\n          });                                                                                                        // 3439\n        }                                                                                                            // 3440\n      });                                                                                                            // 3441\n                                                                                                                     // 3442\n      rng.select();                                                                                                  // 3443\n    };                                                                                                               // 3444\n                                                                                                                     // 3445\n    /**                                                                                                              // 3446\n     * toggle list                                                                                                   // 3447\n     *                                                                                                               // 3448\n     * @param {String} listName - OL or UL                                                                           // 3449\n     */                                                                                                              // 3450\n    this.toggleList = function (listName, editable) {                                                                // 3451\n      var rng = range.create(editable).wrapBodyInlineWithPara();                                                     // 3452\n                                                                                                                     // 3453\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });                                                  // 3454\n      var bookmark = rng.paraBookmark(paras);                                                                        // 3455\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));                                               // 3456\n                                                                                                                     // 3457\n      // paragraph to list                                                                                           // 3458\n      if (list.find(paras, dom.isPurePara)) {                                                                        // 3459\n        var wrappedParas = [];                                                                                       // 3460\n        $.each(clustereds, function (idx, paras) {                                                                   // 3461\n          wrappedParas = wrappedParas.concat(self.wrapList(paras, listName));                                        // 3462\n        });                                                                                                          // 3463\n        paras = wrappedParas;                                                                                        // 3464\n      // list to paragraph or change list style                                                                      // 3465\n      } else {                                                                                                       // 3466\n        var diffLists = rng.nodes(dom.isList, {                                                                      // 3467\n          includeAncestor: true                                                                                      // 3468\n        }).filter(function (listNode) {                                                                              // 3469\n          return !$.nodeName(listNode, listName);                                                                    // 3470\n        });                                                                                                          // 3471\n                                                                                                                     // 3472\n        if (diffLists.length) {                                                                                      // 3473\n          $.each(diffLists, function (idx, listNode) {                                                               // 3474\n            dom.replace(listNode, listName);                                                                         // 3475\n          });                                                                                                        // 3476\n        } else {                                                                                                     // 3477\n          paras = this.releaseList(clustereds, true);                                                                // 3478\n        }                                                                                                            // 3479\n      }                                                                                                              // 3480\n                                                                                                                     // 3481\n      range.createFromParaBookmark(bookmark, paras).select();                                                        // 3482\n    };                                                                                                               // 3483\n                                                                                                                     // 3484\n    /**                                                                                                              // 3485\n     * @param {Node[]} paras                                                                                         // 3486\n     * @param {String} listName                                                                                      // 3487\n     * @return {Node[]}                                                                                              // 3488\n     */                                                                                                              // 3489\n    this.wrapList = function (paras, listName) {                                                                     // 3490\n      var head = list.head(paras);                                                                                   // 3491\n      var last = list.last(paras);                                                                                   // 3492\n                                                                                                                     // 3493\n      var prevList = dom.isList(head.previousSibling) && head.previousSibling;                                       // 3494\n      var nextList = dom.isList(last.nextSibling) && last.nextSibling;                                               // 3495\n                                                                                                                     // 3496\n      var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last);                                // 3497\n                                                                                                                     // 3498\n      // P to LI                                                                                                     // 3499\n      paras = paras.map(function (para) {                                                                            // 3500\n        return dom.isPurePara(para) ? dom.replace(para, 'LI') : para;                                                // 3501\n      });                                                                                                            // 3502\n                                                                                                                     // 3503\n      // append to list(<ul>, <ol>)                                                                                  // 3504\n      dom.appendChildNodes(listNode, paras);                                                                         // 3505\n                                                                                                                     // 3506\n      if (nextList) {                                                                                                // 3507\n        dom.appendChildNodes(listNode, list.from(nextList.childNodes));                                              // 3508\n        dom.remove(nextList);                                                                                        // 3509\n      }                                                                                                              // 3510\n                                                                                                                     // 3511\n      return paras;                                                                                                  // 3512\n    };                                                                                                               // 3513\n                                                                                                                     // 3514\n    /**                                                                                                              // 3515\n     * @method releaseList                                                                                           // 3516\n     *                                                                                                               // 3517\n     * @param {Array[]} clustereds                                                                                   // 3518\n     * @param {Boolean} isEscapseToBody                                                                              // 3519\n     * @return {Node[]}                                                                                              // 3520\n     */                                                                                                              // 3521\n    this.releaseList = function (clustereds, isEscapseToBody) {                                                      // 3522\n      var releasedParas = [];                                                                                        // 3523\n                                                                                                                     // 3524\n      $.each(clustereds, function (idx, paras) {                                                                     // 3525\n        var head = list.head(paras);                                                                                 // 3526\n        var last = list.last(paras);                                                                                 // 3527\n                                                                                                                     // 3528\n        var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) :                                        // 3529\n                                         head.parentNode;                                                            // 3530\n        var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {                                    // 3531\n          node: last.parentNode,                                                                                     // 3532\n          offset: dom.position(last) + 1                                                                             // 3533\n        }, {                                                                                                         // 3534\n          isSkipPaddingBlankHTML: true                                                                               // 3535\n        }) : null;                                                                                                   // 3536\n                                                                                                                     // 3537\n        var middleList = dom.splitTree(headList, {                                                                   // 3538\n          node: head.parentNode,                                                                                     // 3539\n          offset: dom.position(head)                                                                                 // 3540\n        }, {                                                                                                         // 3541\n          isSkipPaddingBlankHTML: true                                                                               // 3542\n        });                                                                                                          // 3543\n                                                                                                                     // 3544\n        paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) :                                         // 3545\n                                  list.from(middleList.childNodes).filter(dom.isLi);                                 // 3546\n                                                                                                                     // 3547\n        // LI to P                                                                                                   // 3548\n        if (isEscapseToBody || !dom.isList(headList.parentNode)) {                                                   // 3549\n          paras = paras.map(function (para) {                                                                        // 3550\n            return dom.replace(para, 'P');                                                                           // 3551\n          });                                                                                                        // 3552\n        }                                                                                                            // 3553\n                                                                                                                     // 3554\n        $.each(list.from(paras).reverse(), function (idx, para) {                                                    // 3555\n          dom.insertAfter(para, headList);                                                                           // 3556\n        });                                                                                                          // 3557\n                                                                                                                     // 3558\n        // remove empty lists                                                                                        // 3559\n        var rootLists = list.compact([headList, middleList, lastList]);                                              // 3560\n        $.each(rootLists, function (idx, rootList) {                                                                 // 3561\n          var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList));                               // 3562\n          $.each(listNodes.reverse(), function (idx, listNode) {                                                     // 3563\n            if (!dom.nodeLength(listNode)) {                                                                         // 3564\n              dom.remove(listNode, true);                                                                            // 3565\n            }                                                                                                        // 3566\n          });                                                                                                        // 3567\n        });                                                                                                          // 3568\n                                                                                                                     // 3569\n        releasedParas = releasedParas.concat(paras);                                                                 // 3570\n      });                                                                                                            // 3571\n                                                                                                                     // 3572\n      return releasedParas;                                                                                          // 3573\n    };                                                                                                               // 3574\n  };                                                                                                                 // 3575\n                                                                                                                     // 3576\n                                                                                                                     // 3577\n  /**                                                                                                                // 3578\n   * @class editing.Typing                                                                                           // 3579\n   *                                                                                                                 // 3580\n   * Typing                                                                                                          // 3581\n   *                                                                                                                 // 3582\n   */                                                                                                                // 3583\n  var Typing = function () {                                                                                         // 3584\n                                                                                                                     // 3585\n    // a Bullet instance to toggle lists off                                                                         // 3586\n    var bullet = new Bullet();                                                                                       // 3587\n                                                                                                                     // 3588\n    /**                                                                                                              // 3589\n     * insert tab                                                                                                    // 3590\n     *                                                                                                               // 3591\n     * @param {WrappedRange} rng                                                                                     // 3592\n     * @param {Number} tabsize                                                                                       // 3593\n     */                                                                                                              // 3594\n    this.insertTab = function (rng, tabsize) {                                                                       // 3595\n      var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR));                                          // 3596\n      rng = rng.deleteContents();                                                                                    // 3597\n      rng.insertNode(tab, true);                                                                                     // 3598\n                                                                                                                     // 3599\n      rng = range.create(tab, tabsize);                                                                              // 3600\n      rng.select();                                                                                                  // 3601\n    };                                                                                                               // 3602\n                                                                                                                     // 3603\n    /**                                                                                                              // 3604\n     * insert paragraph                                                                                              // 3605\n     */                                                                                                              // 3606\n    this.insertParagraph = function (editable) {                                                                     // 3607\n      var rng = range.create(editable);                                                                              // 3608\n                                                                                                                     // 3609\n      // deleteContents on range.                                                                                    // 3610\n      rng = rng.deleteContents();                                                                                    // 3611\n                                                                                                                     // 3612\n      // Wrap range if it needs to be wrapped by paragraph                                                           // 3613\n      rng = rng.wrapBodyInlineWithPara();                                                                            // 3614\n                                                                                                                     // 3615\n      // finding paragraph                                                                                           // 3616\n      var splitRoot = dom.ancestor(rng.sc, dom.isPara);                                                              // 3617\n                                                                                                                     // 3618\n      var nextPara;                                                                                                  // 3619\n      // on paragraph: split paragraph                                                                               // 3620\n      if (splitRoot) {                                                                                               // 3621\n        // if it is an empty line with li                                                                            // 3622\n        if (dom.isEmpty(splitRoot) && dom.isLi(splitRoot)) {                                                         // 3623\n          // toogle UL/OL and escape                                                                                 // 3624\n          bullet.toggleList(splitRoot.parentNode.nodeName);                                                          // 3625\n          return;                                                                                                    // 3626\n        // if it is an empty line with para on blockquote                                                            // 3627\n        } else if (dom.isEmpty(splitRoot) && dom.isPara(splitRoot) && dom.isBlockquote(splitRoot.parentNode)) {      // 3628\n          // escape blockquote                                                                                       // 3629\n          dom.insertAfter(splitRoot, splitRoot.parentNode);                                                          // 3630\n          nextPara = splitRoot;                                                                                      // 3631\n        // if new line has content (not a line break)                                                                // 3632\n        } else {                                                                                                     // 3633\n          nextPara = dom.splitTree(splitRoot, rng.getStartPoint());                                                  // 3634\n                                                                                                                     // 3635\n          var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor);                                       // 3636\n          emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor));                       // 3637\n                                                                                                                     // 3638\n          $.each(emptyAnchors, function (idx, anchor) {                                                              // 3639\n            dom.remove(anchor);                                                                                      // 3640\n          });                                                                                                        // 3641\n                                                                                                                     // 3642\n          // replace empty heading or pre with P tag                                                                 // 3643\n          if ((dom.isHeading(nextPara) || dom.isPre(nextPara)) && dom.isEmpty(nextPara)) {                           // 3644\n            nextPara = dom.replace(nextPara, 'p');                                                                   // 3645\n          }                                                                                                          // 3646\n        }                                                                                                            // 3647\n      // no paragraph: insert empty paragraph                                                                        // 3648\n      } else {                                                                                                       // 3649\n        var next = rng.sc.childNodes[rng.so];                                                                        // 3650\n        nextPara = $(dom.emptyPara)[0];                                                                              // 3651\n        if (next) {                                                                                                  // 3652\n          rng.sc.insertBefore(nextPara, next);                                                                       // 3653\n        } else {                                                                                                     // 3654\n          rng.sc.appendChild(nextPara);                                                                              // 3655\n        }                                                                                                            // 3656\n      }                                                                                                              // 3657\n                                                                                                                     // 3658\n      range.create(nextPara, 0).normalize().select().scrollIntoView(editable);                                       // 3659\n    };                                                                                                               // 3660\n  };                                                                                                                 // 3661\n                                                                                                                     // 3662\n  /**                                                                                                                // 3663\n   * @class editing.Table                                                                                            // 3664\n   *                                                                                                                 // 3665\n   * Table                                                                                                           // 3666\n   *                                                                                                                 // 3667\n   */                                                                                                                // 3668\n  var Table = function () {                                                                                          // 3669\n    /**                                                                                                              // 3670\n     * handle tab key                                                                                                // 3671\n     *                                                                                                               // 3672\n     * @param {WrappedRange} rng                                                                                     // 3673\n     * @param {Boolean} isShift                                                                                      // 3674\n     */                                                                                                              // 3675\n    this.tab = function (rng, isShift) {                                                                             // 3676\n      var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);                                                     // 3677\n      var table = dom.ancestor(cell, dom.isTable);                                                                   // 3678\n      var cells = dom.listDescendant(table, dom.isCell);                                                             // 3679\n                                                                                                                     // 3680\n      var nextCell = list[isShift ? 'prev' : 'next'](cells, cell);                                                   // 3681\n      if (nextCell) {                                                                                                // 3682\n        range.create(nextCell, 0).select();                                                                          // 3683\n      }                                                                                                              // 3684\n    };                                                                                                               // 3685\n                                                                                                                     // 3686\n    /**                                                                                                              // 3687\n     * create empty table element                                                                                    // 3688\n     *                                                                                                               // 3689\n     * @param {Number} rowCount                                                                                      // 3690\n     * @param {Number} colCount                                                                                      // 3691\n     * @return {Node}                                                                                                // 3692\n     */                                                                                                              // 3693\n    this.createTable = function (colCount, rowCount, options) {                                                      // 3694\n      var tds = [], tdHTML;                                                                                          // 3695\n      for (var idxCol = 0; idxCol < colCount; idxCol++) {                                                            // 3696\n        tds.push('<td>' + dom.blank + '</td>');                                                                      // 3697\n      }                                                                                                              // 3698\n      tdHTML = tds.join('');                                                                                         // 3699\n                                                                                                                     // 3700\n      var trs = [], trHTML;                                                                                          // 3701\n      for (var idxRow = 0; idxRow < rowCount; idxRow++) {                                                            // 3702\n        trs.push('<tr>' + tdHTML + '</tr>');                                                                         // 3703\n      }                                                                                                              // 3704\n      trHTML = trs.join('');                                                                                         // 3705\n      var $table = $('<table>' + trHTML + '</table>');                                                               // 3706\n      if (options && options.tableClassName) {                                                                       // 3707\n        $table.addClass(options.tableClassName);                                                                     // 3708\n      }                                                                                                              // 3709\n                                                                                                                     // 3710\n      return $table[0];                                                                                              // 3711\n    };                                                                                                               // 3712\n  };                                                                                                                 // 3713\n                                                                                                                     // 3714\n                                                                                                                     // 3715\n  var KEY_BOGUS = 'bogus';                                                                                           // 3716\n                                                                                                                     // 3717\n  /**                                                                                                                // 3718\n   * @class Editor                                                                                                   // 3719\n   */                                                                                                                // 3720\n  var Editor = function (context) {                                                                                  // 3721\n    var self = this;                                                                                                 // 3722\n                                                                                                                     // 3723\n    var $note = context.layoutInfo.note;                                                                             // 3724\n    var $editor = context.layoutInfo.editor;                                                                         // 3725\n    var $editable = context.layoutInfo.editable;                                                                     // 3726\n    var options = context.options;                                                                                   // 3727\n    var lang = options.langInfo;                                                                                     // 3728\n                                                                                                                     // 3729\n    var editable = $editable[0];                                                                                     // 3730\n    var lastRange = null;                                                                                            // 3731\n                                                                                                                     // 3732\n    var style = new Style();                                                                                         // 3733\n    var table = new Table();                                                                                         // 3734\n    var typing = new Typing();                                                                                       // 3735\n    var bullet = new Bullet();                                                                                       // 3736\n    var history = new History($editable);                                                                            // 3737\n                                                                                                                     // 3738\n    this.initialize = function () {                                                                                  // 3739\n      // bind custom events                                                                                          // 3740\n      $editable.on('keydown', function (event) {                                                                     // 3741\n        if (event.keyCode === key.code.ENTER) {                                                                      // 3742\n          context.triggerEvent('enter', event);                                                                      // 3743\n        }                                                                                                            // 3744\n        context.triggerEvent('keydown', event);                                                                      // 3745\n                                                                                                                     // 3746\n        if (options.shortcuts && !event.isDefaultPrevented()) {                                                      // 3747\n          self.handleKeyMap(event);                                                                                  // 3748\n        }                                                                                                            // 3749\n      }).on('keyup', function (event) {                                                                              // 3750\n        context.triggerEvent('keyup', event);                                                                        // 3751\n      }).on('focus', function (event) {                                                                              // 3752\n        context.triggerEvent('focus', event);                                                                        // 3753\n      }).on('blur', function (event) {                                                                               // 3754\n        context.triggerEvent('blur', event);                                                                         // 3755\n      }).on('mousedown', function (event) {                                                                          // 3756\n        context.triggerEvent('mousedown', event);                                                                    // 3757\n      }).on('mouseup', function (event) {                                                                            // 3758\n        context.triggerEvent('mouseup', event);                                                                      // 3759\n      }).on('scroll', function (event) {                                                                             // 3760\n        context.triggerEvent('scroll', event);                                                                       // 3761\n      }).on('paste', function (event) {                                                                              // 3762\n        context.triggerEvent('paste', event);                                                                        // 3763\n      });                                                                                                            // 3764\n                                                                                                                     // 3765\n      // init content before set event                                                                               // 3766\n      $editable.html(dom.html($note) || dom.emptyPara);                                                              // 3767\n                                                                                                                     // 3768\n      // [workaround] IE doesn't have input events for contentEditable                                               // 3769\n      // - see: https://goo.gl/4bfIvA                                                                                // 3770\n      var changeEventName = agent.isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input';  // 3771\n      $editable.on(changeEventName, function () {                                                                    // 3772\n        context.triggerEvent('change', $editable.html());                                                            // 3773\n      });                                                                                                            // 3774\n                                                                                                                     // 3775\n      $editor.on('focusin', function (event) {                                                                       // 3776\n        context.triggerEvent('focusin', event);                                                                      // 3777\n      }).on('focusout', function (event) {                                                                           // 3778\n        context.triggerEvent('focusout', event);                                                                     // 3779\n      });                                                                                                            // 3780\n                                                                                                                     // 3781\n      if (!options.airMode && options.height) {                                                                      // 3782\n        this.setHeight(options.height);                                                                              // 3783\n      }                                                                                                              // 3784\n      if (!options.airMode && options.maxHeight) {                                                                   // 3785\n        $editable.css('max-height', options.maxHeight);                                                              // 3786\n      }                                                                                                              // 3787\n      if (!options.airMode && options.minHeight) {                                                                   // 3788\n        $editable.css('min-height', options.minHeight);                                                              // 3789\n      }                                                                                                              // 3790\n                                                                                                                     // 3791\n      history.recordUndo();                                                                                          // 3792\n    };                                                                                                               // 3793\n                                                                                                                     // 3794\n    this.destroy = function () {                                                                                     // 3795\n      $editable.off();                                                                                               // 3796\n    };                                                                                                               // 3797\n                                                                                                                     // 3798\n    this.handleKeyMap = function (event) {                                                                           // 3799\n      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];                                                       // 3800\n      var keys = [];                                                                                                 // 3801\n                                                                                                                     // 3802\n      if (event.metaKey) { keys.push('CMD'); }                                                                       // 3803\n      if (event.ctrlKey && !event.altKey) { keys.push('CTRL'); }                                                     // 3804\n      if (event.shiftKey) { keys.push('SHIFT'); }                                                                    // 3805\n                                                                                                                     // 3806\n      var keyName = key.nameFromCode[event.keyCode];                                                                 // 3807\n      if (keyName) {                                                                                                 // 3808\n        keys.push(keyName);                                                                                          // 3809\n      }                                                                                                              // 3810\n                                                                                                                     // 3811\n      var eventName = keyMap[keys.join('+')];                                                                        // 3812\n      if (eventName) {                                                                                               // 3813\n        event.preventDefault();                                                                                      // 3814\n        context.invoke(eventName);                                                                                   // 3815\n      } else if (key.isEdit(event.keyCode)) {                                                                        // 3816\n        this.afterCommand();                                                                                         // 3817\n      }                                                                                                              // 3818\n    };                                                                                                               // 3819\n                                                                                                                     // 3820\n    /**                                                                                                              // 3821\n     * create range                                                                                                  // 3822\n     * @return {WrappedRange}                                                                                        // 3823\n     */                                                                                                              // 3824\n    this.createRange = function () {                                                                                 // 3825\n      this.focus();                                                                                                  // 3826\n      return range.create(editable);                                                                                 // 3827\n    };                                                                                                               // 3828\n                                                                                                                     // 3829\n    /**                                                                                                              // 3830\n     * saveRange                                                                                                     // 3831\n     *                                                                                                               // 3832\n     * save current range                                                                                            // 3833\n     *                                                                                                               // 3834\n     * @param {Boolean} [thenCollapse=false]                                                                         // 3835\n     */                                                                                                              // 3836\n    this.saveRange = function (thenCollapse) {                                                                       // 3837\n      lastRange = this.createRange();                                                                                // 3838\n      if (thenCollapse) {                                                                                            // 3839\n        lastRange.collapse().select();                                                                               // 3840\n      }                                                                                                              // 3841\n    };                                                                                                               // 3842\n                                                                                                                     // 3843\n    /**                                                                                                              // 3844\n     * restoreRange                                                                                                  // 3845\n     *                                                                                                               // 3846\n     * restore lately range                                                                                          // 3847\n     */                                                                                                              // 3848\n    this.restoreRange = function () {                                                                                // 3849\n      if (lastRange) {                                                                                               // 3850\n        lastRange.select();                                                                                          // 3851\n        this.focus();                                                                                                // 3852\n      }                                                                                                              // 3853\n    };                                                                                                               // 3854\n                                                                                                                     // 3855\n    this.saveTarget = function (node) {                                                                              // 3856\n      $editable.data('target', node);                                                                                // 3857\n    };                                                                                                               // 3858\n                                                                                                                     // 3859\n    this.clearTarget = function () {                                                                                 // 3860\n      $editable.removeData('target');                                                                                // 3861\n    };                                                                                                               // 3862\n                                                                                                                     // 3863\n    this.restoreTarget = function () {                                                                               // 3864\n      return $editable.data('target');                                                                               // 3865\n    };                                                                                                               // 3866\n                                                                                                                     // 3867\n    /**                                                                                                              // 3868\n     * currentStyle                                                                                                  // 3869\n     *                                                                                                               // 3870\n     * current style                                                                                                 // 3871\n     * @return {Object|Boolean} unfocus                                                                              // 3872\n     */                                                                                                              // 3873\n    this.currentStyle = function () {                                                                                // 3874\n      var rng = range.create();                                                                                      // 3875\n      if (rng) {                                                                                                     // 3876\n        rng = rng.normalize();                                                                                       // 3877\n      }                                                                                                              // 3878\n      return rng ? style.current(rng) : style.fromNode($editable);                                                   // 3879\n    };                                                                                                               // 3880\n                                                                                                                     // 3881\n    /**                                                                                                              // 3882\n     * style from node                                                                                               // 3883\n     *                                                                                                               // 3884\n     * @param {jQuery} $node                                                                                         // 3885\n     * @return {Object}                                                                                              // 3886\n     */                                                                                                              // 3887\n    this.styleFromNode = function ($node) {                                                                          // 3888\n      return style.fromNode($node);                                                                                  // 3889\n    };                                                                                                               // 3890\n                                                                                                                     // 3891\n    /**                                                                                                              // 3892\n     * undo                                                                                                          // 3893\n     */                                                                                                              // 3894\n    this.undo = function () {                                                                                        // 3895\n      context.triggerEvent('before.command', $editable.html());                                                      // 3896\n      history.undo();                                                                                                // 3897\n      context.triggerEvent('change', $editable.html());                                                              // 3898\n    };                                                                                                               // 3899\n    context.memo('help.undo', lang.help.undo);                                                                       // 3900\n                                                                                                                     // 3901\n    /**                                                                                                              // 3902\n     * redo                                                                                                          // 3903\n     */                                                                                                              // 3904\n    this.redo = function () {                                                                                        // 3905\n      context.triggerEvent('before.command', $editable.html());                                                      // 3906\n      history.redo();                                                                                                // 3907\n      context.triggerEvent('change', $editable.html());                                                              // 3908\n    };                                                                                                               // 3909\n    context.memo('help.redo', lang.help.redo);                                                                       // 3910\n                                                                                                                     // 3911\n    /**                                                                                                              // 3912\n     * before command                                                                                                // 3913\n     */                                                                                                              // 3914\n    var beforeCommand = this.beforeCommand = function () {                                                           // 3915\n      context.triggerEvent('before.command', $editable.html());                                                      // 3916\n      // keep focus on editable before command execution                                                             // 3917\n      self.focus();                                                                                                  // 3918\n    };                                                                                                               // 3919\n                                                                                                                     // 3920\n    /**                                                                                                              // 3921\n     * after command                                                                                                 // 3922\n     * @param {Boolean} isPreventTrigger                                                                             // 3923\n     */                                                                                                              // 3924\n    var afterCommand = this.afterCommand = function (isPreventTrigger) {                                             // 3925\n      history.recordUndo();                                                                                          // 3926\n      if (!isPreventTrigger) {                                                                                       // 3927\n        context.triggerEvent('change', $editable.html());                                                            // 3928\n      }                                                                                                              // 3929\n    };                                                                                                               // 3930\n                                                                                                                     // 3931\n    /* jshint ignore:start */                                                                                        // 3932\n    // native commands(with execCommand), generate function for execCommand                                          // 3933\n    var commands = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript',                      // 3934\n                    'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull',                                   // 3935\n                    'formatBlock', 'removeFormat',                                                                   // 3936\n                    'backColor', 'foreColor', 'fontName'];                                                           // 3937\n                                                                                                                     // 3938\n    for (var idx = 0, len = commands.length; idx < len; idx ++) {                                                    // 3939\n      this[commands[idx]] = (function (sCmd) {                                                                       // 3940\n        return function (value) {                                                                                    // 3941\n          beforeCommand();                                                                                           // 3942\n          document.execCommand(sCmd, false, value);                                                                  // 3943\n          afterCommand(true);                                                                                        // 3944\n        };                                                                                                           // 3945\n      })(commands[idx]);                                                                                             // 3946\n      context.memo('help.' + commands[idx], lang.help[commands[idx]]);                                               // 3947\n    }                                                                                                                // 3948\n    /* jshint ignore:end */                                                                                          // 3949\n                                                                                                                     // 3950\n    /**                                                                                                              // 3951\n     * handle tab key                                                                                                // 3952\n     */                                                                                                              // 3953\n    this.tab = function () {                                                                                         // 3954\n      var rng = this.createRange();                                                                                  // 3955\n      if (rng.isCollapsed() && rng.isOnCell()) {                                                                     // 3956\n        table.tab(rng);                                                                                              // 3957\n      } else {                                                                                                       // 3958\n        beforeCommand();                                                                                             // 3959\n        typing.insertTab(rng, options.tabSize);                                                                      // 3960\n        afterCommand();                                                                                              // 3961\n      }                                                                                                              // 3962\n    };                                                                                                               // 3963\n    context.memo('help.tab', lang.help.tab);                                                                         // 3964\n                                                                                                                     // 3965\n    /**                                                                                                              // 3966\n     * handle shift+tab key                                                                                          // 3967\n     */                                                                                                              // 3968\n    this.untab = function () {                                                                                       // 3969\n      var rng = this.createRange();                                                                                  // 3970\n      if (rng.isCollapsed() && rng.isOnCell()) {                                                                     // 3971\n        table.tab(rng, true);                                                                                        // 3972\n      }                                                                                                              // 3973\n    };                                                                                                               // 3974\n    context.memo('help.untab', lang.help.untab);                                                                     // 3975\n                                                                                                                     // 3976\n    /**                                                                                                              // 3977\n     * run given function between beforeCommand and afterCommand                                                     // 3978\n     */                                                                                                              // 3979\n    this.wrapCommand = function (fn) {                                                                               // 3980\n      return function () {                                                                                           // 3981\n        beforeCommand();                                                                                             // 3982\n        fn.apply(self, arguments);                                                                                   // 3983\n        afterCommand();                                                                                              // 3984\n      };                                                                                                             // 3985\n    };                                                                                                               // 3986\n                                                                                                                     // 3987\n    /**                                                                                                              // 3988\n     * insert paragraph                                                                                              // 3989\n     */                                                                                                              // 3990\n    this.insertParagraph = this.wrapCommand(function () {                                                            // 3991\n      typing.insertParagraph(editable);                                                                              // 3992\n    });                                                                                                              // 3993\n    context.memo('help.insertParagraph', lang.help.insertParagraph);                                                 // 3994\n                                                                                                                     // 3995\n    this.insertOrderedList = this.wrapCommand(function () {                                                          // 3996\n      bullet.insertOrderedList(editable);                                                                            // 3997\n    });                                                                                                              // 3998\n    context.memo('help.insertOrderedList', lang.help.insertOrderedList);                                             // 3999\n                                                                                                                     // 4000\n    this.insertUnorderedList = this.wrapCommand(function () {                                                        // 4001\n      bullet.insertUnorderedList(editable);                                                                          // 4002\n    });                                                                                                              // 4003\n    context.memo('help.insertUnorderedList', lang.help.insertUnorderedList);                                         // 4004\n                                                                                                                     // 4005\n    this.indent = this.wrapCommand(function () {                                                                     // 4006\n      bullet.indent(editable);                                                                                       // 4007\n    });                                                                                                              // 4008\n    context.memo('help.indent', lang.help.indent);                                                                   // 4009\n                                                                                                                     // 4010\n    this.outdent = this.wrapCommand(function () {                                                                    // 4011\n      bullet.outdent(editable);                                                                                      // 4012\n    });                                                                                                              // 4013\n    context.memo('help.outdent', lang.help.outdent);                                                                 // 4014\n                                                                                                                     // 4015\n    /**                                                                                                              // 4016\n     * insert image                                                                                                  // 4017\n     *                                                                                                               // 4018\n     * @param {String} src                                                                                           // 4019\n     * @param {String|Function} param                                                                                // 4020\n     * @return {Promise}                                                                                             // 4021\n     */                                                                                                              // 4022\n    this.insertImage = function (src, param) {                                                                       // 4023\n      return async.createImage(src, param).then(function ($image) {                                                  // 4024\n        beforeCommand();                                                                                             // 4025\n                                                                                                                     // 4026\n        if (typeof param === 'function') {                                                                           // 4027\n          param($image);                                                                                             // 4028\n        } else {                                                                                                     // 4029\n          if (typeof param === 'string') {                                                                           // 4030\n            $image.attr('data-filename', param);                                                                     // 4031\n          }                                                                                                          // 4032\n          $image.css('width', Math.min($editable.width(), $image.width()));                                          // 4033\n        }                                                                                                            // 4034\n                                                                                                                     // 4035\n        $image.show();                                                                                               // 4036\n        range.create(editable).insertNode($image[0]);                                                                // 4037\n        range.createFromNodeAfter($image[0]).select();                                                               // 4038\n        afterCommand();                                                                                              // 4039\n      }).fail(function (e) {                                                                                         // 4040\n        context.triggerEvent('image.upload.error', e);                                                               // 4041\n      });                                                                                                            // 4042\n    };                                                                                                               // 4043\n                                                                                                                     // 4044\n    /**                                                                                                              // 4045\n     * insertImages                                                                                                  // 4046\n     * @param {File[]} files                                                                                         // 4047\n     */                                                                                                              // 4048\n    this.insertImages = function (files) {                                                                           // 4049\n      $.each(files, function (idx, file) {                                                                           // 4050\n        var filename = file.name;                                                                                    // 4051\n        if (options.maximumImageFileSize && options.maximumImageFileSize < file.size) {                              // 4052\n          context.triggerEvent('image.upload.error', lang.image.maximumFileSizeError);                               // 4053\n        } else {                                                                                                     // 4054\n          async.readFileAsDataURL(file).then(function (dataURL) {                                                    // 4055\n            return self.insertImage(dataURL, filename);                                                              // 4056\n          }).fail(function () {                                                                                      // 4057\n            context.triggerEvent('image.upload.error');                                                              // 4058\n          });                                                                                                        // 4059\n        }                                                                                                            // 4060\n      });                                                                                                            // 4061\n    };                                                                                                               // 4062\n                                                                                                                     // 4063\n    /**                                                                                                              // 4064\n     * insertImagesOrCallback                                                                                        // 4065\n     * @param {File[]} files                                                                                         // 4066\n     */                                                                                                              // 4067\n    this.insertImagesOrCallback = function (files) {                                                                 // 4068\n      var callbacks = options.callbacks;                                                                             // 4069\n                                                                                                                     // 4070\n      // If onImageUpload options setted                                                                             // 4071\n      if (callbacks.onImageUpload) {                                                                                 // 4072\n        context.triggerEvent('image.upload', files);                                                                 // 4073\n      // else insert Image as dataURL                                                                                // 4074\n      } else {                                                                                                       // 4075\n        this.insertImages(files);                                                                                    // 4076\n      }                                                                                                              // 4077\n    };                                                                                                               // 4078\n                                                                                                                     // 4079\n    /**                                                                                                              // 4080\n     * insertNode                                                                                                    // 4081\n     * insert node                                                                                                   // 4082\n     * @param {Node} node                                                                                            // 4083\n     */                                                                                                              // 4084\n    this.insertNode = this.wrapCommand(function (node) {                                                             // 4085\n      var rng = this.createRange();                                                                                  // 4086\n      rng.insertNode(node);                                                                                          // 4087\n      range.createFromNodeAfter(node).select();                                                                      // 4088\n    });                                                                                                              // 4089\n                                                                                                                     // 4090\n    /**                                                                                                              // 4091\n     * insert text                                                                                                   // 4092\n     * @param {String} text                                                                                          // 4093\n     */                                                                                                              // 4094\n    this.insertText = this.wrapCommand(function (text) {                                                             // 4095\n      var rng = this.createRange();                                                                                  // 4096\n      var textNode = rng.insertNode(dom.createText(text));                                                           // 4097\n      range.create(textNode, dom.nodeLength(textNode)).select();                                                     // 4098\n    });                                                                                                              // 4099\n                                                                                                                     // 4100\n    /**                                                                                                              // 4101\n     * return selected plain text                                                                                    // 4102\n     * @return {String} text                                                                                         // 4103\n     */                                                                                                              // 4104\n    this.getSelectedText = function () {                                                                             // 4105\n      var rng = this.createRange();                                                                                  // 4106\n                                                                                                                     // 4107\n      // if range on anchor, expand range with anchor                                                                // 4108\n      if (rng.isOnAnchor()) {                                                                                        // 4109\n        rng = range.createFromNode(dom.ancestor(rng.sc, dom.isAnchor));                                              // 4110\n      }                                                                                                              // 4111\n                                                                                                                     // 4112\n      return rng.toString();                                                                                         // 4113\n    };                                                                                                               // 4114\n                                                                                                                     // 4115\n    /**                                                                                                              // 4116\n     * paste HTML                                                                                                    // 4117\n     * @param {String} markup                                                                                        // 4118\n     */                                                                                                              // 4119\n    this.pasteHTML = this.wrapCommand(function (markup) {                                                            // 4120\n      var contents = this.createRange().pasteHTML(markup);                                                           // 4121\n      range.createFromNodeAfter(list.last(contents)).select();                                                       // 4122\n    });                                                                                                              // 4123\n                                                                                                                     // 4124\n    /**                                                                                                              // 4125\n     * formatBlock                                                                                                   // 4126\n     *                                                                                                               // 4127\n     * @param {String} tagName                                                                                       // 4128\n     */                                                                                                              // 4129\n    this.formatBlock = this.wrapCommand(function (tagName) {                                                         // 4130\n      // [workaround] for MSIE, IE need `<`                                                                          // 4131\n      tagName = agent.isMSIE ? '<' + tagName + '>' : tagName;                                                        // 4132\n      document.execCommand('FormatBlock', false, tagName);                                                           // 4133\n    });                                                                                                              // 4134\n                                                                                                                     // 4135\n    this.formatPara = function () {                                                                                  // 4136\n      this.formatBlock('P');                                                                                         // 4137\n    };                                                                                                               // 4138\n    context.memo('help.formatPara', lang.help.formatPara);                                                           // 4139\n                                                                                                                     // 4140\n    /* jshint ignore:start */                                                                                        // 4141\n    for (var idx = 1; idx <= 6; idx ++) {                                                                            // 4142\n      this['formatH' + idx] = function (idx) {                                                                       // 4143\n        return function () {                                                                                         // 4144\n          this.formatBlock('H' + idx);                                                                               // 4145\n        };                                                                                                           // 4146\n      }(idx);                                                                                                        // 4147\n      context.memo('help.formatH'+idx, lang.help['formatH' + idx]);                                                  // 4148\n    };                                                                                                               // 4149\n    /* jshint ignore:end */                                                                                          // 4150\n                                                                                                                     // 4151\n    /**                                                                                                              // 4152\n     * fontSize                                                                                                      // 4153\n     *                                                                                                               // 4154\n     * @param {String} value - px                                                                                    // 4155\n     */                                                                                                              // 4156\n    this.fontSize = function (value) {                                                                               // 4157\n      var rng = this.createRange();                                                                                  // 4158\n                                                                                                                     // 4159\n      if (rng && rng.isCollapsed()) {                                                                                // 4160\n        var spans = style.styleNodes(rng);                                                                           // 4161\n        var firstSpan = list.head(spans);                                                                            // 4162\n                                                                                                                     // 4163\n        $(spans).css({                                                                                               // 4164\n          'font-size': value + 'px'                                                                                  // 4165\n        });                                                                                                          // 4166\n                                                                                                                     // 4167\n        // [workaround] added styled bogus span for style                                                            // 4168\n        //  - also bogus character needed for cursor position                                                        // 4169\n        if (firstSpan && !dom.nodeLength(firstSpan)) {                                                               // 4170\n          firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR;                                                            // 4171\n          range.createFromNodeAfter(firstSpan.firstChild).select();                                                  // 4172\n          $editable.data(KEY_BOGUS, firstSpan);                                                                      // 4173\n        }                                                                                                            // 4174\n      } else {                                                                                                       // 4175\n        beforeCommand();                                                                                             // 4176\n        $(style.styleNodes(rng)).css({                                                                               // 4177\n          'font-size': value + 'px'                                                                                  // 4178\n        });                                                                                                          // 4179\n        afterCommand();                                                                                              // 4180\n      }                                                                                                              // 4181\n    };                                                                                                               // 4182\n                                                                                                                     // 4183\n    /**                                                                                                              // 4184\n     * insert horizontal rule                                                                                        // 4185\n     */                                                                                                              // 4186\n    this.insertHorizontalRule = this.wrapCommand(function () {                                                       // 4187\n      var hrNode = this.createRange().insertNode(dom.create('HR'));                                                  // 4188\n      if (hrNode.nextSibling) {                                                                                      // 4189\n        range.create(hrNode.nextSibling, 0).normalize().select();                                                    // 4190\n      }                                                                                                              // 4191\n    });                                                                                                              // 4192\n    context.memo('help.insertHorizontalRule', lang.help.insertHorizontalRule);                                       // 4193\n                                                                                                                     // 4194\n    /**                                                                                                              // 4195\n     * remove bogus node and character                                                                               // 4196\n     */                                                                                                              // 4197\n    this.removeBogus = function () {                                                                                 // 4198\n      var bogusNode = $editable.data(KEY_BOGUS);                                                                     // 4199\n      if (!bogusNode) {                                                                                              // 4200\n        return;                                                                                                      // 4201\n      }                                                                                                              // 4202\n                                                                                                                     // 4203\n      var textNode = list.find(list.from(bogusNode.childNodes), dom.isText);                                         // 4204\n                                                                                                                     // 4205\n      var bogusCharIdx = textNode.nodeValue.indexOf(dom.ZERO_WIDTH_NBSP_CHAR);                                       // 4206\n      if (bogusCharIdx !== -1) {                                                                                     // 4207\n        textNode.deleteData(bogusCharIdx, 1);                                                                        // 4208\n      }                                                                                                              // 4209\n                                                                                                                     // 4210\n      if (dom.isEmpty(bogusNode)) {                                                                                  // 4211\n        dom.remove(bogusNode);                                                                                       // 4212\n      }                                                                                                              // 4213\n                                                                                                                     // 4214\n      $editable.removeData(KEY_BOGUS);                                                                               // 4215\n    };                                                                                                               // 4216\n                                                                                                                     // 4217\n    /**                                                                                                              // 4218\n     * lineHeight                                                                                                    // 4219\n     * @param {String} value                                                                                         // 4220\n     */                                                                                                              // 4221\n    this.lineHeight = this.wrapCommand(function (value) {                                                            // 4222\n      style.stylePara(this.createRange(), {                                                                          // 4223\n        lineHeight: value                                                                                            // 4224\n      });                                                                                                            // 4225\n    });                                                                                                              // 4226\n                                                                                                                     // 4227\n    /**                                                                                                              // 4228\n     * unlink                                                                                                        // 4229\n     *                                                                                                               // 4230\n     * @type command                                                                                                 // 4231\n     */                                                                                                              // 4232\n    this.unlink = function () {                                                                                      // 4233\n      var rng = this.createRange();                                                                                  // 4234\n      if (rng.isOnAnchor()) {                                                                                        // 4235\n        var anchor = dom.ancestor(rng.sc, dom.isAnchor);                                                             // 4236\n        rng = range.createFromNode(anchor);                                                                          // 4237\n        rng.select();                                                                                                // 4238\n                                                                                                                     // 4239\n        beforeCommand();                                                                                             // 4240\n        document.execCommand('unlink');                                                                              // 4241\n        afterCommand();                                                                                              // 4242\n      }                                                                                                              // 4243\n    };                                                                                                               // 4244\n                                                                                                                     // 4245\n    /**                                                                                                              // 4246\n     * create link (command)                                                                                         // 4247\n     *                                                                                                               // 4248\n     * @param {Object} linkInfo                                                                                      // 4249\n     */                                                                                                              // 4250\n    this.createLink = this.wrapCommand(function (linkInfo) {                                                         // 4251\n      var linkUrl = linkInfo.url;                                                                                    // 4252\n      var linkText = linkInfo.text;                                                                                  // 4253\n      var isNewWindow = linkInfo.isNewWindow;                                                                        // 4254\n      var rng = linkInfo.range || this.createRange();                                                                // 4255\n      var isTextChanged = rng.toString() !== linkText;                                                               // 4256\n                                                                                                                     // 4257\n      if (options.onCreateLink) {                                                                                    // 4258\n        linkUrl = options.onCreateLink(linkUrl);                                                                     // 4259\n      }                                                                                                              // 4260\n                                                                                                                     // 4261\n      var anchors = [];                                                                                              // 4262\n      if (isTextChanged) {                                                                                           // 4263\n        rng = rng.deleteContents();                                                                                  // 4264\n        var anchor = rng.insertNode($('<A>' + linkText + '</A>')[0]);                                                // 4265\n        anchors.push(anchor);                                                                                        // 4266\n      } else {                                                                                                       // 4267\n        anchors = style.styleNodes(rng, {                                                                            // 4268\n          nodeName: 'A',                                                                                             // 4269\n          expandClosestSibling: true,                                                                                // 4270\n          onlyPartialContains: true                                                                                  // 4271\n        });                                                                                                          // 4272\n      }                                                                                                              // 4273\n                                                                                                                     // 4274\n      $.each(anchors, function (idx, anchor) {                                                                       // 4275\n        $(anchor).attr('href', linkUrl);                                                                             // 4276\n        if (isNewWindow) {                                                                                           // 4277\n          $(anchor).attr('target', '_blank');                                                                        // 4278\n        } else {                                                                                                     // 4279\n          $(anchor).removeAttr('target');                                                                            // 4280\n        }                                                                                                            // 4281\n      });                                                                                                            // 4282\n                                                                                                                     // 4283\n      var startRange = range.createFromNodeBefore(list.head(anchors));                                               // 4284\n      var startPoint = startRange.getStartPoint();                                                                   // 4285\n      var endRange = range.createFromNodeAfter(list.last(anchors));                                                  // 4286\n      var endPoint = endRange.getEndPoint();                                                                         // 4287\n                                                                                                                     // 4288\n      range.create(                                                                                                  // 4289\n        startPoint.node,                                                                                             // 4290\n        startPoint.offset,                                                                                           // 4291\n        endPoint.node,                                                                                               // 4292\n        endPoint.offset                                                                                              // 4293\n      ).select();                                                                                                    // 4294\n    });                                                                                                              // 4295\n                                                                                                                     // 4296\n    /**                                                                                                              // 4297\n     * returns link info                                                                                             // 4298\n     *                                                                                                               // 4299\n     * @return {Object}                                                                                              // 4300\n     * @return {WrappedRange} return.range                                                                           // 4301\n     * @return {String} return.text                                                                                  // 4302\n     * @return {Boolean} [return.isNewWindow=true]                                                                   // 4303\n     * @return {String} [return.url=\"\"]                                                                              // 4304\n     */                                                                                                              // 4305\n    this.getLinkInfo = function () {                                                                                 // 4306\n      var rng = this.createRange().expand(dom.isAnchor);                                                             // 4307\n                                                                                                                     // 4308\n      // Get the first anchor on range(for edit).                                                                    // 4309\n      var $anchor = $(list.head(rng.nodes(dom.isAnchor)));                                                           // 4310\n                                                                                                                     // 4311\n      return {                                                                                                       // 4312\n        range: rng,                                                                                                  // 4313\n        text: rng.toString(),                                                                                        // 4314\n        isNewWindow: $anchor.length ? $anchor.attr('target') === '_blank' : false,                                   // 4315\n        url: $anchor.length ? $anchor.attr('href') : ''                                                              // 4316\n      };                                                                                                             // 4317\n    };                                                                                                               // 4318\n                                                                                                                     // 4319\n    /**                                                                                                              // 4320\n     * setting color                                                                                                 // 4321\n     *                                                                                                               // 4322\n     * @param {Object} sObjColor  color code                                                                         // 4323\n     * @param {String} sObjColor.foreColor foreground color                                                          // 4324\n     * @param {String} sObjColor.backColor background color                                                          // 4325\n     */                                                                                                              // 4326\n    this.color = this.wrapCommand(function (colorInfo) {                                                             // 4327\n      var foreColor = colorInfo.foreColor;                                                                           // 4328\n      var backColor = colorInfo.backColor;                                                                           // 4329\n                                                                                                                     // 4330\n      if (foreColor) { document.execCommand('foreColor', false, foreColor); }                                        // 4331\n      if (backColor) { document.execCommand('backColor', false, backColor); }                                        // 4332\n    });                                                                                                              // 4333\n                                                                                                                     // 4334\n    /**                                                                                                              // 4335\n     * insert Table                                                                                                  // 4336\n     *                                                                                                               // 4337\n     * @param {String} dimension of table (ex : \"5x5\")                                                               // 4338\n     */                                                                                                              // 4339\n    this.insertTable = this.wrapCommand(function (dim) {                                                             // 4340\n      var dimension = dim.split('x');                                                                                // 4341\n                                                                                                                     // 4342\n      var rng = this.createRange().deleteContents();                                                                 // 4343\n      rng.insertNode(table.createTable(dimension[0], dimension[1], options));                                        // 4344\n    });                                                                                                              // 4345\n                                                                                                                     // 4346\n    /**                                                                                                              // 4347\n     * float me                                                                                                      // 4348\n     *                                                                                                               // 4349\n     * @param {String} value                                                                                         // 4350\n     */                                                                                                              // 4351\n    this.floatMe = this.wrapCommand(function (value) {                                                               // 4352\n      var $target = $(this.restoreTarget());                                                                         // 4353\n      $target.css('float', value);                                                                                   // 4354\n    });                                                                                                              // 4355\n                                                                                                                     // 4356\n    /**                                                                                                              // 4357\n     * resize overlay element                                                                                        // 4358\n     * @param {String} value                                                                                         // 4359\n     */                                                                                                              // 4360\n    this.resize = this.wrapCommand(function (value) {                                                                // 4361\n      var $target = $(this.restoreTarget());                                                                         // 4362\n      $target.css({                                                                                                  // 4363\n        width: value * 100 + '%',                                                                                    // 4364\n        height: ''                                                                                                   // 4365\n      });                                                                                                            // 4366\n    });                                                                                                              // 4367\n                                                                                                                     // 4368\n    /**                                                                                                              // 4369\n     * @param {Position} pos                                                                                         // 4370\n     * @param {jQuery} $target - target element                                                                      // 4371\n     * @param {Boolean} [bKeepRatio] - keep ratio                                                                    // 4372\n     */                                                                                                              // 4373\n    this.resizeTo = function (pos, $target, bKeepRatio) {                                                            // 4374\n      var imageSize;                                                                                                 // 4375\n      if (bKeepRatio) {                                                                                              // 4376\n        var newRatio = pos.y / pos.x;                                                                                // 4377\n        var ratio = $target.data('ratio');                                                                           // 4378\n        imageSize = {                                                                                                // 4379\n          width: ratio > newRatio ? pos.x : pos.y / ratio,                                                           // 4380\n          height: ratio > newRatio ? pos.x * ratio : pos.y                                                           // 4381\n        };                                                                                                           // 4382\n      } else {                                                                                                       // 4383\n        imageSize = {                                                                                                // 4384\n          width: pos.x,                                                                                              // 4385\n          height: pos.y                                                                                              // 4386\n        };                                                                                                           // 4387\n      }                                                                                                              // 4388\n                                                                                                                     // 4389\n      $target.css(imageSize);                                                                                        // 4390\n    };                                                                                                               // 4391\n                                                                                                                     // 4392\n    /**                                                                                                              // 4393\n     * remove media object                                                                                           // 4394\n     */                                                                                                              // 4395\n    this.removeMedia = this.wrapCommand(function () {                                                                // 4396\n      var $target = $(this.restoreTarget()).detach();                                                                // 4397\n      context.triggerEvent('media.delete', $target, $editable);                                                      // 4398\n    });                                                                                                              // 4399\n                                                                                                                     // 4400\n    /**                                                                                                              // 4401\n     * returns whether editable area has focus or not.                                                               // 4402\n     */                                                                                                              // 4403\n    this.hasFocus = function () {                                                                                    // 4404\n      return $editable.is(':focus');                                                                                 // 4405\n    };                                                                                                               // 4406\n                                                                                                                     // 4407\n    /**                                                                                                              // 4408\n     * set focus                                                                                                     // 4409\n     */                                                                                                              // 4410\n    this.focus = function () {                                                                                       // 4411\n      // [workaround] Screen will move when page is scolled in IE.                                                   // 4412\n      //  - do focus when not focused                                                                                // 4413\n      if (!this.hasFocus()) {                                                                                        // 4414\n        $editable.focus();                                                                                           // 4415\n      }                                                                                                              // 4416\n    };                                                                                                               // 4417\n                                                                                                                     // 4418\n    /**                                                                                                              // 4419\n     * returns whether contents is empty or not.                                                                     // 4420\n     * @return {Boolean}                                                                                             // 4421\n     */                                                                                                              // 4422\n    this.isEmpty = function () {                                                                                     // 4423\n      return dom.isEmpty($editable[0]) || dom.emptyPara === $editable.html();                                        // 4424\n    };                                                                                                               // 4425\n                                                                                                                     // 4426\n    /**                                                                                                              // 4427\n     * Removes all contents and restores the editable instance to an _emptyPara_.                                    // 4428\n     */                                                                                                              // 4429\n    this.empty = function () {                                                                                       // 4430\n      context.invoke('code', dom.emptyPara);                                                                         // 4431\n    };                                                                                                               // 4432\n                                                                                                                     // 4433\n    /**                                                                                                              // 4434\n     * set height for editable                                                                                       // 4435\n     */                                                                                                              // 4436\n    this.setHeight = function (height) {                                                                             // 4437\n      $editable.outerHeight(height);                                                                                 // 4438\n    };                                                                                                               // 4439\n  };                                                                                                                 // 4440\n                                                                                                                     // 4441\n  var Clipboard = function (context) {                                                                               // 4442\n    var self = this;                                                                                                 // 4443\n                                                                                                                     // 4444\n    var $editable = context.layoutInfo.editable;                                                                     // 4445\n                                                                                                                     // 4446\n    this.events = {                                                                                                  // 4447\n      'summernote.keydown': function (we, e) {                                                                       // 4448\n        if (self.needKeydownHook()) {                                                                                // 4449\n          if ((e.ctrlKey || e.metaKey) && e.keyCode === key.code.V) {                                                // 4450\n            context.invoke('editor.saveRange');                                                                      // 4451\n            self.$paste.focus();                                                                                     // 4452\n                                                                                                                     // 4453\n            setTimeout(function () {                                                                                 // 4454\n              self.pasteByHook();                                                                                    // 4455\n            }, 0);                                                                                                   // 4456\n          }                                                                                                          // 4457\n        }                                                                                                            // 4458\n      }                                                                                                              // 4459\n    };                                                                                                               // 4460\n                                                                                                                     // 4461\n    this.needKeydownHook = function () {                                                                             // 4462\n      return (agent.isMSIE && agent.browserVersion > 10) || agent.isFF;                                              // 4463\n    };                                                                                                               // 4464\n                                                                                                                     // 4465\n    this.initialize = function () {                                                                                  // 4466\n      // [workaround] getting image from clipboard                                                                   // 4467\n      //  - IE11 and Firefox: CTRL+v hook                                                                            // 4468\n      //  - Webkit: event.clipboardData                                                                              // 4469\n      if (this.needKeydownHook()) {                                                                                  // 4470\n        this.$paste = $('<div />').attr('contenteditable', true).css({                                               // 4471\n          position: 'absolute',                                                                                      // 4472\n          left: -100000,                                                                                             // 4473\n          opacity: 0                                                                                                 // 4474\n        });                                                                                                          // 4475\n        $editable.before(this.$paste);                                                                               // 4476\n                                                                                                                     // 4477\n        this.$paste.on('paste', function (event) {                                                                   // 4478\n          context.triggerEvent('paste', event);                                                                      // 4479\n        });                                                                                                          // 4480\n      } else {                                                                                                       // 4481\n        $editable.on('paste', this.pasteByEvent);                                                                    // 4482\n      }                                                                                                              // 4483\n    };                                                                                                               // 4484\n                                                                                                                     // 4485\n    this.destroy = function () {                                                                                     // 4486\n      if (this.needKeydownHook()) {                                                                                  // 4487\n        this.$paste.remove();                                                                                        // 4488\n        this.$paste = null;                                                                                          // 4489\n      }                                                                                                              // 4490\n    };                                                                                                               // 4491\n                                                                                                                     // 4492\n    this.pasteByHook = function () {                                                                                 // 4493\n      var node = this.$paste[0].firstChild;                                                                          // 4494\n                                                                                                                     // 4495\n      if (dom.isImg(node)) {                                                                                         // 4496\n        var dataURI = node.src;                                                                                      // 4497\n        var decodedData = atob(dataURI.split(',')[1]);                                                               // 4498\n        var array = new Uint8Array(decodedData.length);                                                              // 4499\n        for (var i = 0; i < decodedData.length; i++) {                                                               // 4500\n          array[i] = decodedData.charCodeAt(i);                                                                      // 4501\n        }                                                                                                            // 4502\n                                                                                                                     // 4503\n        var blob = new Blob([array], { type: 'image/png' });                                                         // 4504\n        blob.name = 'clipboard.png';                                                                                 // 4505\n                                                                                                                     // 4506\n        context.invoke('editor.restoreRange');                                                                       // 4507\n        context.invoke('editor.focus');                                                                              // 4508\n        context.invoke('editor.insertImagesOrCallback', [blob]);                                                     // 4509\n      } else {                                                                                                       // 4510\n        var pasteContent = $('<div />').html(this.$paste.html()).html();                                             // 4511\n        context.invoke('editor.restoreRange');                                                                       // 4512\n        context.invoke('editor.focus');                                                                              // 4513\n                                                                                                                     // 4514\n        if (pasteContent) {                                                                                          // 4515\n          context.invoke('editor.pasteHTML', pasteContent);                                                          // 4516\n        }                                                                                                            // 4517\n      }                                                                                                              // 4518\n                                                                                                                     // 4519\n      this.$paste.empty();                                                                                           // 4520\n    };                                                                                                               // 4521\n                                                                                                                     // 4522\n    /**                                                                                                              // 4523\n     * paste by clipboard event                                                                                      // 4524\n     *                                                                                                               // 4525\n     * @param {Event} event                                                                                          // 4526\n     */                                                                                                              // 4527\n    this.pasteByEvent = function (event) {                                                                           // 4528\n      var clipboardData = event.originalEvent.clipboardData;                                                         // 4529\n      if (clipboardData && clipboardData.items && clipboardData.items.length) {                                      // 4530\n        var item = list.head(clipboardData.items);                                                                   // 4531\n        if (item.kind === 'file' && item.type.indexOf('image/') !== -1) {                                            // 4532\n          context.invoke('editor.insertImagesOrCallback', [item.getAsFile()]);                                       // 4533\n        }                                                                                                            // 4534\n        context.invoke('editor.afterCommand');                                                                       // 4535\n      }                                                                                                              // 4536\n    };                                                                                                               // 4537\n  };                                                                                                                 // 4538\n                                                                                                                     // 4539\n  var Dropzone = function (context) {                                                                                // 4540\n    var $document = $(document);                                                                                     // 4541\n    var $editor = context.layoutInfo.editor;                                                                         // 4542\n    var $editable = context.layoutInfo.editable;                                                                     // 4543\n    var options = context.options;                                                                                   // 4544\n    var lang = options.langInfo;                                                                                     // 4545\n                                                                                                                     // 4546\n    var $dropzone = $([                                                                                              // 4547\n      '<div class=\"note-dropzone\">',                                                                                 // 4548\n      '  <div class=\"note-dropzone-message\"/>',                                                                      // 4549\n      '</div>'                                                                                                       // 4550\n    ].join('')).prependTo($editor);                                                                                  // 4551\n                                                                                                                     // 4552\n    /**                                                                                                              // 4553\n     * attach Drag and Drop Events                                                                                   // 4554\n     */                                                                                                              // 4555\n    this.initialize = function () {                                                                                  // 4556\n      if (options.disableDragAndDrop) {                                                                              // 4557\n        // prevent default drop event                                                                                // 4558\n        $document.on('drop', function (e) {                                                                          // 4559\n          e.preventDefault();                                                                                        // 4560\n        });                                                                                                          // 4561\n      } else {                                                                                                       // 4562\n        this.attachDragAndDropEvent();                                                                               // 4563\n      }                                                                                                              // 4564\n    };                                                                                                               // 4565\n                                                                                                                     // 4566\n    /**                                                                                                              // 4567\n     * attach Drag and Drop Events                                                                                   // 4568\n     */                                                                                                              // 4569\n    this.attachDragAndDropEvent = function () {                                                                      // 4570\n      var collection = $(),                                                                                          // 4571\n          $dropzoneMessage = $dropzone.find('.note-dropzone-message');                                               // 4572\n                                                                                                                     // 4573\n      // show dropzone on dragenter when dragging a object to document                                               // 4574\n      // -but only if the editor is visible, i.e. has a positive width and height                                    // 4575\n      $document.on('dragenter', function (e) {                                                                       // 4576\n        var isCodeview = context.invoke('codeview.isActivated');                                                     // 4577\n        var hasEditorSize = $editor.width() > 0 && $editor.height() > 0;                                             // 4578\n        if (!isCodeview && !collection.length && hasEditorSize) {                                                    // 4579\n          $editor.addClass('dragover');                                                                              // 4580\n          $dropzone.width($editor.width());                                                                          // 4581\n          $dropzone.height($editor.height());                                                                        // 4582\n          $dropzoneMessage.text(lang.image.dragImageHere);                                                           // 4583\n        }                                                                                                            // 4584\n        collection = collection.add(e.target);                                                                       // 4585\n      }).on('dragleave', function (e) {                                                                              // 4586\n        collection = collection.not(e.target);                                                                       // 4587\n        if (!collection.length) {                                                                                    // 4588\n          $editor.removeClass('dragover');                                                                           // 4589\n        }                                                                                                            // 4590\n      }).on('drop', function () {                                                                                    // 4591\n        collection = $();                                                                                            // 4592\n        $editor.removeClass('dragover');                                                                             // 4593\n      });                                                                                                            // 4594\n                                                                                                                     // 4595\n      // change dropzone's message on hover.                                                                         // 4596\n      $dropzone.on('dragenter', function () {                                                                        // 4597\n        $dropzone.addClass('hover');                                                                                 // 4598\n        $dropzoneMessage.text(lang.image.dropImage);                                                                 // 4599\n      }).on('dragleave', function () {                                                                               // 4600\n        $dropzone.removeClass('hover');                                                                              // 4601\n        $dropzoneMessage.text(lang.image.dragImageHere);                                                             // 4602\n      });                                                                                                            // 4603\n                                                                                                                     // 4604\n      // attach dropImage                                                                                            // 4605\n      $dropzone.on('drop', function (event) {                                                                        // 4606\n        var dataTransfer = event.originalEvent.dataTransfer;                                                         // 4607\n                                                                                                                     // 4608\n        if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {                                       // 4609\n          event.preventDefault();                                                                                    // 4610\n          $editable.focus();                                                                                         // 4611\n          context.invoke('editor.insertImagesOrCallback', dataTransfer.files);                                       // 4612\n        } else {                                                                                                     // 4613\n          $.each(dataTransfer.types, function (idx, type) {                                                          // 4614\n            var content = dataTransfer.getData(type);                                                                // 4615\n                                                                                                                     // 4616\n            if (type.toLowerCase().indexOf('text') > -1) {                                                           // 4617\n              context.invoke('editor.pasteHTML', content);                                                           // 4618\n            } else {                                                                                                 // 4619\n              $(content).each(function () {                                                                          // 4620\n                context.invoke('editor.insertNode', this);                                                           // 4621\n              });                                                                                                    // 4622\n            }                                                                                                        // 4623\n          });                                                                                                        // 4624\n        }                                                                                                            // 4625\n      }).on('dragover', false); // prevent default dragover event                                                    // 4626\n    };                                                                                                               // 4627\n  };                                                                                                                 // 4628\n                                                                                                                     // 4629\n                                                                                                                     // 4630\n  var CodeMirror;                                                                                                    // 4631\n  if (agent.hasCodeMirror) {                                                                                         // 4632\n    if (agent.isSupportAmd) {                                                                                        // 4633\n      require(['codemirror'], function (cm) {                                                                        // 4634\n        CodeMirror = cm;                                                                                             // 4635\n      });                                                                                                            // 4636\n    } else {                                                                                                         // 4637\n      CodeMirror = window.CodeMirror;                                                                                // 4638\n    }                                                                                                                // 4639\n  }                                                                                                                  // 4640\n                                                                                                                     // 4641\n  /**                                                                                                                // 4642\n   * @class Codeview                                                                                                 // 4643\n   */                                                                                                                // 4644\n  var Codeview = function (context) {                                                                                // 4645\n    var $editor = context.layoutInfo.editor;                                                                         // 4646\n    var $editable = context.layoutInfo.editable;                                                                     // 4647\n    var $codable = context.layoutInfo.codable;                                                                       // 4648\n    var options = context.options;                                                                                   // 4649\n                                                                                                                     // 4650\n    this.sync = function () {                                                                                        // 4651\n      var isCodeview = this.isActivated();                                                                           // 4652\n      if (isCodeview && agent.hasCodeMirror) {                                                                       // 4653\n        $codable.data('cmEditor').save();                                                                            // 4654\n      }                                                                                                              // 4655\n    };                                                                                                               // 4656\n                                                                                                                     // 4657\n    /**                                                                                                              // 4658\n     * @return {Boolean}                                                                                             // 4659\n     */                                                                                                              // 4660\n    this.isActivated = function () {                                                                                 // 4661\n      return $editor.hasClass('codeview');                                                                           // 4662\n    };                                                                                                               // 4663\n                                                                                                                     // 4664\n    /**                                                                                                              // 4665\n     * toggle codeview                                                                                               // 4666\n     */                                                                                                              // 4667\n    this.toggle = function () {                                                                                      // 4668\n      if (this.isActivated()) {                                                                                      // 4669\n        this.deactivate();                                                                                           // 4670\n      } else {                                                                                                       // 4671\n        this.activate();                                                                                             // 4672\n      }                                                                                                              // 4673\n      context.triggerEvent('codeview.toggled');                                                                      // 4674\n    };                                                                                                               // 4675\n                                                                                                                     // 4676\n    /**                                                                                                              // 4677\n     * activate code view                                                                                            // 4678\n     */                                                                                                              // 4679\n    this.activate = function () {                                                                                    // 4680\n      $codable.val(dom.html($editable, options.prettifyHtml));                                                       // 4681\n      $codable.height($editable.height());                                                                           // 4682\n                                                                                                                     // 4683\n      context.invoke('toolbar.updateCodeview', true);                                                                // 4684\n      $editor.addClass('codeview');                                                                                  // 4685\n      $codable.focus();                                                                                              // 4686\n                                                                                                                     // 4687\n      // activate CodeMirror as codable                                                                              // 4688\n      if (agent.hasCodeMirror) {                                                                                     // 4689\n        var cmEditor = CodeMirror.fromTextArea($codable[0], options.codemirror);                                     // 4690\n                                                                                                                     // 4691\n        // CodeMirror TernServer                                                                                     // 4692\n        if (options.codemirror.tern) {                                                                               // 4693\n          var server = new CodeMirror.TernServer(options.codemirror.tern);                                           // 4694\n          cmEditor.ternServer = server;                                                                              // 4695\n          cmEditor.on('cursorActivity', function (cm) {                                                              // 4696\n            server.updateArgHints(cm);                                                                               // 4697\n          });                                                                                                        // 4698\n        }                                                                                                            // 4699\n                                                                                                                     // 4700\n        // CodeMirror hasn't Padding.                                                                                // 4701\n        cmEditor.setSize(null, $editable.outerHeight());                                                             // 4702\n        $codable.data('cmEditor', cmEditor);                                                                         // 4703\n      }                                                                                                              // 4704\n    };                                                                                                               // 4705\n                                                                                                                     // 4706\n    /**                                                                                                              // 4707\n     * deactivate code view                                                                                          // 4708\n     */                                                                                                              // 4709\n    this.deactivate = function () {                                                                                  // 4710\n      // deactivate CodeMirror as codable                                                                            // 4711\n      if (agent.hasCodeMirror) {                                                                                     // 4712\n        var cmEditor = $codable.data('cmEditor');                                                                    // 4713\n        $codable.val(cmEditor.getValue());                                                                           // 4714\n        cmEditor.toTextArea();                                                                                       // 4715\n      }                                                                                                              // 4716\n                                                                                                                     // 4717\n      var value = dom.value($codable, options.prettifyHtml) || dom.emptyPara;                                        // 4718\n      var isChange = $editable.html() !== value;                                                                     // 4719\n                                                                                                                     // 4720\n      $editable.html(value);                                                                                         // 4721\n      $editable.height(options.height ? $codable.height() : 'auto');                                                 // 4722\n      $editor.removeClass('codeview');                                                                               // 4723\n                                                                                                                     // 4724\n      if (isChange) {                                                                                                // 4725\n        context.triggerEvent('change', $editable.html(), $editable);                                                 // 4726\n      }                                                                                                              // 4727\n                                                                                                                     // 4728\n      $editable.focus();                                                                                             // 4729\n                                                                                                                     // 4730\n      context.invoke('toolbar.updateCodeview', false);                                                               // 4731\n    };                                                                                                               // 4732\n                                                                                                                     // 4733\n    this.destroy = function () {                                                                                     // 4734\n      if (this.isActivated()) {                                                                                      // 4735\n        this.deactivate();                                                                                           // 4736\n      }                                                                                                              // 4737\n    };                                                                                                               // 4738\n  };                                                                                                                 // 4739\n                                                                                                                     // 4740\n  var EDITABLE_PADDING = 24;                                                                                         // 4741\n                                                                                                                     // 4742\n  var Statusbar = function (context) {                                                                               // 4743\n    var $document = $(document);                                                                                     // 4744\n    var $statusbar = context.layoutInfo.statusbar;                                                                   // 4745\n    var $editable = context.layoutInfo.editable;                                                                     // 4746\n    var options = context.options;                                                                                   // 4747\n                                                                                                                     // 4748\n    this.initialize = function () {                                                                                  // 4749\n      if (options.airMode || options.disableResizeEditor) {                                                          // 4750\n        return;                                                                                                      // 4751\n      }                                                                                                              // 4752\n                                                                                                                     // 4753\n      $statusbar.on('mousedown', function (event) {                                                                  // 4754\n        event.preventDefault();                                                                                      // 4755\n        event.stopPropagation();                                                                                     // 4756\n                                                                                                                     // 4757\n        var editableTop = $editable.offset().top - $document.scrollTop();                                            // 4758\n                                                                                                                     // 4759\n        $document.on('mousemove', function (event) {                                                                 // 4760\n          var height = event.clientY - (editableTop + EDITABLE_PADDING);                                             // 4761\n                                                                                                                     // 4762\n          height = (options.minheight > 0) ? Math.max(height, options.minheight) : height;                           // 4763\n          height = (options.maxHeight > 0) ? Math.min(height, options.maxHeight) : height;                           // 4764\n                                                                                                                     // 4765\n          $editable.height(height);                                                                                  // 4766\n        }).one('mouseup', function () {                                                                              // 4767\n          $document.off('mousemove');                                                                                // 4768\n        });                                                                                                          // 4769\n      });                                                                                                            // 4770\n    };                                                                                                               // 4771\n                                                                                                                     // 4772\n    this.destroy = function () {                                                                                     // 4773\n      $statusbar.off();                                                                                              // 4774\n    };                                                                                                               // 4775\n  };                                                                                                                 // 4776\n                                                                                                                     // 4777\n  var Fullscreen = function (context) {                                                                              // 4778\n    var $editor = context.layoutInfo.editor;                                                                         // 4779\n    var $toolbar = context.layoutInfo.toolbar;                                                                       // 4780\n    var $editable = context.layoutInfo.editable;                                                                     // 4781\n    var $codable = context.layoutInfo.codable;                                                                       // 4782\n                                                                                                                     // 4783\n    var $window = $(window);                                                                                         // 4784\n    var $scrollbar = $('html, body');                                                                                // 4785\n                                                                                                                     // 4786\n    /**                                                                                                              // 4787\n     * toggle fullscreen                                                                                             // 4788\n     */                                                                                                              // 4789\n    this.toggle = function () {                                                                                      // 4790\n      var resize = function (size) {                                                                                 // 4791\n        $editable.css('height', size.h);                                                                             // 4792\n        $codable.css('height', size.h);                                                                              // 4793\n        if ($codable.data('cmeditor')) {                                                                             // 4794\n          $codable.data('cmeditor').setsize(null, size.h);                                                           // 4795\n        }                                                                                                            // 4796\n      };                                                                                                             // 4797\n                                                                                                                     // 4798\n      $editor.toggleClass('fullscreen');                                                                             // 4799\n      if (this.isFullscreen()) {                                                                                     // 4800\n        $editable.data('orgHeight', $editable.css('height'));                                                        // 4801\n                                                                                                                     // 4802\n        $window.on('resize', function () {                                                                           // 4803\n          resize({                                                                                                   // 4804\n            h: $window.height() - $toolbar.outerHeight()                                                             // 4805\n          });                                                                                                        // 4806\n        }).trigger('resize');                                                                                        // 4807\n                                                                                                                     // 4808\n        $scrollbar.css('overflow', 'hidden');                                                                        // 4809\n      } else {                                                                                                       // 4810\n        $window.off('resize');                                                                                       // 4811\n        resize({                                                                                                     // 4812\n          h: $editable.data('orgHeight')                                                                             // 4813\n        });                                                                                                          // 4814\n        $scrollbar.css('overflow', 'visible');                                                                       // 4815\n      }                                                                                                              // 4816\n                                                                                                                     // 4817\n      context.invoke('toolbar.updateFullscreen', this.isFullscreen());                                               // 4818\n    };                                                                                                               // 4819\n                                                                                                                     // 4820\n    this.isFullscreen = function () {                                                                                // 4821\n      return $editor.hasClass('fullscreen');                                                                         // 4822\n    };                                                                                                               // 4823\n  };                                                                                                                 // 4824\n                                                                                                                     // 4825\n  var Handle = function (context) {                                                                                  // 4826\n    var self = this;                                                                                                 // 4827\n                                                                                                                     // 4828\n    var $document = $(document);                                                                                     // 4829\n    var $editingArea = context.layoutInfo.editingArea;                                                               // 4830\n    var options = context.options;                                                                                   // 4831\n                                                                                                                     // 4832\n    this.events = {                                                                                                  // 4833\n      'summernote.mousedown': function (we, e) {                                                                     // 4834\n        if (self.update(e.target)) {                                                                                 // 4835\n          e.preventDefault();                                                                                        // 4836\n        }                                                                                                            // 4837\n      },                                                                                                             // 4838\n      'summernote.keyup summernote.scroll summernote.change summernote.dialog.shown': function () {                  // 4839\n        self.update();                                                                                               // 4840\n      }                                                                                                              // 4841\n    };                                                                                                               // 4842\n                                                                                                                     // 4843\n    this.initialize = function () {                                                                                  // 4844\n      this.$handle = $([                                                                                             // 4845\n        '<div class=\"note-handle\">',                                                                                 // 4846\n        '<div class=\"note-control-selection\">',                                                                      // 4847\n        '<div class=\"note-control-selection-bg\"></div>',                                                             // 4848\n        '<div class=\"note-control-holder note-control-nw\"></div>',                                                   // 4849\n        '<div class=\"note-control-holder note-control-ne\"></div>',                                                   // 4850\n        '<div class=\"note-control-holder note-control-sw\"></div>',                                                   // 4851\n        '<div class=\"',                                                                                              // 4852\n        (options.disableResizeImage ? 'note-control-holder' : 'note-control-sizing'),                                // 4853\n        ' note-control-se\"></div>',                                                                                  // 4854\n        (options.disableResizeImage ? '' : '<div class=\"note-control-selection-info\"></div>'),                       // 4855\n        '</div>',                                                                                                    // 4856\n        '</div>'                                                                                                     // 4857\n      ].join('')).prependTo($editingArea);                                                                           // 4858\n                                                                                                                     // 4859\n      this.$handle.on('mousedown', function (event) {                                                                // 4860\n        if (dom.isControlSizing(event.target)) {                                                                     // 4861\n          event.preventDefault();                                                                                    // 4862\n          event.stopPropagation();                                                                                   // 4863\n                                                                                                                     // 4864\n          var $target = self.$handle.find('.note-control-selection').data('target'),                                 // 4865\n              posStart = $target.offset(),                                                                           // 4866\n              scrollTop = $document.scrollTop();                                                                     // 4867\n                                                                                                                     // 4868\n          $document.on('mousemove', function (event) {                                                               // 4869\n            context.invoke('editor.resizeTo', {                                                                      // 4870\n              x: event.clientX - posStart.left,                                                                      // 4871\n              y: event.clientY - (posStart.top - scrollTop)                                                          // 4872\n            }, $target, !event.shiftKey);                                                                            // 4873\n                                                                                                                     // 4874\n            self.update($target[0]);                                                                                 // 4875\n          }).one('mouseup', function (e) {                                                                           // 4876\n            e.preventDefault();                                                                                      // 4877\n            $document.off('mousemove');                                                                              // 4878\n            context.invoke('editor.afterCommand');                                                                   // 4879\n          });                                                                                                        // 4880\n                                                                                                                     // 4881\n          if (!$target.data('ratio')) { // original ratio.                                                           // 4882\n            $target.data('ratio', $target.height() / $target.width());                                               // 4883\n          }                                                                                                          // 4884\n        }                                                                                                            // 4885\n      });                                                                                                            // 4886\n    };                                                                                                               // 4887\n                                                                                                                     // 4888\n    this.destroy = function () {                                                                                     // 4889\n      this.$handle.remove();                                                                                         // 4890\n    };                                                                                                               // 4891\n                                                                                                                     // 4892\n    this.update = function (target) {                                                                                // 4893\n      var isImage = dom.isImg(target);                                                                               // 4894\n      var $selection = this.$handle.find('.note-control-selection');                                                 // 4895\n                                                                                                                     // 4896\n      context.invoke('imagePopover.update', target);                                                                 // 4897\n                                                                                                                     // 4898\n      if (isImage) {                                                                                                 // 4899\n        var $image = $(target);                                                                                      // 4900\n        var pos = $image.position();                                                                                 // 4901\n                                                                                                                     // 4902\n        // include margin                                                                                            // 4903\n        var imageSize = {                                                                                            // 4904\n          w: $image.outerWidth(true),                                                                                // 4905\n          h: $image.outerHeight(true)                                                                                // 4906\n        };                                                                                                           // 4907\n                                                                                                                     // 4908\n        $selection.css({                                                                                             // 4909\n          display: 'block',                                                                                          // 4910\n          left: pos.left,                                                                                            // 4911\n          top: pos.top,                                                                                              // 4912\n          width: imageSize.w,                                                                                        // 4913\n          height: imageSize.h                                                                                        // 4914\n        }).data('target', $image); // save current image element.                                                    // 4915\n                                                                                                                     // 4916\n        var sizingText = imageSize.w + 'x' + imageSize.h;                                                            // 4917\n        $selection.find('.note-control-selection-info').text(sizingText);                                            // 4918\n        context.invoke('editor.saveTarget', target);                                                                 // 4919\n      } else {                                                                                                       // 4920\n        this.hide();                                                                                                 // 4921\n      }                                                                                                              // 4922\n                                                                                                                     // 4923\n      return isImage;                                                                                                // 4924\n    };                                                                                                               // 4925\n                                                                                                                     // 4926\n    /**                                                                                                              // 4927\n     * hide                                                                                                          // 4928\n     *                                                                                                               // 4929\n     * @param {jQuery} $handle                                                                                       // 4930\n     */                                                                                                              // 4931\n    this.hide = function () {                                                                                        // 4932\n      context.invoke('editor.clearTarget');                                                                          // 4933\n      this.$handle.children().hide();                                                                                // 4934\n    };                                                                                                               // 4935\n  };                                                                                                                 // 4936\n                                                                                                                     // 4937\n  var AutoLink = function (context) {                                                                                // 4938\n    var self = this;                                                                                                 // 4939\n    var defaultScheme = 'http://';                                                                                   // 4940\n    var linkPattern = /^(https?:\\/\\/|ssh:\\/\\/|ftp:\\/\\/|file:\\/|mailto:[A-Z0-9._%+-]+@)?(www\\.)?(.+)$/i;              // 4941\n                                                                                                                     // 4942\n    this.events = {                                                                                                  // 4943\n      'summernote.keyup': function (we, e) {                                                                         // 4944\n        if (!e.isDefaultPrevented()) {                                                                               // 4945\n          self.handleKeyup(e);                                                                                       // 4946\n        }                                                                                                            // 4947\n      },                                                                                                             // 4948\n      'summernote.keydown': function (we, e) {                                                                       // 4949\n        self.handleKeydown(e);                                                                                       // 4950\n      }                                                                                                              // 4951\n    };                                                                                                               // 4952\n                                                                                                                     // 4953\n    this.initialize = function () {                                                                                  // 4954\n      this.lastWordRange = null;                                                                                     // 4955\n    };                                                                                                               // 4956\n                                                                                                                     // 4957\n    this.destroy = function () {                                                                                     // 4958\n      this.lastWordRange = null;                                                                                     // 4959\n    };                                                                                                               // 4960\n                                                                                                                     // 4961\n    this.replace = function () {                                                                                     // 4962\n      if (!this.lastWordRange) {                                                                                     // 4963\n        return;                                                                                                      // 4964\n      }                                                                                                              // 4965\n                                                                                                                     // 4966\n      var keyword = this.lastWordRange.toString();                                                                   // 4967\n      var match = keyword.match(linkPattern);                                                                        // 4968\n                                                                                                                     // 4969\n      if (match && (match[1] || match[2])) {                                                                         // 4970\n        var link = match[1] ? keyword : defaultScheme + keyword;                                                     // 4971\n        var node = $('<a />').html(keyword).attr('href', link)[0];                                                   // 4972\n                                                                                                                     // 4973\n        this.lastWordRange.insertNode(node);                                                                         // 4974\n        this.lastWordRange = null;                                                                                   // 4975\n        context.invoke('editor.focus');                                                                              // 4976\n      }                                                                                                              // 4977\n                                                                                                                     // 4978\n    };                                                                                                               // 4979\n                                                                                                                     // 4980\n    this.handleKeydown = function (e) {                                                                              // 4981\n      if (list.contains([key.code.ENTER, key.code.SPACE], e.keyCode)) {                                              // 4982\n        var wordRange = context.invoke('editor.createRange').getWordRange();                                         // 4983\n        this.lastWordRange = wordRange;                                                                              // 4984\n      }                                                                                                              // 4985\n    };                                                                                                               // 4986\n                                                                                                                     // 4987\n    this.handleKeyup = function (e) {                                                                                // 4988\n      if (list.contains([key.code.ENTER, key.code.SPACE], e.keyCode)) {                                              // 4989\n        this.replace();                                                                                              // 4990\n      }                                                                                                              // 4991\n    };                                                                                                               // 4992\n  };                                                                                                                 // 4993\n                                                                                                                     // 4994\n  /**                                                                                                                // 4995\n   * textarea auto sync.                                                                                             // 4996\n   */                                                                                                                // 4997\n  var AutoSync = function (context) {                                                                                // 4998\n    var $note = context.layoutInfo.note;                                                                             // 4999\n                                                                                                                     // 5000\n    this.events = {                                                                                                  // 5001\n      'summernote.change': function () {                                                                             // 5002\n        $note.val(context.invoke('code'));                                                                           // 5003\n      }                                                                                                              // 5004\n    };                                                                                                               // 5005\n                                                                                                                     // 5006\n    this.shouldInitialize = function () {                                                                            // 5007\n      return dom.isTextarea($note[0]);                                                                               // 5008\n    };                                                                                                               // 5009\n  };                                                                                                                 // 5010\n                                                                                                                     // 5011\n  var Placeholder = function (context) {                                                                             // 5012\n    var self = this;                                                                                                 // 5013\n    var $editingArea = context.layoutInfo.editingArea;                                                               // 5014\n    var options = context.options;                                                                                   // 5015\n                                                                                                                     // 5016\n    this.events = {                                                                                                  // 5017\n      'summernote.init summernote.change': function () {                                                             // 5018\n        self.update();                                                                                               // 5019\n      },                                                                                                             // 5020\n      'summernote.codeview.toggled': function () {                                                                   // 5021\n        self.update();                                                                                               // 5022\n      }                                                                                                              // 5023\n    };                                                                                                               // 5024\n                                                                                                                     // 5025\n    this.shouldInitialize = function () {                                                                            // 5026\n      return !!options.placeholder;                                                                                  // 5027\n    };                                                                                                               // 5028\n                                                                                                                     // 5029\n    this.initialize = function () {                                                                                  // 5030\n      this.$placeholder = $('<div class=\"note-placeholder\">');                                                       // 5031\n      this.$placeholder.on('click', function () {                                                                    // 5032\n        context.invoke('focus');                                                                                     // 5033\n      }).text(options.placeholder).prependTo($editingArea);                                                          // 5034\n    };                                                                                                               // 5035\n                                                                                                                     // 5036\n    this.destroy = function () {                                                                                     // 5037\n      this.$placeholder.remove();                                                                                    // 5038\n    };                                                                                                               // 5039\n                                                                                                                     // 5040\n    this.update = function () {                                                                                      // 5041\n      var isShow = !context.invoke('codeview.isActivated') && context.invoke('editor.isEmpty');                      // 5042\n      this.$placeholder.toggle(isShow);                                                                              // 5043\n    };                                                                                                               // 5044\n  };                                                                                                                 // 5045\n                                                                                                                     // 5046\n  var Buttons = function (context) {                                                                                 // 5047\n    var self = this;                                                                                                 // 5048\n    var ui = $.summernote.ui;                                                                                        // 5049\n                                                                                                                     // 5050\n    var $toolbar = context.layoutInfo.toolbar;                                                                       // 5051\n    var options = context.options;                                                                                   // 5052\n    var lang = options.langInfo;                                                                                     // 5053\n                                                                                                                     // 5054\n    var invertedKeyMap = func.invertObject(options.keyMap[agent.isMac ? 'mac' : 'pc']);                              // 5055\n                                                                                                                     // 5056\n    var representShortcut = this.representShortcut = function (editorMethod) {                                       // 5057\n      var shortcut = invertedKeyMap[editorMethod];                                                                   // 5058\n      if (agent.isMac) {                                                                                             // 5059\n        shortcut = shortcut.replace('CMD', '⌘').replace('SHIFT', '⇧');                                               // 5060\n      }                                                                                                              // 5061\n                                                                                                                     // 5062\n      shortcut = shortcut.replace('BACKSLASH', '\\\\')                                                                 // 5063\n                         .replace('SLASH', '/')                                                                      // 5064\n                         .replace('LEFTBRACKET', '[')                                                                // 5065\n                         .replace('RIGHTBRACKET', ']');                                                              // 5066\n                                                                                                                     // 5067\n      return ' (' + shortcut + ')';                                                                                  // 5068\n    };                                                                                                               // 5069\n                                                                                                                     // 5070\n    this.initialize = function () {                                                                                  // 5071\n      this.addToolbarButtons();                                                                                      // 5072\n      this.addImagePopoverButtons();                                                                                 // 5073\n      this.addLinkPopoverButtons();                                                                                  // 5074\n      this.fontInstalledMap = {};                                                                                    // 5075\n    };                                                                                                               // 5076\n                                                                                                                     // 5077\n    this.destroy = function () {                                                                                     // 5078\n      delete this.fontInstalledMap;                                                                                  // 5079\n    };                                                                                                               // 5080\n                                                                                                                     // 5081\n    this.isFontInstalled = function (name) {                                                                         // 5082\n      if (!self.fontInstalledMap.hasOwnProperty(name)) {                                                             // 5083\n        self.fontInstalledMap[name] = agent.isFontInstalled(name) ||                                                 // 5084\n          list.contains(options.fontNamesIgnoreCheck, name);                                                         // 5085\n      }                                                                                                              // 5086\n                                                                                                                     // 5087\n      return self.fontInstalledMap[name];                                                                            // 5088\n    };                                                                                                               // 5089\n                                                                                                                     // 5090\n    this.addToolbarButtons = function () {                                                                           // 5091\n      context.memo('button.style', function () {                                                                     // 5092\n        return ui.buttonGroup([                                                                                      // 5093\n          ui.button({                                                                                                // 5094\n            className: 'dropdown-toggle',                                                                            // 5095\n            contents: ui.icon(options.icons.magic) + ' ' + ui.icon(options.icons.caret, 'span'),                     // 5096\n            tooltip: lang.style.style,                                                                               // 5097\n            data: {                                                                                                  // 5098\n              toggle: 'dropdown'                                                                                     // 5099\n            }                                                                                                        // 5100\n          }),                                                                                                        // 5101\n          ui.dropdown({                                                                                              // 5102\n            className: 'dropdown-style',                                                                             // 5103\n            items: context.options.styleTags,                                                                        // 5104\n            template: function (item) {                                                                              // 5105\n                                                                                                                     // 5106\n              if (typeof item === 'string') {                                                                        // 5107\n                item = { tag: item, title: item };                                                                   // 5108\n              }                                                                                                      // 5109\n                                                                                                                     // 5110\n              var tag = item.tag;                                                                                    // 5111\n              var title = item.title;                                                                                // 5112\n              var style = item.style ? ' style=\"' + item.style + '\" ' : '';                                          // 5113\n              var className = item.className ? ' className=\"' + item.className + '\"' : '';                           // 5114\n                                                                                                                     // 5115\n              return '<' + tag + style + className + '>' + title + '</' + tag +  '>';                                // 5116\n            },                                                                                                       // 5117\n            click: context.createInvokeHandler('editor.formatBlock')                                                 // 5118\n          })                                                                                                         // 5119\n        ]).render();                                                                                                 // 5120\n      });                                                                                                            // 5121\n                                                                                                                     // 5122\n      context.memo('button.bold', function () {                                                                      // 5123\n        return ui.button({                                                                                           // 5124\n          className: 'note-btn-bold',                                                                                // 5125\n          contents: ui.icon(options.icons.bold),                                                                     // 5126\n          tooltip: lang.font.bold + representShortcut('bold'),                                                       // 5127\n          click: context.createInvokeHandler('editor.bold')                                                          // 5128\n        }).render();                                                                                                 // 5129\n      });                                                                                                            // 5130\n                                                                                                                     // 5131\n      context.memo('button.italic', function () {                                                                    // 5132\n        return ui.button({                                                                                           // 5133\n          className: 'note-btn-italic',                                                                              // 5134\n          contents: ui.icon(options.icons.italic),                                                                   // 5135\n          tooltip: lang.font.italic + representShortcut('italic'),                                                   // 5136\n          click: context.createInvokeHandler('editor.italic')                                                        // 5137\n        }).render();                                                                                                 // 5138\n      });                                                                                                            // 5139\n                                                                                                                     // 5140\n      context.memo('button.underline', function () {                                                                 // 5141\n        return ui.button({                                                                                           // 5142\n          className: 'note-btn-underline',                                                                           // 5143\n          contents: ui.icon(options.icons.underline),                                                                // 5144\n          tooltip: lang.font.underline + representShortcut('underline'),                                             // 5145\n          click: context.createInvokeHandler('editor.underline')                                                     // 5146\n        }).render();                                                                                                 // 5147\n      });                                                                                                            // 5148\n                                                                                                                     // 5149\n      context.memo('button.clear', function () {                                                                     // 5150\n        return ui.button({                                                                                           // 5151\n          contents: ui.icon(options.icons.eraser),                                                                   // 5152\n          tooltip: lang.font.clear + representShortcut('removeFormat'),                                              // 5153\n          click: context.createInvokeHandler('editor.removeFormat')                                                  // 5154\n        }).render();                                                                                                 // 5155\n      });                                                                                                            // 5156\n                                                                                                                     // 5157\n      context.memo('button.strikethrough', function () {                                                             // 5158\n        return ui.button({                                                                                           // 5159\n          className: 'note-btn-strikethrough',                                                                       // 5160\n          contents: ui.icon(options.icons.strikethrough),                                                            // 5161\n          tooltip: lang.font.strikethrough + representShortcut('strikethrough'),                                     // 5162\n          click: context.createInvokeHandler('editor.strikethrough')                                                 // 5163\n        }).render();                                                                                                 // 5164\n      });                                                                                                            // 5165\n                                                                                                                     // 5166\n      context.memo('button.superscript', function () {                                                               // 5167\n        return ui.button({                                                                                           // 5168\n          className: 'note-btn-superscript',                                                                         // 5169\n          contents: ui.icon(options.icons.superscript),                                                              // 5170\n          tooltip: lang.font.superscript,                                                                            // 5171\n          click: context.createInvokeHandler('editor.superscript')                                                   // 5172\n        }).render();                                                                                                 // 5173\n      });                                                                                                            // 5174\n                                                                                                                     // 5175\n      context.memo('button.subscript', function () {                                                                 // 5176\n        return ui.button({                                                                                           // 5177\n          className: 'note-btn-subscript',                                                                           // 5178\n          contents: ui.icon(options.icons.subscript),                                                                // 5179\n          tooltip: lang.font.subscript,                                                                              // 5180\n          click: context.createInvokeHandler('editor.subscript')                                                     // 5181\n        }).render();                                                                                                 // 5182\n      });                                                                                                            // 5183\n                                                                                                                     // 5184\n      context.memo('button.fontname', function () {                                                                  // 5185\n        return ui.buttonGroup([                                                                                      // 5186\n          ui.button({                                                                                                // 5187\n            className: 'dropdown-toggle',                                                                            // 5188\n            contents: '<span class=\"note-current-fontname\"/> ' + ui.icon(options.icons.caret, 'span'),               // 5189\n            tooltip: lang.font.name,                                                                                 // 5190\n            data: {                                                                                                  // 5191\n              toggle: 'dropdown'                                                                                     // 5192\n            }                                                                                                        // 5193\n          }),                                                                                                        // 5194\n          ui.dropdownCheck({                                                                                         // 5195\n            className: 'dropdown-fontname',                                                                          // 5196\n            checkClassName: options.icons.menuCheck,                                                                 // 5197\n            items: options.fontNames.filter(self.isFontInstalled),                                                   // 5198\n            template: function (item) {                                                                              // 5199\n              return '<span style=\"font-family:' + item + '\">' + item + '</span>';                                   // 5200\n            },                                                                                                       // 5201\n            click: context.createInvokeHandler('editor.fontName')                                                    // 5202\n          })                                                                                                         // 5203\n        ]).render();                                                                                                 // 5204\n      });                                                                                                            // 5205\n                                                                                                                     // 5206\n      context.memo('button.fontsize', function () {                                                                  // 5207\n        return ui.buttonGroup([                                                                                      // 5208\n          ui.button({                                                                                                // 5209\n            className: 'dropdown-toggle',                                                                            // 5210\n            contents: '<span class=\"note-current-fontsize\"/>' + ui.icon(options.icons.caret, 'span'),                // 5211\n            tooltip: lang.font.size,                                                                                 // 5212\n            data: {                                                                                                  // 5213\n              toggle: 'dropdown'                                                                                     // 5214\n            }                                                                                                        // 5215\n          }),                                                                                                        // 5216\n          ui.dropdownCheck({                                                                                         // 5217\n            className: 'dropdown-fontsize',                                                                          // 5218\n            checkClassName: options.icons.menuCheck,                                                                 // 5219\n            items: options.fontSizes,                                                                                // 5220\n            click: context.createInvokeHandler('editor.fontSize')                                                    // 5221\n          })                                                                                                         // 5222\n        ]).render();                                                                                                 // 5223\n      });                                                                                                            // 5224\n                                                                                                                     // 5225\n      context.memo('button.color', function () {                                                                     // 5226\n        return ui.buttonGroup({                                                                                      // 5227\n          className: 'note-color',                                                                                   // 5228\n          children: [                                                                                                // 5229\n            ui.button({                                                                                              // 5230\n              className: 'note-current-color-button',                                                                // 5231\n              contents: ui.icon(options.icons.font + ' note-recent-color'),                                          // 5232\n              tooltip: lang.color.recent,                                                                            // 5233\n              click: function (e) {                                                                                  // 5234\n                var $button = $(e.currentTarget);                                                                    // 5235\n                context.invoke('editor.color', {                                                                     // 5236\n                  backColor: $button.attr('data-backColor'),                                                         // 5237\n                  foreColor: $button.attr('data-foreColor')                                                          // 5238\n                });                                                                                                  // 5239\n              },                                                                                                     // 5240\n              callback: function ($button) {                                                                         // 5241\n                var $recentColor = $button.find('.note-recent-color');                                               // 5242\n                $recentColor.css('background-color', '#FFFF00');                                                     // 5243\n                $button.attr('data-backColor', '#FFFF00');                                                           // 5244\n              }                                                                                                      // 5245\n            }),                                                                                                      // 5246\n            ui.button({                                                                                              // 5247\n              className: 'dropdown-toggle',                                                                          // 5248\n              contents: ui.icon(options.icons.caret, 'span'),                                                        // 5249\n              tooltip: lang.color.more,                                                                              // 5250\n              data: {                                                                                                // 5251\n                toggle: 'dropdown'                                                                                   // 5252\n              }                                                                                                      // 5253\n            }),                                                                                                      // 5254\n            ui.dropdown({                                                                                            // 5255\n              items: [                                                                                               // 5256\n                '<li>',                                                                                              // 5257\n                '<div class=\"btn-group\">',                                                                           // 5258\n                '  <div class=\"note-palette-title\">' + lang.color.background + '</div>',                             // 5259\n                '  <div>',                                                                                           // 5260\n                '    <button type=\"button\" class=\"note-color-reset btn btn-default\" data-event=\"backColor\" data-value=\"inherit\">',\n                lang.color.transparent,                                                                              // 5262\n                '    </button>',                                                                                     // 5263\n                '  </div>',                                                                                          // 5264\n                '  <div class=\"note-holder\" data-event=\"backColor\"/>',                                               // 5265\n                '</div>',                                                                                            // 5266\n                '<div class=\"btn-group\">',                                                                           // 5267\n                '  <div class=\"note-palette-title\">' + lang.color.foreground + '</div>',                             // 5268\n                '  <div>',                                                                                           // 5269\n                '    <button type=\"button\" class=\"note-color-reset btn btn-default\" data-event=\"removeFormat\" data-value=\"foreColor\">',\n                lang.color.resetToDefault,                                                                           // 5271\n                '    </button>',                                                                                     // 5272\n                '  </div>',                                                                                          // 5273\n                '  <div class=\"note-holder\" data-event=\"foreColor\"/>',                                               // 5274\n                '</div>',                                                                                            // 5275\n                '</li>'                                                                                              // 5276\n              ].join(''),                                                                                            // 5277\n              callback: function ($dropdown) {                                                                       // 5278\n                $dropdown.find('.note-holder').each(function () {                                                    // 5279\n                  var $holder = $(this);                                                                             // 5280\n                  $holder.append(ui.palette({                                                                        // 5281\n                    colors: options.colors,                                                                          // 5282\n                    eventName: $holder.data('event')                                                                 // 5283\n                  }).render());                                                                                      // 5284\n                });                                                                                                  // 5285\n              },                                                                                                     // 5286\n              click: function (event) {                                                                              // 5287\n                var $button = $(event.target);                                                                       // 5288\n                var eventName = $button.data('event');                                                               // 5289\n                var value = $button.data('value');                                                                   // 5290\n                                                                                                                     // 5291\n                if (eventName && value) {                                                                            // 5292\n                  var key = eventName === 'backColor' ? 'background-color' : 'color';                                // 5293\n                  var $color = $button.closest('.note-color').find('.note-recent-color');                            // 5294\n                  var $currentButton = $button.closest('.note-color').find('.note-current-color-button');            // 5295\n                                                                                                                     // 5296\n                  $color.css(key, value);                                                                            // 5297\n                  $currentButton.attr('data-' + eventName, value);                                                   // 5298\n                  context.invoke('editor.' + eventName, value);                                                      // 5299\n                }                                                                                                    // 5300\n              }                                                                                                      // 5301\n            })                                                                                                       // 5302\n          ]                                                                                                          // 5303\n        }).render();                                                                                                 // 5304\n      });                                                                                                            // 5305\n                                                                                                                     // 5306\n      context.memo('button.ul',  function () {                                                                       // 5307\n        return ui.button({                                                                                           // 5308\n          contents: ui.icon(options.icons.unorderedlist),                                                            // 5309\n          tooltip: lang.lists.unordered + representShortcut('insertUnorderedList'),                                  // 5310\n          click: context.createInvokeHandler('editor.insertUnorderedList')                                           // 5311\n        }).render();                                                                                                 // 5312\n      });                                                                                                            // 5313\n                                                                                                                     // 5314\n      context.memo('button.ol', function () {                                                                        // 5315\n        return ui.button({                                                                                           // 5316\n          contents: ui.icon(options.icons.orderedlist),                                                              // 5317\n          tooltip: lang.lists.ordered + representShortcut('insertOrderedList'),                                      // 5318\n          click:  context.createInvokeHandler('editor.insertOrderedList')                                            // 5319\n        }).render();                                                                                                 // 5320\n      });                                                                                                            // 5321\n                                                                                                                     // 5322\n      var justifyLeft = ui.button({                                                                                  // 5323\n        contents: ui.icon(options.icons.alignLeft),                                                                  // 5324\n        tooltip: lang.paragraph.left + representShortcut('justifyLeft'),                                             // 5325\n        click: context.createInvokeHandler('editor.justifyLeft')                                                     // 5326\n      });                                                                                                            // 5327\n                                                                                                                     // 5328\n      var justifyCenter = ui.button({                                                                                // 5329\n        contents: ui.icon(options.icons.alignCenter),                                                                // 5330\n        tooltip: lang.paragraph.center + representShortcut('justifyCenter'),                                         // 5331\n        click: context.createInvokeHandler('editor.justifyCenter')                                                   // 5332\n      });                                                                                                            // 5333\n                                                                                                                     // 5334\n      var justifyRight = ui.button({                                                                                 // 5335\n        contents: ui.icon(options.icons.alignRight),                                                                 // 5336\n        tooltip: lang.paragraph.right + representShortcut('justifyRight'),                                           // 5337\n        click: context.createInvokeHandler('editor.justifyRight')                                                    // 5338\n      });                                                                                                            // 5339\n                                                                                                                     // 5340\n      var justifyFull = ui.button({                                                                                  // 5341\n        contents: ui.icon(options.icons.alignJustify),                                                               // 5342\n        tooltip: lang.paragraph.justify + representShortcut('justifyFull'),                                          // 5343\n        click: context.createInvokeHandler('editor.justifyFull')                                                     // 5344\n      });                                                                                                            // 5345\n                                                                                                                     // 5346\n      var outdent = ui.button({                                                                                      // 5347\n        contents: ui.icon(options.icons.outdent),                                                                    // 5348\n        tooltip: lang.paragraph.outdent + representShortcut('outdent'),                                              // 5349\n        click: context.createInvokeHandler('editor.outdent')                                                         // 5350\n      });                                                                                                            // 5351\n                                                                                                                     // 5352\n      var indent = ui.button({                                                                                       // 5353\n        contents: ui.icon(options.icons.indent),                                                                     // 5354\n        tooltip: lang.paragraph.indent + representShortcut('indent'),                                                // 5355\n        click: context.createInvokeHandler('editor.indent')                                                          // 5356\n      });                                                                                                            // 5357\n                                                                                                                     // 5358\n      context.memo('button.justifyLeft', func.invoke(justifyLeft, 'render'));                                        // 5359\n      context.memo('button.justifyCenter', func.invoke(justifyCenter, 'render'));                                    // 5360\n      context.memo('button.justifyRight', func.invoke(justifyRight, 'render'));                                      // 5361\n      context.memo('button.justifyFull', func.invoke(justifyFull, 'render'));                                        // 5362\n      context.memo('button.outdent', func.invoke(outdent, 'render'));                                                // 5363\n      context.memo('button.indent', func.invoke(indent, 'render'));                                                  // 5364\n                                                                                                                     // 5365\n      context.memo('button.paragraph', function () {                                                                 // 5366\n        return ui.buttonGroup([                                                                                      // 5367\n          ui.button({                                                                                                // 5368\n            className: 'dropdown-toggle',                                                                            // 5369\n            contents: ui.icon(options.icons.alignLeft) + ' ' + ui.icon(options.icons.caret, 'span'),                 // 5370\n            tooltip: lang.paragraph.paragraph,                                                                       // 5371\n            data: {                                                                                                  // 5372\n              toggle: 'dropdown'                                                                                     // 5373\n            }                                                                                                        // 5374\n          }),                                                                                                        // 5375\n          ui.dropdown([                                                                                              // 5376\n            ui.buttonGroup({                                                                                         // 5377\n              className: 'note-align',                                                                               // 5378\n              children: [justifyLeft, justifyCenter, justifyRight, justifyFull]                                      // 5379\n            }),                                                                                                      // 5380\n            ui.buttonGroup({                                                                                         // 5381\n              className: 'note-list',                                                                                // 5382\n              children: [outdent, indent]                                                                            // 5383\n            })                                                                                                       // 5384\n          ])                                                                                                         // 5385\n        ]).render();                                                                                                 // 5386\n      });                                                                                                            // 5387\n                                                                                                                     // 5388\n      context.memo('button.height', function () {                                                                    // 5389\n        return ui.buttonGroup([                                                                                      // 5390\n          ui.button({                                                                                                // 5391\n            className: 'dropdown-toggle',                                                                            // 5392\n            contents: ui.icon(options.icons.textHeight) + ' ' + ui.icon(options.icons.caret, 'span'),                // 5393\n            tooltip: lang.font.height,                                                                               // 5394\n            data: {                                                                                                  // 5395\n              toggle: 'dropdown'                                                                                     // 5396\n            }                                                                                                        // 5397\n          }),                                                                                                        // 5398\n          ui.dropdownCheck({                                                                                         // 5399\n            items: options.lineHeights,                                                                              // 5400\n            checkClassName: options.icons.menuCheck,                                                                 // 5401\n            className: 'dropdown-line-height',                                                                       // 5402\n            click: context.createInvokeHandler('editor.lineHeight')                                                  // 5403\n          })                                                                                                         // 5404\n        ]).render();                                                                                                 // 5405\n      });                                                                                                            // 5406\n                                                                                                                     // 5407\n      context.memo('button.table', function () {                                                                     // 5408\n        return ui.buttonGroup([                                                                                      // 5409\n          ui.button({                                                                                                // 5410\n            className: 'dropdown-toggle',                                                                            // 5411\n            contents: ui.icon(options.icons.table) + ' ' + ui.icon(options.icons.caret, 'span'),                     // 5412\n            tooltip: lang.table.table,                                                                               // 5413\n            data: {                                                                                                  // 5414\n              toggle: 'dropdown'                                                                                     // 5415\n            }                                                                                                        // 5416\n          }),                                                                                                        // 5417\n          ui.dropdown({                                                                                              // 5418\n            className: 'note-table',                                                                                 // 5419\n            items: [                                                                                                 // 5420\n              '<div class=\"note-dimension-picker\">',                                                                 // 5421\n              '  <div class=\"note-dimension-picker-mousecatcher\" data-event=\"insertTable\" data-value=\"1x1\"/>',       // 5422\n              '  <div class=\"note-dimension-picker-highlighted\"/>',                                                  // 5423\n              '  <div class=\"note-dimension-picker-unhighlighted\"/>',                                                // 5424\n              '</div>',                                                                                              // 5425\n              '<div class=\"note-dimension-display\">1 x 1</div>'                                                      // 5426\n            ].join('')                                                                                               // 5427\n          })                                                                                                         // 5428\n        ], {                                                                                                         // 5429\n          callback: function ($node) {                                                                               // 5430\n            var $catcher = $node.find('.note-dimension-picker-mousecatcher');                                        // 5431\n            $catcher.css({                                                                                           // 5432\n              width: options.insertTableMaxSize.col + 'em',                                                          // 5433\n              height: options.insertTableMaxSize.row + 'em'                                                          // 5434\n            }).mousedown(context.createInvokeHandler('editor.insertTable'))                                          // 5435\n              .on('mousemove', self.tableMoveHandler);                                                               // 5436\n          }                                                                                                          // 5437\n        }).render();                                                                                                 // 5438\n      });                                                                                                            // 5439\n                                                                                                                     // 5440\n      context.memo('button.link', function () {                                                                      // 5441\n        return ui.button({                                                                                           // 5442\n          contents: ui.icon(options.icons.link),                                                                     // 5443\n          tooltip: lang.link.link,                                                                                   // 5444\n          click: context.createInvokeHandler('linkDialog.show')                                                      // 5445\n        }).render();                                                                                                 // 5446\n      });                                                                                                            // 5447\n                                                                                                                     // 5448\n      context.memo('button.picture', function () {                                                                   // 5449\n        return ui.button({                                                                                           // 5450\n          contents: ui.icon(options.icons.picture),                                                                  // 5451\n          tooltip: lang.image.image,                                                                                 // 5452\n          click: context.createInvokeHandler('imageDialog.show')                                                     // 5453\n        }).render();                                                                                                 // 5454\n      });                                                                                                            // 5455\n                                                                                                                     // 5456\n      context.memo('button.video', function () {                                                                     // 5457\n        return ui.button({                                                                                           // 5458\n          contents: ui.icon(options.icons.video),                                                                    // 5459\n          tooltip: lang.video.video,                                                                                 // 5460\n          click: context.createInvokeHandler('videoDialog.show')                                                     // 5461\n        }).render();                                                                                                 // 5462\n      });                                                                                                            // 5463\n                                                                                                                     // 5464\n      context.memo('button.hr', function () {                                                                        // 5465\n        return ui.button({                                                                                           // 5466\n          contents: ui.icon(options.icons.minus),                                                                    // 5467\n          tooltip: lang.hr.insert + representShortcut('insertHorizontalRule'),                                       // 5468\n          click: context.createInvokeHandler('editor.insertHorizontalRule')                                          // 5469\n        }).render();                                                                                                 // 5470\n      });                                                                                                            // 5471\n                                                                                                                     // 5472\n      context.memo('button.fullscreen', function () {                                                                // 5473\n        return ui.button({                                                                                           // 5474\n          className: 'btn-fullscreen',                                                                               // 5475\n          contents: ui.icon(options.icons.arrowsAlt),                                                                // 5476\n          tooltip: lang.options.fullscreen,                                                                          // 5477\n          click: context.createInvokeHandler('fullscreen.toggle')                                                    // 5478\n        }).render();                                                                                                 // 5479\n      });                                                                                                            // 5480\n                                                                                                                     // 5481\n      context.memo('button.codeview', function () {                                                                  // 5482\n        return ui.button({                                                                                           // 5483\n          className: 'btn-codeview',                                                                                 // 5484\n          contents: ui.icon(options.icons.code),                                                                     // 5485\n          tooltip: lang.options.codeview,                                                                            // 5486\n          click: context.createInvokeHandler('codeview.toggle')                                                      // 5487\n        }).render();                                                                                                 // 5488\n      });                                                                                                            // 5489\n                                                                                                                     // 5490\n      context.memo('button.redo', function () {                                                                      // 5491\n        return ui.button({                                                                                           // 5492\n          contents: ui.icon(options.icons.redo),                                                                     // 5493\n          tooltip: lang.history.redo + representShortcut('redo'),                                                    // 5494\n          click: context.createInvokeHandler('editor.redo')                                                          // 5495\n        }).render();                                                                                                 // 5496\n      });                                                                                                            // 5497\n                                                                                                                     // 5498\n      context.memo('button.undo', function () {                                                                      // 5499\n        return ui.button({                                                                                           // 5500\n          contents: ui.icon(options.icons.undo),                                                                     // 5501\n          tooltip: lang.history.undo + representShortcut('undo'),                                                    // 5502\n          click: context.createInvokeHandler('editor.undo')                                                          // 5503\n        }).render();                                                                                                 // 5504\n      });                                                                                                            // 5505\n                                                                                                                     // 5506\n      context.memo('button.help', function () {                                                                      // 5507\n        return ui.button({                                                                                           // 5508\n          contents: ui.icon(options.icons.question),                                                                 // 5509\n          tooltip: lang.options.help,                                                                                // 5510\n          click: context.createInvokeHandler('helpDialog.show')                                                      // 5511\n        }).render();                                                                                                 // 5512\n      });                                                                                                            // 5513\n    };                                                                                                               // 5514\n                                                                                                                     // 5515\n    /**                                                                                                              // 5516\n     * image : [                                                                                                     // 5517\n     *   ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],                                              // 5518\n     *   ['float', ['floatLeft', 'floatRight', 'floatNone' ]],                                                       // 5519\n     *   ['remove', ['removeMedia']]                                                                                 // 5520\n     * ],                                                                                                            // 5521\n     */                                                                                                              // 5522\n    this.addImagePopoverButtons = function () {                                                                      // 5523\n      // Image Size Buttons                                                                                          // 5524\n      context.memo('button.imageSize100', function () {                                                              // 5525\n        return ui.button({                                                                                           // 5526\n          contents: '<span class=\"note-fontsize-10\">100%</span>',                                                    // 5527\n          tooltip: lang.image.resizeFull,                                                                            // 5528\n          click: context.createInvokeHandler('editor.resize', '1')                                                   // 5529\n        }).render();                                                                                                 // 5530\n      });                                                                                                            // 5531\n      context.memo('button.imageSize50', function () {                                                               // 5532\n        return  ui.button({                                                                                          // 5533\n          contents: '<span class=\"note-fontsize-10\">50%</span>',                                                     // 5534\n          tooltip: lang.image.resizeHalf,                                                                            // 5535\n          click: context.createInvokeHandler('editor.resize', '0.5')                                                 // 5536\n        }).render();                                                                                                 // 5537\n      });                                                                                                            // 5538\n      context.memo('button.imageSize25', function () {                                                               // 5539\n        return ui.button({                                                                                           // 5540\n          contents: '<span class=\"note-fontsize-10\">25%</span>',                                                     // 5541\n          tooltip: lang.image.resizeQuarter,                                                                         // 5542\n          click: context.createInvokeHandler('editor.resize', '0.25')                                                // 5543\n        }).render();                                                                                                 // 5544\n      });                                                                                                            // 5545\n                                                                                                                     // 5546\n      // Float Buttons                                                                                               // 5547\n      context.memo('button.floatLeft', function () {                                                                 // 5548\n        return ui.button({                                                                                           // 5549\n          contents: ui.icon(options.icons.alignLeft),                                                                // 5550\n          tooltip: lang.image.floatLeft,                                                                             // 5551\n          click: context.createInvokeHandler('editor.floatMe', 'left')                                               // 5552\n        }).render();                                                                                                 // 5553\n      });                                                                                                            // 5554\n                                                                                                                     // 5555\n      context.memo('button.floatRight', function () {                                                                // 5556\n        return ui.button({                                                                                           // 5557\n          contents: ui.icon(options.icons.alignRight),                                                               // 5558\n          tooltip: lang.image.floatRight,                                                                            // 5559\n          click: context.createInvokeHandler('editor.floatMe', 'right')                                              // 5560\n        }).render();                                                                                                 // 5561\n      });                                                                                                            // 5562\n                                                                                                                     // 5563\n      context.memo('button.floatNone', function () {                                                                 // 5564\n        return ui.button({                                                                                           // 5565\n          contents: ui.icon(options.icons.alignJustify),                                                             // 5566\n          tooltip: lang.image.floatNone,                                                                             // 5567\n          click: context.createInvokeHandler('editor.floatMe', 'none')                                               // 5568\n        }).render();                                                                                                 // 5569\n      });                                                                                                            // 5570\n                                                                                                                     // 5571\n      // Remove Buttons                                                                                              // 5572\n      context.memo('button.removeMedia', function () {                                                               // 5573\n        return ui.button({                                                                                           // 5574\n          contents: ui.icon(options.icons.trash),                                                                    // 5575\n          tooltip: lang.image.remove,                                                                                // 5576\n          click: context.createInvokeHandler('editor.removeMedia')                                                   // 5577\n        }).render();                                                                                                 // 5578\n      });                                                                                                            // 5579\n    };                                                                                                               // 5580\n                                                                                                                     // 5581\n    this.addLinkPopoverButtons = function () {                                                                       // 5582\n      context.memo('button.linkDialogShow', function () {                                                            // 5583\n        return ui.button({                                                                                           // 5584\n          contents: ui.icon(options.icons.link),                                                                     // 5585\n          tooltip: lang.link.edit,                                                                                   // 5586\n          click: context.createInvokeHandler('linkDialog.show')                                                      // 5587\n        }).render();                                                                                                 // 5588\n      });                                                                                                            // 5589\n                                                                                                                     // 5590\n      context.memo('button.unlink', function () {                                                                    // 5591\n        return ui.button({                                                                                           // 5592\n          contents: ui.icon(options.icons.unlink),                                                                   // 5593\n          tooltip: lang.link.unlink,                                                                                 // 5594\n          click: context.createInvokeHandler('editor.unlink')                                                        // 5595\n        }).render();                                                                                                 // 5596\n      });                                                                                                            // 5597\n    };                                                                                                               // 5598\n                                                                                                                     // 5599\n    this.build = function ($container, groups) {                                                                     // 5600\n      for (var groupIdx = 0, groupLen = groups.length; groupIdx < groupLen; groupIdx++) {                            // 5601\n        var group = groups[groupIdx];                                                                                // 5602\n        var groupName = group[0];                                                                                    // 5603\n        var buttons = group[1];                                                                                      // 5604\n                                                                                                                     // 5605\n        var $group = ui.buttonGroup({                                                                                // 5606\n          className: 'note-' + groupName                                                                             // 5607\n        }).render();                                                                                                 // 5608\n                                                                                                                     // 5609\n        for (var idx = 0, len = buttons.length; idx < len; idx++) {                                                  // 5610\n          var button = context.memo('button.' + buttons[idx]);                                                       // 5611\n          if (button) {                                                                                              // 5612\n            $group.append(typeof button === 'function' ? button(context) : button);                                  // 5613\n          }                                                                                                          // 5614\n        }                                                                                                            // 5615\n        $group.appendTo($container);                                                                                 // 5616\n      }                                                                                                              // 5617\n    };                                                                                                               // 5618\n                                                                                                                     // 5619\n    this.updateCurrentStyle = function () {                                                                          // 5620\n      var styleInfo = context.invoke('editor.currentStyle');                                                         // 5621\n      this.updateBtnStates({                                                                                         // 5622\n        '.note-btn-bold': function () {                                                                              // 5623\n          return styleInfo['font-bold'] === 'bold';                                                                  // 5624\n        },                                                                                                           // 5625\n        '.note-btn-italic': function () {                                                                            // 5626\n          return styleInfo['font-italic'] === 'italic';                                                              // 5627\n        },                                                                                                           // 5628\n        '.note-btn-underline': function () {                                                                         // 5629\n          return styleInfo['font-underline'] === 'underline';                                                        // 5630\n        },                                                                                                           // 5631\n        '.note-btn-subscript': function () {                                                                         // 5632\n          return styleInfo['font-subscript'] === 'subscript';                                                        // 5633\n        },                                                                                                           // 5634\n        '.note-btn-superscript': function () {                                                                       // 5635\n          return styleInfo['font-superscript'] === 'superscript';                                                    // 5636\n        },                                                                                                           // 5637\n        '.note-btn-strikethrough': function () {                                                                     // 5638\n          return styleInfo['font-strikethrough'] === 'strikethrough';                                                // 5639\n        }                                                                                                            // 5640\n      });                                                                                                            // 5641\n                                                                                                                     // 5642\n      if (styleInfo['font-family']) {                                                                                // 5643\n        var fontNames = styleInfo['font-family'].split(',').map(function (name) {                                    // 5644\n          return name.replace(/[\\'\\\"]/g, '')                                                                         // 5645\n            .replace(/\\s+$/, '')                                                                                     // 5646\n            .replace(/^\\s+/, '');                                                                                    // 5647\n        });                                                                                                          // 5648\n        var fontName = list.find(fontNames, self.isFontInstalled);                                                   // 5649\n                                                                                                                     // 5650\n        $toolbar.find('.dropdown-fontname li a').each(function () {                                                  // 5651\n          // always compare string to avoid creating another func.                                                   // 5652\n          var isChecked = ($(this).data('value') + '') === (fontName + '');                                          // 5653\n          this.className = isChecked ? 'checked' : '';                                                               // 5654\n        });                                                                                                          // 5655\n        $toolbar.find('.note-current-fontname').text(fontName);                                                      // 5656\n      }                                                                                                              // 5657\n                                                                                                                     // 5658\n      if (styleInfo['font-size']) {                                                                                  // 5659\n        var fontSize = styleInfo['font-size'];                                                                       // 5660\n        $toolbar.find('.dropdown-fontsize li a').each(function () {                                                  // 5661\n          // always compare with string to avoid creating another func.                                              // 5662\n          var isChecked = ($(this).data('value') + '') === (fontSize + '');                                          // 5663\n          this.className = isChecked ? 'checked' : '';                                                               // 5664\n        });                                                                                                          // 5665\n        $toolbar.find('.note-current-fontsize').text(fontSize);                                                      // 5666\n      }                                                                                                              // 5667\n                                                                                                                     // 5668\n      if (styleInfo['line-height']) {                                                                                // 5669\n        var lineHeight = styleInfo['line-height'];                                                                   // 5670\n        $toolbar.find('.dropdown-line-height li a').each(function () {                                               // 5671\n          // always compare with string to avoid creating another func.                                              // 5672\n          var isChecked = ($(this).data('value') + '') === (lineHeight + '');                                        // 5673\n          this.className = isChecked ? 'checked' : '';                                                               // 5674\n        });                                                                                                          // 5675\n      }                                                                                                              // 5676\n    };                                                                                                               // 5677\n                                                                                                                     // 5678\n    this.updateBtnStates = function (infos) {                                                                        // 5679\n      $.each(infos, function (selector, pred) {                                                                      // 5680\n        ui.toggleBtnActive($toolbar.find(selector), pred());                                                         // 5681\n      });                                                                                                            // 5682\n    };                                                                                                               // 5683\n                                                                                                                     // 5684\n    this.tableMoveHandler = function (event) {                                                                       // 5685\n      var PX_PER_EM = 18;                                                                                            // 5686\n      var $picker = $(event.target.parentNode); // target is mousecatcher                                            // 5687\n      var $dimensionDisplay = $picker.next();                                                                        // 5688\n      var $catcher = $picker.find('.note-dimension-picker-mousecatcher');                                            // 5689\n      var $highlighted = $picker.find('.note-dimension-picker-highlighted');                                         // 5690\n      var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');                                     // 5691\n                                                                                                                     // 5692\n      var posOffset;                                                                                                 // 5693\n      // HTML5 with jQuery - e.offsetX is undefined in Firefox                                                       // 5694\n      if (event.offsetX === undefined) {                                                                             // 5695\n        var posCatcher = $(event.target).offset();                                                                   // 5696\n        posOffset = {                                                                                                // 5697\n          x: event.pageX - posCatcher.left,                                                                          // 5698\n          y: event.pageY - posCatcher.top                                                                            // 5699\n        };                                                                                                           // 5700\n      } else {                                                                                                       // 5701\n        posOffset = {                                                                                                // 5702\n          x: event.offsetX,                                                                                          // 5703\n          y: event.offsetY                                                                                           // 5704\n        };                                                                                                           // 5705\n      }                                                                                                              // 5706\n                                                                                                                     // 5707\n      var dim = {                                                                                                    // 5708\n        c: Math.ceil(posOffset.x / PX_PER_EM) || 1,                                                                  // 5709\n        r: Math.ceil(posOffset.y / PX_PER_EM) || 1                                                                   // 5710\n      };                                                                                                             // 5711\n                                                                                                                     // 5712\n      $highlighted.css({ width: dim.c + 'em', height: dim.r + 'em' });                                               // 5713\n      $catcher.data('value', dim.c + 'x' + dim.r);                                                                   // 5714\n                                                                                                                     // 5715\n      if (3 < dim.c && dim.c < options.insertTableMaxSize.col) {                                                     // 5716\n        $unhighlighted.css({ width: dim.c + 1 + 'em'});                                                              // 5717\n      }                                                                                                              // 5718\n                                                                                                                     // 5719\n      if (3 < dim.r && dim.r < options.insertTableMaxSize.row) {                                                     // 5720\n        $unhighlighted.css({ height: dim.r + 1 + 'em'});                                                             // 5721\n      }                                                                                                              // 5722\n                                                                                                                     // 5723\n      $dimensionDisplay.html(dim.c + ' x ' + dim.r);                                                                 // 5724\n    };                                                                                                               // 5725\n  };                                                                                                                 // 5726\n                                                                                                                     // 5727\n  var Toolbar = function (context) {                                                                                 // 5728\n    var ui = $.summernote.ui;                                                                                        // 5729\n                                                                                                                     // 5730\n    var $note = context.layoutInfo.note;                                                                             // 5731\n    var $toolbar = context.layoutInfo.toolbar;                                                                       // 5732\n    var options = context.options;                                                                                   // 5733\n                                                                                                                     // 5734\n    this.shouldInitialize = function () {                                                                            // 5735\n      return !options.airMode;                                                                                       // 5736\n    };                                                                                                               // 5737\n                                                                                                                     // 5738\n    this.initialize = function () {                                                                                  // 5739\n      options.toolbar = options.toolbar || [];                                                                       // 5740\n                                                                                                                     // 5741\n      if (!options.toolbar.length) {                                                                                 // 5742\n        $toolbar.hide();                                                                                             // 5743\n      } else {                                                                                                       // 5744\n        context.invoke('buttons.build', $toolbar, options.toolbar);                                                  // 5745\n      }                                                                                                              // 5746\n                                                                                                                     // 5747\n      if (options.toolbarContainer) {                                                                                // 5748\n        $toolbar.appendTo(options.toolbarContainer);                                                                 // 5749\n      }                                                                                                              // 5750\n                                                                                                                     // 5751\n      $note.on('summernote.keyup summernote.mouseup summernote.change', function () {                                // 5752\n        context.invoke('buttons.updateCurrentStyle');                                                                // 5753\n      });                                                                                                            // 5754\n                                                                                                                     // 5755\n      context.invoke('buttons.updateCurrentStyle');                                                                  // 5756\n    };                                                                                                               // 5757\n                                                                                                                     // 5758\n    this.destroy = function () {                                                                                     // 5759\n      $toolbar.children().remove();                                                                                  // 5760\n    };                                                                                                               // 5761\n                                                                                                                     // 5762\n    this.updateFullscreen = function (isFullscreen) {                                                                // 5763\n      ui.toggleBtnActive($toolbar.find('.btn-fullscreen'), isFullscreen);                                            // 5764\n    };                                                                                                               // 5765\n                                                                                                                     // 5766\n    this.updateCodeview = function (isCodeview) {                                                                    // 5767\n      ui.toggleBtnActive($toolbar.find('.btn-codeview'), isCodeview);                                                // 5768\n      if (isCodeview) {                                                                                              // 5769\n        this.deactivate();                                                                                           // 5770\n      } else {                                                                                                       // 5771\n        this.activate();                                                                                             // 5772\n      }                                                                                                              // 5773\n    };                                                                                                               // 5774\n                                                                                                                     // 5775\n    this.activate = function (isIncludeCodeview) {                                                                   // 5776\n      var $btn = $toolbar.find('button');                                                                            // 5777\n      if (!isIncludeCodeview) {                                                                                      // 5778\n        $btn = $btn.not('.btn-codeview');                                                                            // 5779\n      }                                                                                                              // 5780\n      ui.toggleBtn($btn, true);                                                                                      // 5781\n    };                                                                                                               // 5782\n                                                                                                                     // 5783\n    this.deactivate = function (isIncludeCodeview) {                                                                 // 5784\n      var $btn = $toolbar.find('button');                                                                            // 5785\n      if (!isIncludeCodeview) {                                                                                      // 5786\n        $btn = $btn.not('.btn-codeview');                                                                            // 5787\n      }                                                                                                              // 5788\n      ui.toggleBtn($btn, false);                                                                                     // 5789\n    };                                                                                                               // 5790\n  };                                                                                                                 // 5791\n                                                                                                                     // 5792\n  var LinkDialog = function (context) {                                                                              // 5793\n    var self = this;                                                                                                 // 5794\n    var ui = $.summernote.ui;                                                                                        // 5795\n                                                                                                                     // 5796\n    var $editor = context.layoutInfo.editor;                                                                         // 5797\n    var options = context.options;                                                                                   // 5798\n    var lang = options.langInfo;                                                                                     // 5799\n                                                                                                                     // 5800\n    this.initialize = function () {                                                                                  // 5801\n      var $container = options.dialogsInBody ? $(document.body) : $editor;                                           // 5802\n                                                                                                                     // 5803\n      var body = '<div class=\"form-group\">' +                                                                        // 5804\n                   '<label>' + lang.link.textToDisplay + '</label>' +                                                // 5805\n                   '<input class=\"note-link-text form-control\" type=\"text\" />' +                                     // 5806\n                 '</div>' +                                                                                          // 5807\n                 '<div class=\"form-group\">' +                                                                        // 5808\n                   '<label>' + lang.link.url + '</label>' +                                                          // 5809\n                   '<input class=\"note-link-url form-control\" type=\"text\" value=\"http://\" />' +                      // 5810\n                 '</div>' +                                                                                          // 5811\n                 (!options.disableLinkTarget ?                                                                       // 5812\n                   '<div class=\"checkbox\">' +                                                                        // 5813\n                     '<label>' + '<input type=\"checkbox\" checked> ' + lang.link.openInNewWindow + '</label>' +       // 5814\n                   '</div>' : ''                                                                                     // 5815\n                 );                                                                                                  // 5816\n      var footer = '<button href=\"#\" class=\"btn btn-primary note-link-btn disabled\" disabled>' + lang.link.insert + '</button>';\n                                                                                                                     // 5818\n      this.$dialog = ui.dialog({                                                                                     // 5819\n        className: 'link-dialog',                                                                                    // 5820\n        title: lang.link.insert,                                                                                     // 5821\n        fade: options.dialogsFade,                                                                                   // 5822\n        body: body,                                                                                                  // 5823\n        footer: footer                                                                                               // 5824\n      }).render().appendTo($container);                                                                              // 5825\n    };                                                                                                               // 5826\n                                                                                                                     // 5827\n    this.destroy = function () {                                                                                     // 5828\n      ui.hideDialog(this.$dialog);                                                                                   // 5829\n      this.$dialog.remove();                                                                                         // 5830\n    };                                                                                                               // 5831\n                                                                                                                     // 5832\n    this.bindEnterKey = function ($input, $btn) {                                                                    // 5833\n      $input.on('keypress', function (event) {                                                                       // 5834\n        if (event.keyCode === key.code.ENTER) {                                                                      // 5835\n          $btn.trigger('click');                                                                                     // 5836\n        }                                                                                                            // 5837\n      });                                                                                                            // 5838\n    };                                                                                                               // 5839\n                                                                                                                     // 5840\n    /**                                                                                                              // 5841\n     * Show link dialog and set event handlers on dialog controls.                                                   // 5842\n     *                                                                                                               // 5843\n     * @param {Object} linkInfo                                                                                      // 5844\n     * @return {Promise}                                                                                             // 5845\n     */                                                                                                              // 5846\n    this.showLinkDialog = function (linkInfo) {                                                                      // 5847\n      return $.Deferred(function (deferred) {                                                                        // 5848\n        var $linkText = self.$dialog.find('.note-link-text'),                                                        // 5849\n        $linkUrl = self.$dialog.find('.note-link-url'),                                                              // 5850\n        $linkBtn = self.$dialog.find('.note-link-btn'),                                                              // 5851\n        $openInNewWindow = self.$dialog.find('input[type=checkbox]');                                                // 5852\n                                                                                                                     // 5853\n        ui.onDialogShown(self.$dialog, function () {                                                                 // 5854\n          context.triggerEvent('dialog.shown');                                                                      // 5855\n                                                                                                                     // 5856\n          $linkText.val(linkInfo.text);                                                                              // 5857\n                                                                                                                     // 5858\n          $linkText.on('input', function () {                                                                        // 5859\n            ui.toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());                                               // 5860\n            // if linktext was modified by keyup,                                                                    // 5861\n            // stop cloning text from linkUrl                                                                        // 5862\n            linkInfo.text = $linkText.val();                                                                         // 5863\n          });                                                                                                        // 5864\n                                                                                                                     // 5865\n          // if no url was given, copy text to url                                                                   // 5866\n          if (!linkInfo.url) {                                                                                       // 5867\n            linkInfo.url = linkInfo.text || 'http://';                                                               // 5868\n            ui.toggleBtn($linkBtn, linkInfo.text);                                                                   // 5869\n          }                                                                                                          // 5870\n                                                                                                                     // 5871\n          $linkUrl.on('input', function () {                                                                         // 5872\n            ui.toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());                                               // 5873\n            // display same link on `Text to display` input                                                          // 5874\n            // when create a new link                                                                                // 5875\n            if (!linkInfo.text) {                                                                                    // 5876\n              $linkText.val($linkUrl.val());                                                                         // 5877\n            }                                                                                                        // 5878\n          }).val(linkInfo.url).trigger('focus');                                                                     // 5879\n                                                                                                                     // 5880\n          self.bindEnterKey($linkUrl, $linkBtn);                                                                     // 5881\n          self.bindEnterKey($linkText, $linkBtn);                                                                    // 5882\n                                                                                                                     // 5883\n          $openInNewWindow.prop('checked', linkInfo.isNewWindow);                                                    // 5884\n                                                                                                                     // 5885\n          $linkBtn.one('click', function (event) {                                                                   // 5886\n            event.preventDefault();                                                                                  // 5887\n                                                                                                                     // 5888\n            deferred.resolve({                                                                                       // 5889\n              range: linkInfo.range,                                                                                 // 5890\n              url: $linkUrl.val(),                                                                                   // 5891\n              text: $linkText.val(),                                                                                 // 5892\n              isNewWindow: $openInNewWindow.is(':checked')                                                           // 5893\n            });                                                                                                      // 5894\n            self.$dialog.modal('hide');                                                                              // 5895\n          });                                                                                                        // 5896\n        });                                                                                                          // 5897\n                                                                                                                     // 5898\n        ui.onDialogHidden(self.$dialog, function () {                                                                // 5899\n          // detach events                                                                                           // 5900\n          $linkText.off('input keypress');                                                                           // 5901\n          $linkUrl.off('input keypress');                                                                            // 5902\n          $linkBtn.off('click');                                                                                     // 5903\n                                                                                                                     // 5904\n          if (deferred.state() === 'pending') {                                                                      // 5905\n            deferred.reject();                                                                                       // 5906\n          }                                                                                                          // 5907\n        });                                                                                                          // 5908\n                                                                                                                     // 5909\n        ui.showDialog(self.$dialog);                                                                                 // 5910\n      }).promise();                                                                                                  // 5911\n    };                                                                                                               // 5912\n                                                                                                                     // 5913\n    /**                                                                                                              // 5914\n     * @param {Object} layoutInfo                                                                                    // 5915\n     */                                                                                                              // 5916\n    this.show = function () {                                                                                        // 5917\n      var linkInfo = context.invoke('editor.getLinkInfo');                                                           // 5918\n                                                                                                                     // 5919\n      context.invoke('editor.saveRange');                                                                            // 5920\n      this.showLinkDialog(linkInfo).then(function (linkInfo) {                                                       // 5921\n        context.invoke('editor.restoreRange');                                                                       // 5922\n        context.invoke('editor.createLink', linkInfo);                                                               // 5923\n      }).fail(function () {                                                                                          // 5924\n        context.invoke('editor.restoreRange');                                                                       // 5925\n      });                                                                                                            // 5926\n    };                                                                                                               // 5927\n    context.memo('help.linkDialog.show', options.langInfo.help['linkDialog.show']);                                  // 5928\n  };                                                                                                                 // 5929\n                                                                                                                     // 5930\n  var LinkPopover = function (context) {                                                                             // 5931\n    var self = this;                                                                                                 // 5932\n    var ui = $.summernote.ui;                                                                                        // 5933\n                                                                                                                     // 5934\n    var options = context.options;                                                                                   // 5935\n                                                                                                                     // 5936\n    this.events = {                                                                                                  // 5937\n      'summernote.keyup summernote.mouseup summernote.change summernote.scroll': function () {                       // 5938\n        self.update();                                                                                               // 5939\n      },                                                                                                             // 5940\n      'summernote.dialog.shown': function () {                                                                       // 5941\n        self.hide();                                                                                                 // 5942\n      }                                                                                                              // 5943\n    };                                                                                                               // 5944\n                                                                                                                     // 5945\n    this.shouldInitialize = function () {                                                                            // 5946\n      return !list.isEmpty(options.popover.link);                                                                    // 5947\n    };                                                                                                               // 5948\n                                                                                                                     // 5949\n    this.initialize = function () {                                                                                  // 5950\n      this.$popover = ui.popover({                                                                                   // 5951\n        className: 'note-link-popover',                                                                              // 5952\n        callback: function ($node) {                                                                                 // 5953\n          var $content = $node.find('.popover-content');                                                             // 5954\n          $content.prepend('<span><a target=\"_blank\"></a>&nbsp;</span>');                                            // 5955\n        }                                                                                                            // 5956\n      }).render().appendTo('body');                                                                                  // 5957\n      var $content = this.$popover.find('.popover-content');                                                         // 5958\n                                                                                                                     // 5959\n      context.invoke('buttons.build', $content, options.popover.link);                                               // 5960\n    };                                                                                                               // 5961\n                                                                                                                     // 5962\n    this.destroy = function () {                                                                                     // 5963\n      this.$popover.remove();                                                                                        // 5964\n    };                                                                                                               // 5965\n                                                                                                                     // 5966\n    this.update = function () {                                                                                      // 5967\n      // Prevent focusing on editable when invoke('code') is executed                                                // 5968\n      if (!context.invoke('editor.hasFocus')) {                                                                      // 5969\n        this.hide();                                                                                                 // 5970\n        return;                                                                                                      // 5971\n      }                                                                                                              // 5972\n                                                                                                                     // 5973\n      var rng = context.invoke('editor.createRange');                                                                // 5974\n      if (rng.isCollapsed() && rng.isOnAnchor()) {                                                                   // 5975\n        var anchor = dom.ancestor(rng.sc, dom.isAnchor);                                                             // 5976\n        var href = $(anchor).attr('href');                                                                           // 5977\n        this.$popover.find('a').attr('href', href).html(href);                                                       // 5978\n                                                                                                                     // 5979\n        var pos = dom.posFromPlaceholder(anchor);                                                                    // 5980\n        this.$popover.css({                                                                                          // 5981\n          display: 'block',                                                                                          // 5982\n          left: pos.left,                                                                                            // 5983\n          top: pos.top                                                                                               // 5984\n        });                                                                                                          // 5985\n      } else {                                                                                                       // 5986\n        this.hide();                                                                                                 // 5987\n      }                                                                                                              // 5988\n    };                                                                                                               // 5989\n                                                                                                                     // 5990\n    this.hide = function () {                                                                                        // 5991\n      this.$popover.hide();                                                                                          // 5992\n    };                                                                                                               // 5993\n  };                                                                                                                 // 5994\n                                                                                                                     // 5995\n  var ImageDialog = function (context) {                                                                             // 5996\n    var self = this;                                                                                                 // 5997\n    var ui = $.summernote.ui;                                                                                        // 5998\n                                                                                                                     // 5999\n    var $editor = context.layoutInfo.editor;                                                                         // 6000\n    var options = context.options;                                                                                   // 6001\n    var lang = options.langInfo;                                                                                     // 6002\n                                                                                                                     // 6003\n    this.initialize = function () {                                                                                  // 6004\n      var $container = options.dialogsInBody ? $(document.body) : $editor;                                           // 6005\n                                                                                                                     // 6006\n      var imageLimitation = '';                                                                                      // 6007\n      if (options.maximumImageFileSize) {                                                                            // 6008\n        var unit = Math.floor(Math.log(options.maximumImageFileSize) / Math.log(1024));                              // 6009\n        var readableSize = (options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 +                    // 6010\n                           ' ' + ' KMGTP'[unit] + 'B';                                                               // 6011\n        imageLimitation = '<small>' + lang.image.maximumFileSize + ' : ' + readableSize + '</small>';                // 6012\n      }                                                                                                              // 6013\n                                                                                                                     // 6014\n      var body = '<div class=\"form-group note-group-select-from-files\">' +                                           // 6015\n                   '<label>' + lang.image.selectFromFiles + '</label>' +                                             // 6016\n                   '<input class=\"note-image-input form-control\" type=\"file\" name=\"files\" accept=\"image/*\" multiple=\"multiple\" />' +\n                   imageLimitation +                                                                                 // 6018\n                 '</div>' +                                                                                          // 6019\n                 '<div class=\"form-group\" style=\"overflow:auto;\">' +                                                 // 6020\n                   '<label>' + lang.image.url + '</label>' +                                                         // 6021\n                   '<input class=\"note-image-url form-control col-md-12\" type=\"text\" />' +                           // 6022\n                 '</div>';                                                                                           // 6023\n      var footer = '<button href=\"#\" class=\"btn btn-primary note-image-btn disabled\" disabled>' + lang.image.insert + '</button>';\n                                                                                                                     // 6025\n      this.$dialog = ui.dialog({                                                                                     // 6026\n        title: lang.image.insert,                                                                                    // 6027\n        fade: options.dialogsFade,                                                                                   // 6028\n        body: body,                                                                                                  // 6029\n        footer: footer                                                                                               // 6030\n      }).render().appendTo($container);                                                                              // 6031\n    };                                                                                                               // 6032\n                                                                                                                     // 6033\n    this.destroy = function () {                                                                                     // 6034\n      ui.hideDialog(this.$dialog);                                                                                   // 6035\n      this.$dialog.remove();                                                                                         // 6036\n    };                                                                                                               // 6037\n                                                                                                                     // 6038\n    this.bindEnterKey = function ($input, $btn) {                                                                    // 6039\n      $input.on('keypress', function (event) {                                                                       // 6040\n        if (event.keyCode === key.code.ENTER) {                                                                      // 6041\n          $btn.trigger('click');                                                                                     // 6042\n        }                                                                                                            // 6043\n      });                                                                                                            // 6044\n    };                                                                                                               // 6045\n                                                                                                                     // 6046\n    this.show = function () {                                                                                        // 6047\n      context.invoke('editor.saveRange');                                                                            // 6048\n      this.showImageDialog().then(function (data) {                                                                  // 6049\n        // [workaround] hide dialog before restore range for IE range focus                                          // 6050\n        ui.hideDialog(self.$dialog);                                                                                 // 6051\n        context.invoke('editor.restoreRange');                                                                       // 6052\n                                                                                                                     // 6053\n        if (typeof data === 'string') { // image url                                                                 // 6054\n          context.invoke('editor.insertImage', data);                                                                // 6055\n        } else { // array of files                                                                                   // 6056\n          context.invoke('editor.insertImagesOrCallback', data);                                                     // 6057\n        }                                                                                                            // 6058\n      }).fail(function () {                                                                                          // 6059\n        context.invoke('editor.restoreRange');                                                                       // 6060\n      });                                                                                                            // 6061\n    };                                                                                                               // 6062\n                                                                                                                     // 6063\n    /**                                                                                                              // 6064\n     * show image dialog                                                                                             // 6065\n     *                                                                                                               // 6066\n     * @param {jQuery} $dialog                                                                                       // 6067\n     * @return {Promise}                                                                                             // 6068\n     */                                                                                                              // 6069\n    this.showImageDialog = function () {                                                                             // 6070\n      return $.Deferred(function (deferred) {                                                                        // 6071\n        var $imageInput = self.$dialog.find('.note-image-input'),                                                    // 6072\n            $imageUrl = self.$dialog.find('.note-image-url'),                                                        // 6073\n            $imageBtn = self.$dialog.find('.note-image-btn');                                                        // 6074\n                                                                                                                     // 6075\n        ui.onDialogShown(self.$dialog, function () {                                                                 // 6076\n          context.triggerEvent('dialog.shown');                                                                      // 6077\n                                                                                                                     // 6078\n          // Cloning imageInput to clear element.                                                                    // 6079\n          $imageInput.replaceWith($imageInput.clone()                                                                // 6080\n            .on('change', function () {                                                                              // 6081\n              deferred.resolve(this.files || this.value);                                                            // 6082\n            })                                                                                                       // 6083\n            .val('')                                                                                                 // 6084\n          );                                                                                                         // 6085\n                                                                                                                     // 6086\n          $imageBtn.click(function (event) {                                                                         // 6087\n            event.preventDefault();                                                                                  // 6088\n                                                                                                                     // 6089\n            deferred.resolve($imageUrl.val());                                                                       // 6090\n          });                                                                                                        // 6091\n                                                                                                                     // 6092\n          $imageUrl.on('keyup paste', function () {                                                                  // 6093\n            var url = $imageUrl.val();                                                                               // 6094\n            ui.toggleBtn($imageBtn, url);                                                                            // 6095\n          }).val('').trigger('focus');                                                                               // 6096\n          self.bindEnterKey($imageUrl, $imageBtn);                                                                   // 6097\n        });                                                                                                          // 6098\n                                                                                                                     // 6099\n        ui.onDialogHidden(self.$dialog, function () {                                                                // 6100\n          $imageInput.off('change');                                                                                 // 6101\n          $imageUrl.off('keyup paste keypress');                                                                     // 6102\n          $imageBtn.off('click');                                                                                    // 6103\n                                                                                                                     // 6104\n          if (deferred.state() === 'pending') {                                                                      // 6105\n            deferred.reject();                                                                                       // 6106\n          }                                                                                                          // 6107\n        });                                                                                                          // 6108\n                                                                                                                     // 6109\n        ui.showDialog(self.$dialog);                                                                                 // 6110\n      });                                                                                                            // 6111\n    };                                                                                                               // 6112\n  };                                                                                                                 // 6113\n                                                                                                                     // 6114\n  var ImagePopover = function (context) {                                                                            // 6115\n    var ui = $.summernote.ui;                                                                                        // 6116\n                                                                                                                     // 6117\n    var options = context.options;                                                                                   // 6118\n                                                                                                                     // 6119\n    this.shouldInitialize = function () {                                                                            // 6120\n      return !list.isEmpty(options.popover.image);                                                                   // 6121\n    };                                                                                                               // 6122\n                                                                                                                     // 6123\n    this.initialize = function () {                                                                                  // 6124\n      this.$popover = ui.popover({                                                                                   // 6125\n        className: 'note-image-popover'                                                                              // 6126\n      }).render().appendTo('body');                                                                                  // 6127\n      var $content = this.$popover.find('.popover-content');                                                         // 6128\n                                                                                                                     // 6129\n      context.invoke('buttons.build', $content, options.popover.image);                                              // 6130\n    };                                                                                                               // 6131\n                                                                                                                     // 6132\n    this.destroy = function () {                                                                                     // 6133\n      this.$popover.remove();                                                                                        // 6134\n    };                                                                                                               // 6135\n                                                                                                                     // 6136\n    this.update = function (target) {                                                                                // 6137\n      if (dom.isImg(target)) {                                                                                       // 6138\n        var pos = dom.posFromPlaceholder(target);                                                                    // 6139\n        this.$popover.css({                                                                                          // 6140\n          display: 'block',                                                                                          // 6141\n          left: pos.left,                                                                                            // 6142\n          top: pos.top                                                                                               // 6143\n        });                                                                                                          // 6144\n      } else {                                                                                                       // 6145\n        this.hide();                                                                                                 // 6146\n      }                                                                                                              // 6147\n    };                                                                                                               // 6148\n                                                                                                                     // 6149\n    this.hide = function () {                                                                                        // 6150\n      this.$popover.hide();                                                                                          // 6151\n    };                                                                                                               // 6152\n  };                                                                                                                 // 6153\n                                                                                                                     // 6154\n  var VideoDialog = function (context) {                                                                             // 6155\n    var self = this;                                                                                                 // 6156\n    var ui = $.summernote.ui;                                                                                        // 6157\n                                                                                                                     // 6158\n    var $editor = context.layoutInfo.editor;                                                                         // 6159\n    var options = context.options;                                                                                   // 6160\n    var lang = options.langInfo;                                                                                     // 6161\n                                                                                                                     // 6162\n    this.initialize = function () {                                                                                  // 6163\n      var $container = options.dialogsInBody ? $(document.body) : $editor;                                           // 6164\n                                                                                                                     // 6165\n      var body = '<div class=\"form-group row-fluid\">' +                                                              // 6166\n          '<label>' + lang.video.url + ' <small class=\"text-muted\">' + lang.video.providers + '</small></label>' +   // 6167\n          '<input class=\"note-video-url form-control span12\" type=\"text\" />' +                                       // 6168\n          '</div>';                                                                                                  // 6169\n      var footer = '<button href=\"#\" class=\"btn btn-primary note-video-btn disabled\" disabled>' + lang.video.insert + '</button>';\n                                                                                                                     // 6171\n      this.$dialog = ui.dialog({                                                                                     // 6172\n        title: lang.video.insert,                                                                                    // 6173\n        fade: options.dialogsFade,                                                                                   // 6174\n        body: body,                                                                                                  // 6175\n        footer: footer                                                                                               // 6176\n      }).render().appendTo($container);                                                                              // 6177\n    };                                                                                                               // 6178\n                                                                                                                     // 6179\n    this.destroy = function () {                                                                                     // 6180\n      ui.hideDialog(this.$dialog);                                                                                   // 6181\n      this.$dialog.remove();                                                                                         // 6182\n    };                                                                                                               // 6183\n                                                                                                                     // 6184\n    this.bindEnterKey = function ($input, $btn) {                                                                    // 6185\n      $input.on('keypress', function (event) {                                                                       // 6186\n        if (event.keyCode === key.code.ENTER) {                                                                      // 6187\n          $btn.trigger('click');                                                                                     // 6188\n        }                                                                                                            // 6189\n      });                                                                                                            // 6190\n    };                                                                                                               // 6191\n                                                                                                                     // 6192\n    this.createVideoNode = function (url) {                                                                          // 6193\n      // video url patterns(youtube, instagram, vimeo, dailymotion, youku, mp4, ogg, webm)                           // 6194\n      var ytRegExp = /^(?:https?:\\/\\/)?(?:www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\n      var ytMatch = url.match(ytRegExp);                                                                             // 6196\n                                                                                                                     // 6197\n      var igRegExp = /\\/\\/instagram.com\\/p\\/(.[a-zA-Z0-9_-]*)/;                                                      // 6198\n      var igMatch = url.match(igRegExp);                                                                             // 6199\n                                                                                                                     // 6200\n      var vRegExp = /\\/\\/vine.co\\/v\\/(.[a-zA-Z0-9]*)/;                                                               // 6201\n      var vMatch = url.match(vRegExp);                                                                               // 6202\n                                                                                                                     // 6203\n      var vimRegExp = /\\/\\/(player.)?vimeo.com\\/([a-z]*\\/)*([0-9]{6,11})[?]?.*/;                                     // 6204\n      var vimMatch = url.match(vimRegExp);                                                                           // 6205\n                                                                                                                     // 6206\n      var dmRegExp = /.+dailymotion.com\\/(video|hub)\\/([^_]+)[^#]*(#video=([^_&]+))?/;                               // 6207\n      var dmMatch = url.match(dmRegExp);                                                                             // 6208\n                                                                                                                     // 6209\n      var youkuRegExp = /\\/\\/v\\.youku\\.com\\/v_show\\/id_(\\w+)=*\\.html/;                                               // 6210\n      var youkuMatch = url.match(youkuRegExp);                                                                       // 6211\n                                                                                                                     // 6212\n      var mp4RegExp = /^.+.(mp4|m4v)$/;                                                                              // 6213\n      var mp4Match = url.match(mp4RegExp);                                                                           // 6214\n                                                                                                                     // 6215\n      var oggRegExp = /^.+.(ogg|ogv)$/;                                                                              // 6216\n      var oggMatch = url.match(oggRegExp);                                                                           // 6217\n                                                                                                                     // 6218\n      var webmRegExp = /^.+.(webm)$/;                                                                                // 6219\n      var webmMatch = url.match(webmRegExp);                                                                         // 6220\n                                                                                                                     // 6221\n      var $video;                                                                                                    // 6222\n      if (ytMatch && ytMatch[1].length === 11) {                                                                     // 6223\n        var youtubeId = ytMatch[1];                                                                                  // 6224\n        $video = $('<iframe>')                                                                                       // 6225\n            .attr('frameborder', 0)                                                                                  // 6226\n            .attr('src', '//www.youtube.com/embed/' + youtubeId)                                                     // 6227\n            .attr('width', '640').attr('height', '360');                                                             // 6228\n      } else if (igMatch && igMatch[0].length) {                                                                     // 6229\n        $video = $('<iframe>')                                                                                       // 6230\n            .attr('frameborder', 0)                                                                                  // 6231\n            .attr('src', igMatch[0] + '/embed/')                                                                     // 6232\n            .attr('width', '612').attr('height', '710')                                                              // 6233\n            .attr('scrolling', 'no')                                                                                 // 6234\n            .attr('allowtransparency', 'true');                                                                      // 6235\n      } else if (vMatch && vMatch[0].length) {                                                                       // 6236\n        $video = $('<iframe>')                                                                                       // 6237\n            .attr('frameborder', 0)                                                                                  // 6238\n            .attr('src', vMatch[0] + '/embed/simple')                                                                // 6239\n            .attr('width', '600').attr('height', '600')                                                              // 6240\n            .attr('class', 'vine-embed');                                                                            // 6241\n      } else if (vimMatch && vimMatch[3].length) {                                                                   // 6242\n        $video = $('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>')                              // 6243\n            .attr('frameborder', 0)                                                                                  // 6244\n            .attr('src', '//player.vimeo.com/video/' + vimMatch[3])                                                  // 6245\n            .attr('width', '640').attr('height', '360');                                                             // 6246\n      } else if (dmMatch && dmMatch[2].length) {                                                                     // 6247\n        $video = $('<iframe>')                                                                                       // 6248\n            .attr('frameborder', 0)                                                                                  // 6249\n            .attr('src', '//www.dailymotion.com/embed/video/' + dmMatch[2])                                          // 6250\n            .attr('width', '640').attr('height', '360');                                                             // 6251\n      } else if (youkuMatch && youkuMatch[1].length) {                                                               // 6252\n        $video = $('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>')                              // 6253\n            .attr('frameborder', 0)                                                                                  // 6254\n            .attr('height', '498')                                                                                   // 6255\n            .attr('width', '510')                                                                                    // 6256\n            .attr('src', '//player.youku.com/embed/' + youkuMatch[1]);                                               // 6257\n      } else if (mp4Match || oggMatch || webmMatch) {                                                                // 6258\n        $video = $('<video controls>')                                                                               // 6259\n            .attr('src', url)                                                                                        // 6260\n            .attr('width', '640').attr('height', '360');                                                             // 6261\n      } else {                                                                                                       // 6262\n        // this is not a known video link. Now what, Cat? Now what?                                                  // 6263\n        return false;                                                                                                // 6264\n      }                                                                                                              // 6265\n                                                                                                                     // 6266\n      $video.addClass('note-video-clip');                                                                            // 6267\n                                                                                                                     // 6268\n      return $video[0];                                                                                              // 6269\n    };                                                                                                               // 6270\n                                                                                                                     // 6271\n    this.show = function () {                                                                                        // 6272\n      var text = context.invoke('editor.getSelectedText');                                                           // 6273\n      context.invoke('editor.saveRange');                                                                            // 6274\n      this.showVideoDialog(text).then(function (url) {                                                               // 6275\n        // [workaround] hide dialog before restore range for IE range focus                                          // 6276\n        ui.hideDialog(self.$dialog);                                                                                 // 6277\n        context.invoke('editor.restoreRange');                                                                       // 6278\n                                                                                                                     // 6279\n        // build node                                                                                                // 6280\n        var $node = self.createVideoNode(url);                                                                       // 6281\n                                                                                                                     // 6282\n        if ($node) {                                                                                                 // 6283\n          // insert video node                                                                                       // 6284\n          context.invoke('editor.insertNode', $node);                                                                // 6285\n        }                                                                                                            // 6286\n      }).fail(function () {                                                                                          // 6287\n        context.invoke('editor.restoreRange');                                                                       // 6288\n      });                                                                                                            // 6289\n    };                                                                                                               // 6290\n                                                                                                                     // 6291\n    /**                                                                                                              // 6292\n     * show image dialog                                                                                             // 6293\n     *                                                                                                               // 6294\n     * @param {jQuery} $dialog                                                                                       // 6295\n     * @return {Promise}                                                                                             // 6296\n     */                                                                                                              // 6297\n    this.showVideoDialog = function (text) {                                                                         // 6298\n      return $.Deferred(function (deferred) {                                                                        // 6299\n        var $videoUrl = self.$dialog.find('.note-video-url'),                                                        // 6300\n            $videoBtn = self.$dialog.find('.note-video-btn');                                                        // 6301\n                                                                                                                     // 6302\n        ui.onDialogShown(self.$dialog, function () {                                                                 // 6303\n          context.triggerEvent('dialog.shown');                                                                      // 6304\n                                                                                                                     // 6305\n          $videoUrl.val(text).on('input', function () {                                                              // 6306\n            ui.toggleBtn($videoBtn, $videoUrl.val());                                                                // 6307\n          }).trigger('focus');                                                                                       // 6308\n                                                                                                                     // 6309\n          $videoBtn.click(function (event) {                                                                         // 6310\n            event.preventDefault();                                                                                  // 6311\n                                                                                                                     // 6312\n            deferred.resolve($videoUrl.val());                                                                       // 6313\n          });                                                                                                        // 6314\n                                                                                                                     // 6315\n          self.bindEnterKey($videoUrl, $videoBtn);                                                                   // 6316\n        });                                                                                                          // 6317\n                                                                                                                     // 6318\n        ui.onDialogHidden(self.$dialog, function () {                                                                // 6319\n          $videoUrl.off('input');                                                                                    // 6320\n          $videoBtn.off('click');                                                                                    // 6321\n                                                                                                                     // 6322\n          if (deferred.state() === 'pending') {                                                                      // 6323\n            deferred.reject();                                                                                       // 6324\n          }                                                                                                          // 6325\n        });                                                                                                          // 6326\n                                                                                                                     // 6327\n        ui.showDialog(self.$dialog);                                                                                 // 6328\n      });                                                                                                            // 6329\n    };                                                                                                               // 6330\n  };                                                                                                                 // 6331\n                                                                                                                     // 6332\n  var HelpDialog = function (context) {                                                                              // 6333\n    var self = this;                                                                                                 // 6334\n    var ui = $.summernote.ui;                                                                                        // 6335\n                                                                                                                     // 6336\n    var $editor = context.layoutInfo.editor;                                                                         // 6337\n    var options = context.options;                                                                                   // 6338\n    var lang = options.langInfo;                                                                                     // 6339\n                                                                                                                     // 6340\n    this.createShortCutList = function () {                                                                          // 6341\n      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];                                                       // 6342\n      return Object.keys(keyMap).map(function (key) {                                                                // 6343\n        var command = keyMap[key];                                                                                   // 6344\n        var $row = $('<div><div class=\"help-list-item\"/></div>');                                                    // 6345\n        $row.append($('<label><kbd>' + key + '</kdb></label>').css({                                                 // 6346\n          'width': 180,                                                                                              // 6347\n          'margin-right': 10                                                                                         // 6348\n        })).append($('<span/>').html(context.memo('help.' + command) || command));                                   // 6349\n        return $row.html();                                                                                          // 6350\n      }).join('');                                                                                                   // 6351\n    };                                                                                                               // 6352\n                                                                                                                     // 6353\n    this.initialize = function () {                                                                                  // 6354\n      var $container = options.dialogsInBody ? $(document.body) : $editor;                                           // 6355\n                                                                                                                     // 6356\n      var body = [                                                                                                   // 6357\n        '<p class=\"text-center\">',                                                                                   // 6358\n        '<a href=\"//summernote.org/\" target=\"_blank\">Summernote 0.8.1</a> · ',                                       // 6359\n        '<a href=\"//github.com/summernote/summernote\" target=\"_blank\">Project</a> · ',                               // 6360\n        '<a href=\"//github.com/summernote/summernote/issues\" target=\"_blank\">Issues</a>',                            // 6361\n        '</p>'                                                                                                       // 6362\n      ].join('');                                                                                                    // 6363\n                                                                                                                     // 6364\n      this.$dialog = ui.dialog({                                                                                     // 6365\n        title: lang.options.help,                                                                                    // 6366\n        fade: options.dialogsFade,                                                                                   // 6367\n        body: this.createShortCutList(),                                                                             // 6368\n        footer: body,                                                                                                // 6369\n        callback: function ($node) {                                                                                 // 6370\n          $node.find('.modal-body').css({                                                                            // 6371\n            'max-height': 300,                                                                                       // 6372\n            'overflow': 'scroll'                                                                                     // 6373\n          });                                                                                                        // 6374\n        }                                                                                                            // 6375\n      }).render().appendTo($container);                                                                              // 6376\n    };                                                                                                               // 6377\n                                                                                                                     // 6378\n    this.destroy = function () {                                                                                     // 6379\n      ui.hideDialog(this.$dialog);                                                                                   // 6380\n      this.$dialog.remove();                                                                                         // 6381\n    };                                                                                                               // 6382\n                                                                                                                     // 6383\n    /**                                                                                                              // 6384\n     * show help dialog                                                                                              // 6385\n     *                                                                                                               // 6386\n     * @return {Promise}                                                                                             // 6387\n     */                                                                                                              // 6388\n    this.showHelpDialog = function () {                                                                              // 6389\n      return $.Deferred(function (deferred) {                                                                        // 6390\n        ui.onDialogShown(self.$dialog, function () {                                                                 // 6391\n          context.triggerEvent('dialog.shown');                                                                      // 6392\n          deferred.resolve();                                                                                        // 6393\n        });                                                                                                          // 6394\n        ui.showDialog(self.$dialog);                                                                                 // 6395\n      }).promise();                                                                                                  // 6396\n    };                                                                                                               // 6397\n                                                                                                                     // 6398\n    this.show = function () {                                                                                        // 6399\n      context.invoke('editor.saveRange');                                                                            // 6400\n      this.showHelpDialog().then(function () {                                                                       // 6401\n        context.invoke('editor.restoreRange');                                                                       // 6402\n      });                                                                                                            // 6403\n    };                                                                                                               // 6404\n  };                                                                                                                 // 6405\n                                                                                                                     // 6406\n  var AirPopover = function (context) {                                                                              // 6407\n    var self = this;                                                                                                 // 6408\n    var ui = $.summernote.ui;                                                                                        // 6409\n                                                                                                                     // 6410\n    var options = context.options;                                                                                   // 6411\n                                                                                                                     // 6412\n    var AIR_MODE_POPOVER_X_OFFSET = 20;                                                                              // 6413\n                                                                                                                     // 6414\n    this.events = {                                                                                                  // 6415\n      'summernote.keyup summernote.mouseup summernote.scroll': function () {                                         // 6416\n        self.update();                                                                                               // 6417\n      },                                                                                                             // 6418\n      'summernote.change summernote.dialog.shown': function () {                                                     // 6419\n        self.hide();                                                                                                 // 6420\n      },                                                                                                             // 6421\n      'summernote.focusout': function (we, e) {                                                                      // 6422\n        // [workaround] Firefox doesn't support relatedTarget on focusout                                            // 6423\n        //  - Ignore hide action on focus out in FF.                                                                 // 6424\n        if (agent.isFF) {                                                                                            // 6425\n          return;                                                                                                    // 6426\n        }                                                                                                            // 6427\n                                                                                                                     // 6428\n        if (!e.relatedTarget || !dom.ancestor(e.relatedTarget, func.eq(self.$popover[0]))) {                         // 6429\n          self.hide();                                                                                               // 6430\n        }                                                                                                            // 6431\n      }                                                                                                              // 6432\n    };                                                                                                               // 6433\n                                                                                                                     // 6434\n    this.shouldInitialize = function () {                                                                            // 6435\n      return options.airMode && !list.isEmpty(options.popover.air);                                                  // 6436\n    };                                                                                                               // 6437\n                                                                                                                     // 6438\n    this.initialize = function () {                                                                                  // 6439\n      this.$popover = ui.popover({                                                                                   // 6440\n        className: 'note-air-popover'                                                                                // 6441\n      }).render().appendTo('body');                                                                                  // 6442\n      var $content = this.$popover.find('.popover-content');                                                         // 6443\n                                                                                                                     // 6444\n      context.invoke('buttons.build', $content, options.popover.air);                                                // 6445\n    };                                                                                                               // 6446\n                                                                                                                     // 6447\n    this.destroy = function () {                                                                                     // 6448\n      this.$popover.remove();                                                                                        // 6449\n    };                                                                                                               // 6450\n                                                                                                                     // 6451\n    this.update = function () {                                                                                      // 6452\n      var styleInfo = context.invoke('editor.currentStyle');                                                         // 6453\n      if (styleInfo.range && !styleInfo.range.isCollapsed()) {                                                       // 6454\n        var rect = list.last(styleInfo.range.getClientRects());                                                      // 6455\n        if (rect) {                                                                                                  // 6456\n          var bnd = func.rect2bnd(rect);                                                                             // 6457\n          this.$popover.css({                                                                                        // 6458\n            display: 'block',                                                                                        // 6459\n            left: Math.max(bnd.left + bnd.width / 2, 0) - AIR_MODE_POPOVER_X_OFFSET,                                 // 6460\n            top: bnd.top + bnd.height                                                                                // 6461\n          });                                                                                                        // 6462\n        }                                                                                                            // 6463\n      } else {                                                                                                       // 6464\n        this.hide();                                                                                                 // 6465\n      }                                                                                                              // 6466\n    };                                                                                                               // 6467\n                                                                                                                     // 6468\n    this.hide = function () {                                                                                        // 6469\n      this.$popover.hide();                                                                                          // 6470\n    };                                                                                                               // 6471\n  };                                                                                                                 // 6472\n                                                                                                                     // 6473\n  var HintPopover = function (context) {                                                                             // 6474\n    var self = this;                                                                                                 // 6475\n    var ui = $.summernote.ui;                                                                                        // 6476\n                                                                                                                     // 6477\n    var POPOVER_DIST = 5;                                                                                            // 6478\n    var hint = context.options.hint || [];                                                                           // 6479\n    var direction = context.options.hintDirection || 'bottom';                                                       // 6480\n    var hints = $.isArray(hint) ? hint : [hint];                                                                     // 6481\n                                                                                                                     // 6482\n    this.events = {                                                                                                  // 6483\n      'summernote.keyup': function (we, e) {                                                                         // 6484\n        if (!e.isDefaultPrevented()) {                                                                               // 6485\n          self.handleKeyup(e);                                                                                       // 6486\n        }                                                                                                            // 6487\n      },                                                                                                             // 6488\n      'summernote.keydown': function (we, e) {                                                                       // 6489\n        self.handleKeydown(e);                                                                                       // 6490\n      },                                                                                                             // 6491\n      'summernote.dialog.shown': function () {                                                                       // 6492\n        self.hide();                                                                                                 // 6493\n      }                                                                                                              // 6494\n    };                                                                                                               // 6495\n                                                                                                                     // 6496\n    this.shouldInitialize = function () {                                                                            // 6497\n      return hints.length > 0;                                                                                       // 6498\n    };                                                                                                               // 6499\n                                                                                                                     // 6500\n    this.initialize = function () {                                                                                  // 6501\n      this.lastWordRange = null;                                                                                     // 6502\n      this.$popover = ui.popover({                                                                                   // 6503\n        className: 'note-hint-popover',                                                                              // 6504\n        hideArrow: true,                                                                                             // 6505\n        direction: ''                                                                                                // 6506\n      }).render().appendTo('body');                                                                                  // 6507\n                                                                                                                     // 6508\n      this.$popover.hide();                                                                                          // 6509\n                                                                                                                     // 6510\n      this.$content = this.$popover.find('.popover-content');                                                        // 6511\n                                                                                                                     // 6512\n      this.$content.on('click', '.note-hint-item', function () {                                                     // 6513\n        self.$content.find('.active').removeClass('active');                                                         // 6514\n        $(this).addClass('active');                                                                                  // 6515\n        self.replace();                                                                                              // 6516\n      });                                                                                                            // 6517\n    };                                                                                                               // 6518\n                                                                                                                     // 6519\n    this.destroy = function () {                                                                                     // 6520\n      this.$popover.remove();                                                                                        // 6521\n    };                                                                                                               // 6522\n                                                                                                                     // 6523\n    this.selectItem = function ($item) {                                                                             // 6524\n      this.$content.find('.active').removeClass('active');                                                           // 6525\n      $item.addClass('active');                                                                                      // 6526\n                                                                                                                     // 6527\n      this.$content[0].scrollTop = $item[0].offsetTop - (this.$content.innerHeight() / 2);                           // 6528\n    };                                                                                                               // 6529\n                                                                                                                     // 6530\n    this.moveDown = function () {                                                                                    // 6531\n      var $current = this.$content.find('.note-hint-item.active');                                                   // 6532\n      var $next = $current.next();                                                                                   // 6533\n                                                                                                                     // 6534\n      if ($next.length) {                                                                                            // 6535\n        this.selectItem($next);                                                                                      // 6536\n      } else {                                                                                                       // 6537\n        var $nextGroup = $current.parent().next();                                                                   // 6538\n                                                                                                                     // 6539\n        if (!$nextGroup.length) {                                                                                    // 6540\n          $nextGroup = this.$content.find('.note-hint-group').first();                                               // 6541\n        }                                                                                                            // 6542\n                                                                                                                     // 6543\n        this.selectItem($nextGroup.find('.note-hint-item').first());                                                 // 6544\n      }                                                                                                              // 6545\n    };                                                                                                               // 6546\n                                                                                                                     // 6547\n    this.moveUp = function () {                                                                                      // 6548\n      var $current = this.$content.find('.note-hint-item.active');                                                   // 6549\n      var $prev = $current.prev();                                                                                   // 6550\n                                                                                                                     // 6551\n      if ($prev.length) {                                                                                            // 6552\n        this.selectItem($prev);                                                                                      // 6553\n      } else {                                                                                                       // 6554\n        var $prevGroup = $current.parent().prev();                                                                   // 6555\n                                                                                                                     // 6556\n        if (!$prevGroup.length) {                                                                                    // 6557\n          $prevGroup = this.$content.find('.note-hint-group').last();                                                // 6558\n        }                                                                                                            // 6559\n                                                                                                                     // 6560\n        this.selectItem($prevGroup.find('.note-hint-item').last());                                                  // 6561\n      }                                                                                                              // 6562\n    };                                                                                                               // 6563\n                                                                                                                     // 6564\n    this.replace = function () {                                                                                     // 6565\n      var $item = this.$content.find('.note-hint-item.active');                                                      // 6566\n                                                                                                                     // 6567\n      if ($item.length) {                                                                                            // 6568\n        var node = this.nodeFromItem($item);                                                                         // 6569\n        this.lastWordRange.insertNode(node);                                                                         // 6570\n        range.createFromNode(node).collapse().select();                                                              // 6571\n                                                                                                                     // 6572\n        this.lastWordRange = null;                                                                                   // 6573\n        this.hide();                                                                                                 // 6574\n        context.invoke('editor.focus');                                                                              // 6575\n      }                                                                                                              // 6576\n                                                                                                                     // 6577\n    };                                                                                                               // 6578\n                                                                                                                     // 6579\n    this.nodeFromItem = function ($item) {                                                                           // 6580\n      var hint = hints[$item.data('index')];                                                                         // 6581\n      var item = $item.data('item');                                                                                 // 6582\n      var node = hint.content ? hint.content(item) : item;                                                           // 6583\n      if (typeof node === 'string') {                                                                                // 6584\n        node = dom.createText(node);                                                                                 // 6585\n      }                                                                                                              // 6586\n      return node;                                                                                                   // 6587\n    };                                                                                                               // 6588\n                                                                                                                     // 6589\n    this.createItemTemplates = function (hintIdx, items) {                                                           // 6590\n      var hint = hints[hintIdx];                                                                                     // 6591\n      return items.map(function (item, idx) {                                                                        // 6592\n        var $item = $('<div class=\"note-hint-item\"/>');                                                              // 6593\n        $item.append(hint.template ? hint.template(item) : item + '');                                               // 6594\n        $item.data({                                                                                                 // 6595\n          'index': hintIdx,                                                                                          // 6596\n          'item': item                                                                                               // 6597\n        });                                                                                                          // 6598\n                                                                                                                     // 6599\n        if (hintIdx === 0 && idx === 0) {                                                                            // 6600\n          $item.addClass('active');                                                                                  // 6601\n        }                                                                                                            // 6602\n        return $item;                                                                                                // 6603\n      });                                                                                                            // 6604\n    };                                                                                                               // 6605\n                                                                                                                     // 6606\n    this.handleKeydown = function (e) {                                                                              // 6607\n      if (!this.$popover.is(':visible')) {                                                                           // 6608\n        return;                                                                                                      // 6609\n      }                                                                                                              // 6610\n                                                                                                                     // 6611\n      if (e.keyCode === key.code.ENTER) {                                                                            // 6612\n        e.preventDefault();                                                                                          // 6613\n        this.replace();                                                                                              // 6614\n      } else if (e.keyCode === key.code.UP) {                                                                        // 6615\n        e.preventDefault();                                                                                          // 6616\n        this.moveUp();                                                                                               // 6617\n      } else if (e.keyCode === key.code.DOWN) {                                                                      // 6618\n        e.preventDefault();                                                                                          // 6619\n        this.moveDown();                                                                                             // 6620\n      }                                                                                                              // 6621\n    };                                                                                                               // 6622\n                                                                                                                     // 6623\n    this.searchKeyword = function (index, keyword, callback) {                                                       // 6624\n      var hint = hints[index];                                                                                       // 6625\n      if (hint && hint.match.test(keyword) && hint.search) {                                                         // 6626\n        var matches = hint.match.exec(keyword);                                                                      // 6627\n        hint.search(matches[1], callback);                                                                           // 6628\n      } else {                                                                                                       // 6629\n        callback();                                                                                                  // 6630\n      }                                                                                                              // 6631\n    };                                                                                                               // 6632\n                                                                                                                     // 6633\n    this.createGroup = function (idx, keyword) {                                                                     // 6634\n      var $group = $('<div class=\"note-hint-group note-hint-group-' + idx + '\"/>');                                  // 6635\n      this.searchKeyword(idx, keyword, function (items) {                                                            // 6636\n        items = items || [];                                                                                         // 6637\n        if (items.length) {                                                                                          // 6638\n          $group.html(self.createItemTemplates(idx, items));                                                         // 6639\n          self.show();                                                                                               // 6640\n        }                                                                                                            // 6641\n      });                                                                                                            // 6642\n                                                                                                                     // 6643\n      return $group;                                                                                                 // 6644\n    };                                                                                                               // 6645\n                                                                                                                     // 6646\n    this.handleKeyup = function (e) {                                                                                // 6647\n      if (list.contains([key.code.ENTER, key.code.UP, key.code.DOWN], e.keyCode)) {                                  // 6648\n        if (e.keyCode === key.code.ENTER) {                                                                          // 6649\n          if (this.$popover.is(':visible')) {                                                                        // 6650\n            return;                                                                                                  // 6651\n          }                                                                                                          // 6652\n        }                                                                                                            // 6653\n      } else {                                                                                                       // 6654\n        var wordRange = context.invoke('editor.createRange').getWordRange();                                         // 6655\n        var keyword = wordRange.toString();                                                                          // 6656\n        if (hints.length && keyword) {                                                                               // 6657\n          this.$content.empty();                                                                                     // 6658\n                                                                                                                     // 6659\n          var bnd = func.rect2bnd(list.last(wordRange.getClientRects()));                                            // 6660\n          if (bnd) {                                                                                                 // 6661\n                                                                                                                     // 6662\n            this.$popover.hide();                                                                                    // 6663\n                                                                                                                     // 6664\n            this.lastWordRange = wordRange;                                                                          // 6665\n                                                                                                                     // 6666\n            hints.forEach(function (hint, idx) {                                                                     // 6667\n              if (hint.match.test(keyword)) {                                                                        // 6668\n                self.createGroup(idx, keyword).appendTo(self.$content);                                              // 6669\n              }                                                                                                      // 6670\n            });                                                                                                      // 6671\n                                                                                                                     // 6672\n            // set position for popover after group is created                                                       // 6673\n            if (direction === 'top') {                                                                               // 6674\n              this.$popover.css({                                                                                    // 6675\n                left: bnd.left,                                                                                      // 6676\n                top: bnd.top - this.$popover.outerHeight() - POPOVER_DIST                                            // 6677\n              });                                                                                                    // 6678\n            } else {                                                                                                 // 6679\n              this.$popover.css({                                                                                    // 6680\n                left: bnd.left,                                                                                      // 6681\n                top: bnd.top + bnd.height + POPOVER_DIST                                                             // 6682\n              });                                                                                                    // 6683\n            }                                                                                                        // 6684\n                                                                                                                     // 6685\n          }                                                                                                          // 6686\n        } else {                                                                                                     // 6687\n          this.hide();                                                                                               // 6688\n        }                                                                                                            // 6689\n      }                                                                                                              // 6690\n    };                                                                                                               // 6691\n                                                                                                                     // 6692\n    this.show = function () {                                                                                        // 6693\n      this.$popover.show();                                                                                          // 6694\n    };                                                                                                               // 6695\n                                                                                                                     // 6696\n    this.hide = function () {                                                                                        // 6697\n      this.$popover.hide();                                                                                          // 6698\n    };                                                                                                               // 6699\n  };                                                                                                                 // 6700\n                                                                                                                     // 6701\n                                                                                                                     // 6702\n  $.summernote = $.extend($.summernote, {                                                                            // 6703\n    version: '0.8.1',                                                                                                // 6704\n    ui: ui,                                                                                                          // 6705\n                                                                                                                     // 6706\n    plugins: {},                                                                                                     // 6707\n                                                                                                                     // 6708\n    options: {                                                                                                       // 6709\n      modules: {                                                                                                     // 6710\n        'editor': Editor,                                                                                            // 6711\n        'clipboard': Clipboard,                                                                                      // 6712\n        'dropzone': Dropzone,                                                                                        // 6713\n        'codeview': Codeview,                                                                                        // 6714\n        'statusbar': Statusbar,                                                                                      // 6715\n        'fullscreen': Fullscreen,                                                                                    // 6716\n        'handle': Handle,                                                                                            // 6717\n        // FIXME: HintPopover must be front of autolink                                                              // 6718\n        //  - Script error about range when Enter key is pressed on hint popover                                     // 6719\n        'hintPopover': HintPopover,                                                                                  // 6720\n        'autoLink': AutoLink,                                                                                        // 6721\n        'autoSync': AutoSync,                                                                                        // 6722\n        'placeholder': Placeholder,                                                                                  // 6723\n        'buttons': Buttons,                                                                                          // 6724\n        'toolbar': Toolbar,                                                                                          // 6725\n        'linkDialog': LinkDialog,                                                                                    // 6726\n        'linkPopover': LinkPopover,                                                                                  // 6727\n        'imageDialog': ImageDialog,                                                                                  // 6728\n        'imagePopover': ImagePopover,                                                                                // 6729\n        'videoDialog': VideoDialog,                                                                                  // 6730\n        'helpDialog': HelpDialog,                                                                                    // 6731\n        'airPopover': AirPopover                                                                                     // 6732\n      },                                                                                                             // 6733\n                                                                                                                     // 6734\n      buttons: {},                                                                                                   // 6735\n                                                                                                                     // 6736\n      lang: 'en-US',                                                                                                 // 6737\n                                                                                                                     // 6738\n      // toolbar                                                                                                     // 6739\n      toolbar: [                                                                                                     // 6740\n        ['style', ['style']],                                                                                        // 6741\n        ['font', ['bold', 'underline', 'clear']],                                                                    // 6742\n        ['fontname', ['fontname']],                                                                                  // 6743\n        ['color', ['color']],                                                                                        // 6744\n        ['para', ['ul', 'ol', 'paragraph']],                                                                         // 6745\n        ['table', ['table']],                                                                                        // 6746\n        ['insert', ['link', 'picture', 'video']],                                                                    // 6747\n        ['view', ['fullscreen', 'codeview', 'help']]                                                                 // 6748\n      ],                                                                                                             // 6749\n                                                                                                                     // 6750\n      // popover                                                                                                     // 6751\n      popover: {                                                                                                     // 6752\n        image: [                                                                                                     // 6753\n          ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],                                             // 6754\n          ['float', ['floatLeft', 'floatRight', 'floatNone']],                                                       // 6755\n          ['remove', ['removeMedia']]                                                                                // 6756\n        ],                                                                                                           // 6757\n        link: [                                                                                                      // 6758\n          ['link', ['linkDialogShow', 'unlink']]                                                                     // 6759\n        ],                                                                                                           // 6760\n        air: [                                                                                                       // 6761\n          ['color', ['color']],                                                                                      // 6762\n          ['font', ['bold', 'underline', 'clear']],                                                                  // 6763\n          ['para', ['ul', 'paragraph']],                                                                             // 6764\n          ['table', ['table']],                                                                                      // 6765\n          ['insert', ['link', 'picture']]                                                                            // 6766\n        ]                                                                                                            // 6767\n      },                                                                                                             // 6768\n                                                                                                                     // 6769\n      // air mode: inline editor                                                                                     // 6770\n      airMode: false,                                                                                                // 6771\n                                                                                                                     // 6772\n      width: null,                                                                                                   // 6773\n      height: null,                                                                                                  // 6774\n                                                                                                                     // 6775\n      focus: false,                                                                                                  // 6776\n      tabSize: 4,                                                                                                    // 6777\n      styleWithSpan: true,                                                                                           // 6778\n      shortcuts: true,                                                                                               // 6779\n      textareaAutoSync: true,                                                                                        // 6780\n      direction: null,                                                                                               // 6781\n                                                                                                                     // 6782\n      styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],                                     // 6783\n                                                                                                                     // 6784\n      fontNames: [                                                                                                   // 6785\n        'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',                                                      // 6786\n        'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',                                                    // 6787\n        'Tahoma', 'Times New Roman', 'Verdana'                                                                       // 6788\n      ],                                                                                                             // 6789\n                                                                                                                     // 6790\n      fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],                                               // 6791\n                                                                                                                     // 6792\n      // pallete colors(n x n)                                                                                       // 6793\n      colors: [                                                                                                      // 6794\n        ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'],                    // 6795\n        ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],                    // 6796\n        ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],                    // 6797\n        ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],                    // 6798\n        ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],                    // 6799\n        ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],                    // 6800\n        ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],                    // 6801\n        ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']                     // 6802\n      ],                                                                                                             // 6803\n                                                                                                                     // 6804\n      lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],                                         // 6805\n                                                                                                                     // 6806\n      tableClassName: 'table table-bordered',                                                                        // 6807\n                                                                                                                     // 6808\n      insertTableMaxSize: {                                                                                          // 6809\n        col: 10,                                                                                                     // 6810\n        row: 10                                                                                                      // 6811\n      },                                                                                                             // 6812\n                                                                                                                     // 6813\n      dialogsInBody: false,                                                                                          // 6814\n      dialogsFade: false,                                                                                            // 6815\n                                                                                                                     // 6816\n      maximumImageFileSize: null,                                                                                    // 6817\n                                                                                                                     // 6818\n      callbacks: {                                                                                                   // 6819\n        onInit: null,                                                                                                // 6820\n        onFocus: null,                                                                                               // 6821\n        onBlur: null,                                                                                                // 6822\n        onEnter: null,                                                                                               // 6823\n        onKeyup: null,                                                                                               // 6824\n        onKeydown: null,                                                                                             // 6825\n        onSubmit: null,                                                                                              // 6826\n        onImageUpload: null,                                                                                         // 6827\n        onImageUploadError: null                                                                                     // 6828\n      },                                                                                                             // 6829\n                                                                                                                     // 6830\n      codemirror: {                                                                                                  // 6831\n        mode: 'text/html',                                                                                           // 6832\n        htmlMode: true,                                                                                              // 6833\n        lineNumbers: true                                                                                            // 6834\n      },                                                                                                             // 6835\n                                                                                                                     // 6836\n      keyMap: {                                                                                                      // 6837\n        pc: {                                                                                                        // 6838\n          'ENTER': 'insertParagraph',                                                                                // 6839\n          'CTRL+Z': 'undo',                                                                                          // 6840\n          'CTRL+Y': 'redo',                                                                                          // 6841\n          'TAB': 'tab',                                                                                              // 6842\n          'SHIFT+TAB': 'untab',                                                                                      // 6843\n          'CTRL+B': 'bold',                                                                                          // 6844\n          'CTRL+I': 'italic',                                                                                        // 6845\n          'CTRL+U': 'underline',                                                                                     // 6846\n          'CTRL+SHIFT+S': 'strikethrough',                                                                           // 6847\n          'CTRL+BACKSLASH': 'removeFormat',                                                                          // 6848\n          'CTRL+SHIFT+L': 'justifyLeft',                                                                             // 6849\n          'CTRL+SHIFT+E': 'justifyCenter',                                                                           // 6850\n          'CTRL+SHIFT+R': 'justifyRight',                                                                            // 6851\n          'CTRL+SHIFT+J': 'justifyFull',                                                                             // 6852\n          'CTRL+SHIFT+NUM7': 'insertUnorderedList',                                                                  // 6853\n          'CTRL+SHIFT+NUM8': 'insertOrderedList',                                                                    // 6854\n          'CTRL+LEFTBRACKET': 'outdent',                                                                             // 6855\n          'CTRL+RIGHTBRACKET': 'indent',                                                                             // 6856\n          'CTRL+NUM0': 'formatPara',                                                                                 // 6857\n          'CTRL+NUM1': 'formatH1',                                                                                   // 6858\n          'CTRL+NUM2': 'formatH2',                                                                                   // 6859\n          'CTRL+NUM3': 'formatH3',                                                                                   // 6860\n          'CTRL+NUM4': 'formatH4',                                                                                   // 6861\n          'CTRL+NUM5': 'formatH5',                                                                                   // 6862\n          'CTRL+NUM6': 'formatH6',                                                                                   // 6863\n          'CTRL+ENTER': 'insertHorizontalRule',                                                                      // 6864\n          'CTRL+K': 'linkDialog.show'                                                                                // 6865\n        },                                                                                                           // 6866\n                                                                                                                     // 6867\n        mac: {                                                                                                       // 6868\n          'ENTER': 'insertParagraph',                                                                                // 6869\n          'CMD+Z': 'undo',                                                                                           // 6870\n          'CMD+SHIFT+Z': 'redo',                                                                                     // 6871\n          'TAB': 'tab',                                                                                              // 6872\n          'SHIFT+TAB': 'untab',                                                                                      // 6873\n          'CMD+B': 'bold',                                                                                           // 6874\n          'CMD+I': 'italic',                                                                                         // 6875\n          'CMD+U': 'underline',                                                                                      // 6876\n          'CMD+SHIFT+S': 'strikethrough',                                                                            // 6877\n          'CMD+BACKSLASH': 'removeFormat',                                                                           // 6878\n          'CMD+SHIFT+L': 'justifyLeft',                                                                              // 6879\n          'CMD+SHIFT+E': 'justifyCenter',                                                                            // 6880\n          'CMD+SHIFT+R': 'justifyRight',                                                                             // 6881\n          'CMD+SHIFT+J': 'justifyFull',                                                                              // 6882\n          'CMD+SHIFT+NUM7': 'insertUnorderedList',                                                                   // 6883\n          'CMD+SHIFT+NUM8': 'insertOrderedList',                                                                     // 6884\n          'CMD+LEFTBRACKET': 'outdent',                                                                              // 6885\n          'CMD+RIGHTBRACKET': 'indent',                                                                              // 6886\n          'CMD+NUM0': 'formatPara',                                                                                  // 6887\n          'CMD+NUM1': 'formatH1',                                                                                    // 6888\n          'CMD+NUM2': 'formatH2',                                                                                    // 6889\n          'CMD+NUM3': 'formatH3',                                                                                    // 6890\n          'CMD+NUM4': 'formatH4',                                                                                    // 6891\n          'CMD+NUM5': 'formatH5',                                                                                    // 6892\n          'CMD+NUM6': 'formatH6',                                                                                    // 6893\n          'CMD+ENTER': 'insertHorizontalRule',                                                                       // 6894\n          'CMD+K': 'linkDialog.show'                                                                                 // 6895\n        }                                                                                                            // 6896\n      },                                                                                                             // 6897\n      icons: {                                                                                                       // 6898\n        'align': 'note-icon-align',                                                                                  // 6899\n        'alignCenter': 'note-icon-align-center',                                                                     // 6900\n        'alignJustify': 'note-icon-align-justify',                                                                   // 6901\n        'alignLeft': 'note-icon-align-left',                                                                         // 6902\n        'alignRight': 'note-icon-align-right',                                                                       // 6903\n        'indent': 'note-icon-align-indent',                                                                          // 6904\n        'outdent': 'note-icon-align-outdent',                                                                        // 6905\n        'arrowsAlt': 'note-icon-arrows-alt',                                                                         // 6906\n        'bold': 'note-icon-bold',                                                                                    // 6907\n        'caret': 'note-icon-caret',                                                                                  // 6908\n        'circle': 'note-icon-circle',                                                                                // 6909\n        'close': 'note-icon-close',                                                                                  // 6910\n        'code': 'note-icon-code',                                                                                    // 6911\n        'eraser': 'note-icon-eraser',                                                                                // 6912\n        'font': 'note-icon-font',                                                                                    // 6913\n        'frame': 'note-icon-frame',                                                                                  // 6914\n        'italic': 'note-icon-italic',                                                                                // 6915\n        'link': 'note-icon-link',                                                                                    // 6916\n        'unlink': 'note-icon-chain-broken',                                                                          // 6917\n        'magic': 'note-icon-magic',                                                                                  // 6918\n        'menuCheck': 'note-icon-check',                                                                              // 6919\n        'minus': 'note-icon-minus',                                                                                  // 6920\n        'orderedlist': 'note-icon-orderedlist',                                                                      // 6921\n        'pencil': 'note-icon-pencil',                                                                                // 6922\n        'picture': 'note-icon-picture',                                                                              // 6923\n        'question': 'note-icon-question',                                                                            // 6924\n        'redo': 'note-icon-redo',                                                                                    // 6925\n        'square': 'note-icon-square',                                                                                // 6926\n        'strikethrough': 'note-icon-strikethrough',                                                                  // 6927\n        'subscript': 'note-icon-subscript',                                                                          // 6928\n        'superscript': 'note-icon-superscript',                                                                      // 6929\n        'table': 'note-icon-table',                                                                                  // 6930\n        'textHeight': 'note-icon-text-height',                                                                       // 6931\n        'trash': 'note-icon-trash',                                                                                  // 6932\n        'underline': 'note-icon-underline',                                                                          // 6933\n        'undo': 'note-icon-undo',                                                                                    // 6934\n        'unorderedlist': 'note-icon-unorderedlist',                                                                  // 6935\n        'video': 'note-icon-video'                                                                                   // 6936\n      }                                                                                                              // 6937\n    }                                                                                                                // 6938\n  });                                                                                                                // 6939\n                                                                                                                     // 6940\n}));                                                                                                                 // 6941\n                                                                                                                     // 6942\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['summernote:summernote'] = {};\n\n})();\n","servePath":"/packages/summernote_summernote.js"}]