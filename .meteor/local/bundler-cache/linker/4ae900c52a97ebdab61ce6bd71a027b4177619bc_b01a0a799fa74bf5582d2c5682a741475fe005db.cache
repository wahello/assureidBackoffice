[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar HTTP = Package.http.HTTP;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ostrio:cookies\":{\"cookies.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ostrio_cookies/cookies.js                                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                         //\n                                                                                                                      //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                //\n                                                                                                                      //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                           //\n                                                                                                                      //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                  //\n                                                                                                                      //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                               //\n                                                                                                                      //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                      //\n                                                                                                                      //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                     //\n                                                                                                                      //\nmodule.export({                                                                                                       // 1\n  Cookies: function () {                                                                                              // 1\n    return Cookies;                                                                                                   // 1\n  }                                                                                                                   // 1\n});                                                                                                                   // 1\n                                                                                                                      //\nvar _ = void 0;                                                                                                       // 1\n                                                                                                                      //\nmodule.watch(require(\"meteor/underscore\"), {                                                                          // 1\n  _: function (v) {                                                                                                   // 1\n    _ = v;                                                                                                            // 1\n  }                                                                                                                   // 1\n}, 0);                                                                                                                // 1\nvar Meteor = void 0;                                                                                                  // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                              // 1\n  Meteor: function (v) {                                                                                              // 1\n    Meteor = v;                                                                                                       // 1\n  }                                                                                                                   // 1\n}, 1);                                                                                                                // 1\nvar HTTP = void 0;                                                                                                    // 4\nvar WebApp = void 0;                                                                                                  // 5\n                                                                                                                      //\nif (Meteor.isServer) {                                                                                                // 7\n  WebApp = require('meteor/webapp').WebApp;                                                                           // 8\n} else {                                                                                                              // 9\n  HTTP = require('meteor/http').HTTP;                                                                                 // 10\n}                                                                                                                     // 11\n                                                                                                                      //\nvar NoOp = function () {};                                                                                            // 13\n                                                                                                                      //\nvar urlRE = /\\/___cookie___\\/set/; /*                                                                                 // 14\n                                   @url https://github.com/jshttp/cookie/blob/master/index.js                         //\n                                   @name cookie                                                                       //\n                                   @author jshttp                                                                     //\n                                   @license                                                                           //\n                                   (The MIT License)                                                                  //\n                                                                                                                      //\n                                   Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>                        //\n                                   Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>             //\n                                                                                                                      //\n                                   Permission is hereby granted, free of charge, to any person obtaining              //\n                                   a copy of this software and associated documentation files (the                    //\n                                   'Software'), to deal in the Software without restriction, including                //\n                                   without limitation the rights to use, copy, modify, merge, publish,                //\n                                   distribute, sublicense, and/or sell copies of the Software, and to                 //\n                                   permit persons to whom the Software is furnished to do so, subject to              //\n                                   the following conditions:                                                          //\n                                                                                                                      //\n                                   The above copyright notice and this permission notice shall be                     //\n                                   included in all copies or substantial portions of the Software.                    //\n                                                                                                                      //\n                                   THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,                    //\n                                   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                 //\n                                   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.             //\n                                   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY               //\n                                   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,               //\n                                   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE                  //\n                                   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                             //\n                                    */                                                                                //\nvar decode = decodeURIComponent;                                                                                      // 44\nvar encode = encodeURIComponent;                                                                                      // 45\nvar pairSplitRegExp = /; */; /*                                                                                       // 46\n                             RegExp to match field-content in RFC 7230 sec 3.2                                        //\n                                                                                                                      //\n                             field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]                              //\n                             field-vchar   = VCHAR / obs-text                                                         //\n                             obs-text      = %x80-FF                                                                  //\n                              */                                                                                      //\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/; /*                                                  // 55\n                                                                  @function                                           //\n                                                                  @name parse                                         //\n                                                                  @param {String} str                                 //\n                                                                  @param {Object} [options]                           //\n                                                                  @return {Object}                                    //\n                                                                  @summary                                            //\n                                                                  Parse a cookie header.                              //\n                                                                  Parse the given cookie header string into an object\n                                                                  The object has the various cookies as keys(names) => values\n                                                                  @private                                            //\n                                                                   */                                                 //\n                                                                                                                      //\nvar parse = function (str, options) {                                                                                 // 69\n  if (typeof str !== 'string') {                                                                                      // 70\n    throw new Meteor.Error(404, 'argument str must be a string');                                                     // 71\n  }                                                                                                                   // 72\n                                                                                                                      //\n  var obj = {};                                                                                                       // 73\n  var opt = options || {};                                                                                            // 74\n  var val = void 0;                                                                                                   // 75\n  var key = void 0;                                                                                                   // 76\n  var eqIndx = void 0;                                                                                                // 77\n  str.split(pairSplitRegExp).forEach(function (pair) {                                                                // 79\n    eqIndx = pair.indexOf('=');                                                                                       // 80\n                                                                                                                      //\n    if (eqIndx < 0) {                                                                                                 // 81\n      return;                                                                                                         // 82\n    }                                                                                                                 // 83\n                                                                                                                      //\n    key = pair.substr(0, eqIndx).trim();                                                                              // 84\n    val = pair.substr(++eqIndx, pair.length).trim();                                                                  // 85\n                                                                                                                      //\n    if (val[0] === '\"') {                                                                                             // 86\n      val = val.slice(1, -1);                                                                                         // 87\n    }                                                                                                                 // 88\n                                                                                                                      //\n    if (void 0 === obj[key]) {                                                                                        // 89\n      obj[key] = tryDecode(val, opt.decode || decode);                                                                // 90\n    }                                                                                                                 // 91\n  });                                                                                                                 // 92\n  return obj;                                                                                                         // 93\n}; /*                                                                                                                 // 94\n   @function                                                                                                          //\n   @name serialize                                                                                                    //\n   @param {String} name                                                                                               //\n   @param {String} val                                                                                                //\n   @param {Object} [options]                                                                                          //\n   @return {String}                                                                                                   //\n   @summary                                                                                                           //\n   Serialize data into a cookie header.                                                                               //\n   Serialize the a name value pair into a cookie string suitable for                                                  //\n   http headers. An optional options object specified cookie parameters.                                              //\n   serialize('foo', 'bar', { httpOnly: true })                                                                        //\n     => \"foo=bar; httpOnly\"                                                                                           //\n   @private                                                                                                           //\n    */                                                                                                                //\n                                                                                                                      //\nvar serialize = function (key, val) {                                                                                 // 111\n  var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                                   // 111\n  var name = void 0;                                                                                                  // 112\n                                                                                                                      //\n  if (!fieldContentRegExp.test(key)) {                                                                                // 114\n    name = escape(key);                                                                                               // 115\n  } else {                                                                                                            // 116\n    name = key;                                                                                                       // 117\n  }                                                                                                                   // 118\n                                                                                                                      //\n  var value = void 0;                                                                                                 // 120\n                                                                                                                      //\n  if (!_.isUndefined(val)) {                                                                                          // 121\n    value = encode(val);                                                                                              // 122\n                                                                                                                      //\n    if (value && !fieldContentRegExp.test(value)) {                                                                   // 123\n      value = escape(value);                                                                                          // 124\n    }                                                                                                                 // 125\n  } else {                                                                                                            // 126\n    value = '';                                                                                                       // 127\n  }                                                                                                                   // 128\n                                                                                                                      //\n  var pairs = [name + \"=\" + value];                                                                                   // 130\n                                                                                                                      //\n  if (_.isNumber(opt.maxAge)) {                                                                                       // 132\n    pairs.push(\"Max-Age=\" + opt.maxAge);                                                                              // 133\n  }                                                                                                                   // 134\n                                                                                                                      //\n  if (opt.domain && _.isString(opt.domain)) {                                                                         // 136\n    if (!fieldContentRegExp.test(opt.domain)) {                                                                       // 137\n      throw new Meteor.Error(404, 'option domain is invalid');                                                        // 138\n    }                                                                                                                 // 139\n                                                                                                                      //\n    pairs.push(\"Domain=\" + opt.domain);                                                                               // 140\n  }                                                                                                                   // 141\n                                                                                                                      //\n  if (opt.path && _.isString(opt.path)) {                                                                             // 143\n    if (!fieldContentRegExp.test(opt.path)) {                                                                         // 144\n      throw new Meteor.Error(404, 'option path is invalid');                                                          // 145\n    }                                                                                                                 // 146\n                                                                                                                      //\n    pairs.push(\"Path=\" + opt.path);                                                                                   // 147\n  }                                                                                                                   // 148\n                                                                                                                      //\n  opt.expires = opt.expires || opt.expire || false;                                                                   // 150\n                                                                                                                      //\n  if (opt.expires === Infinity) {                                                                                     // 151\n    pairs.push('Expires=Fri, 31 Dec 9999 23:59:59 GMT');                                                              // 152\n  } else if (opt.expires instanceof Date) {                                                                           // 153\n    pairs.push(\"Expires=\" + opt.expires.toUTCString());                                                               // 154\n  } else if (opt.expires === 0) {                                                                                     // 155\n    pairs.push('Expires=0');                                                                                          // 156\n  } else if (_.isNumber(opt.expires)) {                                                                               // 157\n    pairs.push(\"Expires=\" + new Date(opt.expires).toUTCString());                                                     // 158\n  }                                                                                                                   // 159\n                                                                                                                      //\n  if (opt.httpOnly) {                                                                                                 // 161\n    pairs.push('HttpOnly');                                                                                           // 162\n  }                                                                                                                   // 163\n                                                                                                                      //\n  if (opt.secure) {                                                                                                   // 165\n    pairs.push('Secure');                                                                                             // 166\n  }                                                                                                                   // 167\n                                                                                                                      //\n  if (opt.firstPartyOnly) {                                                                                           // 169\n    pairs.push('First-Party-Only');                                                                                   // 170\n  }                                                                                                                   // 171\n                                                                                                                      //\n  if (opt.sameSite) {                                                                                                 // 173\n    pairs.push('SameSite');                                                                                           // 174\n  }                                                                                                                   // 175\n                                                                                                                      //\n  return pairs.join('; ');                                                                                            // 177\n}; /*                                                                                                                 // 178\n   @function                                                                                                          //\n   @name tryDecode                                                                                                    //\n   @param {String} str                                                                                                //\n   @param {Function} d                                                                                                //\n   @summary Try decoding a string using a decoding function.                                                          //\n   @private                                                                                                           //\n    */                                                                                                                //\n                                                                                                                      //\nvar tryDecode = function (str, d) {                                                                                   // 189\n  try {                                                                                                               // 190\n    return d(str);                                                                                                    // 191\n  } catch (e) {                                                                                                       // 192\n    return str;                                                                                                       // 193\n  }                                                                                                                   // 194\n}; /*                                                                                                                 // 195\n   @locus Anywhere                                                                                                    //\n   @class __cookies                                                                                                   //\n   @param _cookies {Object|String} - Current cookies as String or Object                                              //\n   @param TTL {Number} - Default cookies expiration time (max-age) in milliseconds, by default - session (false)      //\n   @param runOnServer {Boolean} - Expose Cookies class to Server                                                      //\n   @param response {http.ServerResponse|Object} - This object is created internally by a HTTP server                  //\n   @summary Internal Class                                                                                            //\n    */                                                                                                                //\n                                                                                                                      //\nvar __cookies = function () {                                                                                         //\n  function __cookies(_cookies, TTL, runOnServer, response) {                                                          // 208\n    (0, _classCallCheck3.default)(this, __cookies);                                                                   // 208\n    this.TTL = TTL;                                                                                                   // 209\n    this.response = response;                                                                                         // 210\n    this.runOnServer = runOnServer;                                                                                   // 211\n                                                                                                                      //\n    if (_.isObject(_cookies)) {                                                                                       // 213\n      this.cookies = _cookies;                                                                                        // 214\n    } else {                                                                                                          // 215\n      this.cookies = parse(_cookies);                                                                                 // 216\n    }                                                                                                                 // 217\n  } /*                                                                                                                // 218\n    @locus Anywhere                                                                                                   //\n    @memberOf __cookies                                                                                               //\n    @name get                                                                                                         //\n    @param {String} key  - The name of the cookie to read                                                             //\n    @param {String} _tmp - Unparsed string instead of user's cookies                                                  //\n    @summary Read a cookie. If the cookie doesn't exist a null value will be returned.                                //\n    @returns {String|void}                                                                                            //\n     */                                                                                                               //\n                                                                                                                      //\n  __cookies.prototype.get = function () {                                                                             //\n    function get(key, _tmp) {                                                                                         //\n      var _cs = _tmp ? parse(_tmp) : this.cookies;                                                                    // 230\n                                                                                                                      //\n      if (!key || !_cs) {                                                                                             // 231\n        return void 0;                                                                                                // 232\n      }                                                                                                               // 233\n                                                                                                                      //\n      if (_cs.hasOwnProperty(key)) {                                                                                  // 235\n        return _cs[key];                                                                                              // 236\n      }                                                                                                               // 237\n                                                                                                                      //\n      return void 0;                                                                                                  // 239\n    }                                                                                                                 // 240\n                                                                                                                      //\n    return get;                                                                                                       //\n  }(); /*                                                                                                             //\n       @locus Anywhere                                                                                                //\n       @memberOf __cookies                                                                                            //\n       @name set                                                                                                      //\n       @param {String}  key   - The name of the cookie to create/overwrite                                            //\n       @param {String}  value - The value of the cookie                                                               //\n       @param {Object}  opts  - [Optional] Cookie options (see readme docs)                                           //\n       @summary Create/overwrite a cookie.                                                                            //\n       @returns {Boolean}                                                                                             //\n        */                                                                                                            //\n                                                                                                                      //\n  __cookies.prototype.set = function () {                                                                             //\n    function set(key, value) {                                                                                        //\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                              // 252\n                                                                                                                      //\n      if (key && !_.isUndefined(value)) {                                                                             // 253\n        if (_.isNumber(this.TTL) && opts.expires === undefined) {                                                     // 254\n          opts.expires = new Date(+new Date() + this.TTL);                                                            // 255\n        }                                                                                                             // 256\n                                                                                                                      //\n        var newCookie = serialize(key, value, opts);                                                                  // 257\n        this.cookies[key] = value;                                                                                    // 258\n                                                                                                                      //\n        if (Meteor.isClient) {                                                                                        // 259\n          document.cookie = newCookie;                                                                                // 260\n        } else {                                                                                                      // 261\n          this.response.setHeader('Set-Cookie', newCookie);                                                           // 262\n        }                                                                                                             // 263\n                                                                                                                      //\n        return true;                                                                                                  // 264\n      }                                                                                                               // 265\n                                                                                                                      //\n      return false;                                                                                                   // 266\n    }                                                                                                                 // 267\n                                                                                                                      //\n    return set;                                                                                                       //\n  }(); /*                                                                                                             //\n       @locus Anywhere                                                                                                //\n       @memberOf __cookies                                                                                            //\n       @name remove                                                                                                   //\n       @param {String} key    - The name of the cookie to create/overwrite                                            //\n       @param {String} path   - [Optional] The path from where the cookie will be                                     //\n       readable. E.g., \"/\", \"/mydir\"; if not specified, defaults to the current                                       //\n       path of the current document location (string or null). The path must be                                       //\n       absolute (see RFC 2965). For more information on how to use relative paths                                     //\n       in this argument, see: https://developer.mozilla.org/en-US/docs/Web/API/document.cookie#Using_relative_URLs_in_the_path_parameter\n       @param {String} domain - [Optional] The domain from where the cookie will                                      //\n       be readable. E.g., \"example.com\", \".example.com\" (includes all subdomains)                                     //\n       or \"subdomain.example.com\"; if not specified, defaults to the host portion                                     //\n       of the current document location (string or null).                                                             //\n       @summary Remove a cookie(s).                                                                                   //\n       @returns {Boolean}                                                                                             //\n        */                                                                                                            //\n                                                                                                                      //\n  __cookies.prototype.remove = function () {                                                                          //\n    function remove(key) {                                                                                            //\n      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';                             // 286\n      var domain = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';                            // 286\n                                                                                                                      //\n      if (key && this.cookies.hasOwnProperty(key)) {                                                                  // 287\n        var newCookie = serialize(key, '', {                                                                          // 288\n          domain: domain,                                                                                             // 289\n          path: path,                                                                                                 // 290\n          expires: new Date(0)                                                                                        // 291\n        });                                                                                                           // 288\n        delete this.cookies[key];                                                                                     // 294\n                                                                                                                      //\n        if (Meteor.isClient) {                                                                                        // 295\n          document.cookie = newCookie;                                                                                // 296\n        } else {                                                                                                      // 297\n          this.response.setHeader('Set-Cookie', newCookie);                                                           // 298\n        }                                                                                                             // 299\n                                                                                                                      //\n        return true;                                                                                                  // 300\n      } else if (!key && this.keys().length > 0 && this.keys()[0] !== '') {                                           // 301\n        var keys = Object.keys(this.cookies);                                                                         // 302\n                                                                                                                      //\n        for (var i = 0; i < keys.length; i++) {                                                                       // 303\n          this.remove(keys[i]);                                                                                       // 304\n        }                                                                                                             // 305\n                                                                                                                      //\n        return true;                                                                                                  // 306\n      }                                                                                                               // 307\n                                                                                                                      //\n      return false;                                                                                                   // 308\n    }                                                                                                                 // 309\n                                                                                                                      //\n    return remove;                                                                                                    //\n  }(); /*                                                                                                             //\n       @locus Anywhere                                                                                                //\n       @memberOf __cookies                                                                                            //\n       @name has                                                                                                      //\n       @param {String} key  - The name of the cookie to create/overwrite                                              //\n       @param {String} _tmp - Unparsed string instead of user's cookies                                               //\n       @summary Check whether a cookie exists in the current position.                                                //\n       @returns {Boolean}                                                                                             //\n        */                                                                                                            //\n                                                                                                                      //\n  __cookies.prototype.has = function () {                                                                             //\n    function has(key, _tmp) {                                                                                         //\n      var _cs = _tmp ? parse(_tmp) : this.cookies;                                                                    // 321\n                                                                                                                      //\n      if (!key || !_cs) {                                                                                             // 322\n        return false;                                                                                                 // 323\n      }                                                                                                               // 324\n                                                                                                                      //\n      return _cs.hasOwnProperty(key);                                                                                 // 326\n    }                                                                                                                 // 327\n                                                                                                                      //\n    return has;                                                                                                       //\n  }(); /*                                                                                                             //\n       @locus Anywhere                                                                                                //\n       @memberOf __cookies                                                                                            //\n       @name keys                                                                                                     //\n       @summary Returns an array of all readable cookies from this location.                                          //\n       @returns {[String]}                                                                                            //\n        */                                                                                                            //\n                                                                                                                      //\n  __cookies.prototype.keys = function () {                                                                            //\n    function keys() {                                                                                                 //\n      if (this.cookies) {                                                                                             // 337\n        return Object.keys(this.cookies);                                                                             // 338\n      }                                                                                                               // 339\n                                                                                                                      //\n      return [];                                                                                                      // 340\n    }                                                                                                                 // 341\n                                                                                                                      //\n    return keys;                                                                                                      //\n  }(); /*                                                                                                             //\n       @locus Client                                                                                                  //\n       @memberOf __cookies                                                                                            //\n       @name send                                                                                                     //\n       @param cb {Function} - Callback                                                                                //\n       @summary Send all cookies over XHR to server.                                                                  //\n       @returns {void}                                                                                                //\n        */                                                                                                            //\n                                                                                                                      //\n  __cookies.prototype.send = function () {                                                                            //\n    function send() {                                                                                                 //\n      var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NoOp;                              // 351\n                                                                                                                      //\n      if (Meteor.isServer) {                                                                                          // 352\n        cb(new Meteor.Error(400, 'Can\\'t run `.send()` on server, it\\'s Client only method!'));                       // 353\n      }                                                                                                               // 354\n                                                                                                                      //\n      if (this.runOnServer) {                                                                                         // 356\n        HTTP.get((window.__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '') + \"/___cookie___/set\", cb);            // 357\n      } else {                                                                                                        // 358\n        cb(new Meteor.Error(400, 'Can\\'t send cookies on server when `runOnServer` is false.'));                      // 359\n      }                                                                                                               // 360\n                                                                                                                      //\n      return void 0;                                                                                                  // 361\n    }                                                                                                                 // 362\n                                                                                                                      //\n    return send;                                                                                                      //\n  }();                                                                                                                //\n                                                                                                                      //\n  return __cookies;                                                                                                   //\n}(); /*                                                                                                               //\n     @function                                                                                                        //\n     @locus Server                                                                                                    //\n     @summary Middleware handler                                                                                      //\n     @private                                                                                                         //\n      */                                                                                                              //\n                                                                                                                      //\nvar __middlewareHandler = function (req, res, self) {                                                                 // 372\n  var _cookies = {};                                                                                                  // 373\n                                                                                                                      //\n  if (self.runOnServer) {                                                                                             // 374\n    if (req.headers && req.headers.cookie) {                                                                          // 375\n      _cookies = parse(req.headers.cookie);                                                                           // 376\n    }                                                                                                                 // 377\n                                                                                                                      //\n    return new __cookies(_cookies, self.TTL, self.runOnServer, res);                                                  // 378\n  }                                                                                                                   // 379\n                                                                                                                      //\n  throw new Meteor.Error(400, 'Can\\'t use middleware when `runOnServer` is false.');                                  // 381\n}; /*                                                                                                                 // 382\n   @locus Anywhere                                                                                                    //\n   @class Cookies                                                                                                     //\n   @param opts {Object}                                                                                               //\n   @param opts.TTL {Number} - Default cookies expiration time (max-age) in milliseconds, by default - session (false)\n   @param opts.auto {Boolean} - [Server] Auto-bind in middleware as `req.Cookies`, by default `true`                  //\n   @param opts.handler {Function} - [Server] Middleware handler                                                       //\n   @param opts.runOnServer {Boolean} - Expose Cookies class to Server                                                 //\n   @summary Main Cookie class                                                                                         //\n    */                                                                                                                //\n                                                                                                                      //\nvar Cookies = function (_cookies2) {                                                                                  //\n  (0, _inherits3.default)(Cookies, _cookies2);                                                                        //\n                                                                                                                      //\n  function Cookies() {                                                                                                // 396\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                                // 396\n    (0, _classCallCheck3.default)(this, Cookies);                                                                     // 396\n    opts.TTL = _.isNumber(opts.TTL) ? opts.TTL : false;                                                               // 397\n    opts.runOnServer = opts.runOnServer !== false ? true : false;                                                     // 398\n                                                                                                                      //\n    if (Meteor.isClient) {                                                                                            // 400\n      var _this = (0, _possibleConstructorReturn3.default)(this, _cookies2.call(this, document.cookie, opts.TTL, opts.runOnServer));\n    } else {                                                                                                          // 402\n      var _this = (0, _possibleConstructorReturn3.default)(this, _cookies2.call(this, {}, opts.TTL, opts.runOnServer));\n                                                                                                                      //\n      opts.auto = opts.auto !== false ? true : false;                                                                 // 404\n                                                                                                                      //\n      _this.handler = opts.handler || function () {};                                                                 // 405\n                                                                                                                      //\n      _this.runOnServer = opts.runOnServer;                                                                           // 406\n                                                                                                                      //\n      if (_this.runOnServer) {                                                                                        // 408\n        if (!Cookies.isLoadedOnServer) {                                                                              // 409\n          if (opts.auto) {                                                                                            // 410\n            WebApp.connectHandlers.use(function (req, res, next) {                                                    // 411\n              if (urlRE.test(req._parsedUrl.path)) {                                                                  // 412\n                if (req.headers && req.headers.cookie) {                                                              // 413\n                  var _cObj = parse(req.headers.cookie);                                                              // 414\n                                                                                                                      //\n                  var _cKeys = Object.keys(_cObj);                                                                    // 415\n                                                                                                                      //\n                  var _cArr = [];                                                                                     // 416\n                                                                                                                      //\n                  var _cStr = void 0;                                                                                 // 417\n                                                                                                                      //\n                  for (var i = 0; i < _cKeys.length; i++) {                                                           // 419\n                    _cStr = serialize(_cKeys[i], _cObj[_cKeys[i]]);                                                   // 420\n                                                                                                                      //\n                    if (!~_cArr.indexOf(_cStr)) {                                                                     // 421\n                      _cArr.push(_cStr);                                                                              // 422\n                    }                                                                                                 // 423\n                  }                                                                                                   // 424\n                                                                                                                      //\n                  res.setHeader('Set-Cookie', _cArr);                                                                 // 426\n                }                                                                                                     // 427\n                                                                                                                      //\n                res.writeHead(200);                                                                                   // 429\n                res.end('');                                                                                          // 430\n              } else {                                                                                                // 431\n                req.Cookies = __middlewareHandler(req, res, _this);                                                   // 432\n                next();                                                                                               // 433\n              }                                                                                                       // 434\n            });                                                                                                       // 435\n          }                                                                                                           // 436\n                                                                                                                      //\n          Cookies.isLoadedOnServer = true;                                                                            // 437\n        }                                                                                                             // 438\n      }                                                                                                               // 439\n    }                                                                                                                 // 440\n                                                                                                                      //\n    return (0, _possibleConstructorReturn3.default)(_this);                                                           // 396\n  } /*                                                                                                                // 441\n    @locus Server                                                                                                     //\n    @memberOf Cookies                                                                                                 //\n    @name middleware                                                                                                  //\n    @summary Get Cookies instance into callback                                                                       //\n    @returns {void}                                                                                                   //\n     */                                                                                                               //\n                                                                                                                      //\n  Cookies.prototype.middleware = function () {                                                                        //\n    function middleware() {                                                                                           //\n      var _this2 = this;                                                                                              // 451\n                                                                                                                      //\n      if (!Meteor.isServer) {                                                                                         // 452\n        throw new Meteor.Error(500, '[ostrio:cookies] Can\\'t use `.middleware()` on Client, it\\'s Server only!');     // 453\n      }                                                                                                               // 454\n                                                                                                                      //\n      return function (req, res, next) {                                                                              // 456\n        _this2.handler && _this2.handler(__middlewareHandler(req, res, _this2));                                      // 457\n        next();                                                                                                       // 458\n      };                                                                                                              // 459\n    }                                                                                                                 // 460\n                                                                                                                      //\n    return middleware;                                                                                                //\n  }();                                                                                                                //\n                                                                                                                      //\n  return Cookies;                                                                                                     //\n}(__cookies);                                                                                                         //\n                                                                                                                      //\nif (Meteor.isServer) {                                                                                                // 463\n  Cookies.isLoadedOnServer = false;                                                                                   // 464\n} /* Export the Cookies class */                                                                                      // 465\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/ostrio:cookies/cookies.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ostrio:cookies'] = exports;\n\n})();\n","servePath":"/packages/ostrio_cookies.js","sourceMap":{"version":3,"sources":["packages/ostrio:cookies/cookies.js"],"names":["module","export","Cookies","_","watch","require","v","Meteor","HTTP","WebApp","isServer","NoOp","urlRE","decode","decodeURIComponent","encode","encodeURIComponent","pairSplitRegExp","fieldContentRegExp","parse","str","options","Error","obj","opt","val","key","eqIndx","split","forEach","pair","indexOf","substr","trim","length","slice","tryDecode","serialize","name","test","escape","value","isUndefined","pairs","isNumber","maxAge","push","domain","isString","path","expires","expire","Infinity","Date","toUTCString","httpOnly","secure","firstPartyOnly","sameSite","join","d","e","__cookies","_cookies","TTL","runOnServer","response","isObject","cookies","get","_tmp","_cs","hasOwnProperty","set","opts","undefined","newCookie","isClient","document","cookie","setHeader","remove","keys","Object","i","has","send","cb","window","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","__middlewareHandler","req","res","self","headers","auto","handler","isLoadedOnServer","connectHandlers","use","next","_parsedUrl","_cObj","_cKeys","_cArr","_cStr","writeHead","end","middleware"],"mappings":"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","file":"/packages/ostrio_cookies.js","sourcesContent":["import { _ }      from 'meteor/underscore';\nimport { Meteor } from 'meteor/meteor';\n\nlet HTTP;\nlet WebApp;\n\nif (Meteor.isServer) {\n  WebApp = require('meteor/webapp').WebApp;\n} else {\n  HTTP = require('meteor/http').HTTP;\n}\n\nconst NoOp  = () => {};\nconst urlRE = /\\/___cookie___\\/set/;\n/*\n@url https://github.com/jshttp/cookie/blob/master/index.js\n@name cookie\n@author jshttp\n@license\n(The MIT License)\n\nCopyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\nCopyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nconst decode = decodeURIComponent;\nconst encode = encodeURIComponent;\nconst pairSplitRegExp = /; */;\n\n/*\nRegExp to match field-content in RFC 7230 sec 3.2\n\nfield-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\nfield-vchar   = VCHAR / obs-text\nobs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/*\n@function\n@name parse\n@param {String} str\n@param {Object} [options]\n@return {Object}\n@summary\nParse a cookie header.\nParse the given cookie header string into an object\nThe object has the various cookies as keys(names) => values\n@private\n */\nconst parse = (str, options) => {\n  if (typeof str !== 'string') {\n    throw new Meteor.Error(404, 'argument str must be a string');\n  }\n  const obj = {};\n  const opt = options || {};\n  let val;\n  let key;\n  let eqIndx;\n\n  str.split(pairSplitRegExp).forEach((pair) => {\n    eqIndx = pair.indexOf('=');\n    if (eqIndx < 0) {\n      return;\n    }\n    key = pair.substr(0, eqIndx).trim();\n    val = pair.substr(++eqIndx, pair.length).trim();\n    if (val[0] === '\"') {\n      val = val.slice(1, -1);\n    }\n    if (void 0 === obj[key]) {\n      obj[key] = tryDecode(val, (opt.decode || decode));\n    }\n  });\n  return obj;\n};\n\n/*\n@function\n@name serialize\n@param {String} name\n@param {String} val\n@param {Object} [options]\n@return {String}\n@summary\nSerialize data into a cookie header.\nSerialize the a name value pair into a cookie string suitable for\nhttp headers. An optional options object specified cookie parameters.\nserialize('foo', 'bar', { httpOnly: true })\n  => \"foo=bar; httpOnly\"\n@private\n */\nconst serialize = (key, val, opt = {}) => {\n  let name;\n\n  if (!fieldContentRegExp.test(key)) {\n    name = escape(key);\n  } else {\n    name = key;\n  }\n\n  let value;\n  if (!_.isUndefined(val)) {\n    value = encode(val);\n    if (value && !fieldContentRegExp.test(value)) {\n      value = escape(value);\n    }\n  } else {\n    value = '';\n  }\n\n  const pairs = [`${name}=${value}`];\n\n  if (_.isNumber(opt.maxAge)) {\n    pairs.push(`Max-Age=${opt.maxAge}`);\n  }\n\n  if (opt.domain && _.isString(opt.domain)) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new Meteor.Error(404, 'option domain is invalid');\n    }\n    pairs.push(`Domain=${opt.domain}`);\n  }\n\n  if (opt.path && _.isString(opt.path)) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new Meteor.Error(404, 'option path is invalid');\n    }\n    pairs.push(`Path=${opt.path}`);\n  }\n\n  opt.expires = opt.expires || opt.expire || false;\n  if (opt.expires === Infinity) {\n    pairs.push('Expires=Fri, 31 Dec 9999 23:59:59 GMT');\n  } else if (opt.expires instanceof Date) {\n    pairs.push(`Expires=${opt.expires.toUTCString()}`);\n  } else if (opt.expires === 0) {\n    pairs.push('Expires=0');\n  } else if (_.isNumber(opt.expires)) {\n    pairs.push(`Expires=${(new Date(opt.expires)).toUTCString()}`);\n  }\n\n  if (opt.httpOnly) {\n    pairs.push('HttpOnly');\n  }\n\n  if (opt.secure) {\n    pairs.push('Secure');\n  }\n\n  if (opt.firstPartyOnly) {\n    pairs.push('First-Party-Only');\n  }\n\n  if (opt.sameSite) {\n    pairs.push('SameSite');\n  }\n\n  return pairs.join('; ');\n};\n\n\n/*\n@function\n@name tryDecode\n@param {String} str\n@param {Function} d\n@summary Try decoding a string using a decoding function.\n@private\n */\nconst tryDecode = (str, d) => {\n  try {\n    return d(str);\n  } catch (e) {\n    return str;\n  }\n};\n\n\n/*\n@locus Anywhere\n@class __cookies\n@param _cookies {Object|String} - Current cookies as String or Object\n@param TTL {Number} - Default cookies expiration time (max-age) in milliseconds, by default - session (false)\n@param runOnServer {Boolean} - Expose Cookies class to Server\n@param response {http.ServerResponse|Object} - This object is created internally by a HTTP server\n@summary Internal Class\n */\nclass __cookies {\n  constructor(_cookies, TTL, runOnServer, response) {\n    this.TTL         = TTL;\n    this.response    = response;\n    this.runOnServer = runOnServer;\n\n    if (_.isObject(_cookies)) {\n      this.cookies = _cookies;\n    } else {\n      this.cookies = parse(_cookies);\n    }\n  }\n\n  /*\n  @locus Anywhere\n  @memberOf __cookies\n  @name get\n  @param {String} key  - The name of the cookie to read\n  @param {String} _tmp - Unparsed string instead of user's cookies\n  @summary Read a cookie. If the cookie doesn't exist a null value will be returned.\n  @returns {String|void}\n   */\n  get(key, _tmp) {\n    const _cs = _tmp ? parse(_tmp) : this.cookies;\n    if (!key || !_cs) {\n      return void 0;\n    }\n\n    if (_cs.hasOwnProperty(key)) {\n      return _cs[key];\n    }\n\n    return void 0;\n  }\n\n  /*\n  @locus Anywhere\n  @memberOf __cookies\n  @name set\n  @param {String}  key   - The name of the cookie to create/overwrite\n  @param {String}  value - The value of the cookie\n  @param {Object}  opts  - [Optional] Cookie options (see readme docs)\n  @summary Create/overwrite a cookie.\n  @returns {Boolean}\n   */\n  set(key, value, opts = {}) {\n    if (key && !_.isUndefined(value)) {\n      if (_.isNumber(this.TTL) && opts.expires === undefined) {\n        opts.expires = new Date(+new Date() + this.TTL);\n      }\n      const newCookie = serialize(key, value, opts);\n      this.cookies[key] = value;\n      if (Meteor.isClient) {\n        document.cookie = newCookie;\n      } else {\n        this.response.setHeader('Set-Cookie', newCookie);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /*\n  @locus Anywhere\n  @memberOf __cookies\n  @name remove\n  @param {String} key    - The name of the cookie to create/overwrite\n  @param {String} path   - [Optional] The path from where the cookie will be\n  readable. E.g., \"/\", \"/mydir\"; if not specified, defaults to the current\n  path of the current document location (string or null). The path must be\n  absolute (see RFC 2965). For more information on how to use relative paths\n  in this argument, see: https://developer.mozilla.org/en-US/docs/Web/API/document.cookie#Using_relative_URLs_in_the_path_parameter\n  @param {String} domain - [Optional] The domain from where the cookie will\n  be readable. E.g., \"example.com\", \".example.com\" (includes all subdomains)\n  or \"subdomain.example.com\"; if not specified, defaults to the host portion\n  of the current document location (string or null).\n  @summary Remove a cookie(s).\n  @returns {Boolean}\n   */\n  remove(key, path = '/', domain = '') {\n    if (key && this.cookies.hasOwnProperty(key)) {\n      const newCookie = serialize(key, '', {\n        domain,\n        path,\n        expires: new Date(0)\n      });\n\n      delete this.cookies[key];\n      if (Meteor.isClient) {\n        document.cookie = newCookie;\n      } else {\n        this.response.setHeader('Set-Cookie', newCookie);\n      }\n      return true;\n    } else if (!key && this.keys().length > 0 && this.keys()[0] !== '') {\n      const keys = Object.keys(this.cookies);\n      for (let i = 0; i < keys.length; i++) {\n        this.remove(keys[i]);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /*\n  @locus Anywhere\n  @memberOf __cookies\n  @name has\n  @param {String} key  - The name of the cookie to create/overwrite\n  @param {String} _tmp - Unparsed string instead of user's cookies\n  @summary Check whether a cookie exists in the current position.\n  @returns {Boolean}\n   */\n  has(key, _tmp) {\n    const _cs = _tmp ? parse(_tmp) : this.cookies;\n    if (!key || !_cs) {\n      return false;\n    }\n\n    return _cs.hasOwnProperty(key);\n  }\n\n  /*\n  @locus Anywhere\n  @memberOf __cookies\n  @name keys\n  @summary Returns an array of all readable cookies from this location.\n  @returns {[String]}\n   */\n  keys() {\n    if (this.cookies) {\n      return Object.keys(this.cookies);\n    }\n    return [];\n  }\n\n  /*\n  @locus Client\n  @memberOf __cookies\n  @name send\n  @param cb {Function} - Callback\n  @summary Send all cookies over XHR to server.\n  @returns {void}\n   */\n  send(cb = NoOp) {\n    if (Meteor.isServer) {\n      cb(new Meteor.Error(400, 'Can\\'t run `.send()` on server, it\\'s Client only method!'));\n    }\n\n    if (this.runOnServer) {\n      HTTP.get(`${window.__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || ''}/___cookie___/set`, cb);\n    } else {\n      cb(new Meteor.Error(400, 'Can\\'t send cookies on server when `runOnServer` is false.'));\n    }\n    return void 0;\n  }\n}\n\n\n/*\n@function\n@locus Server\n@summary Middleware handler\n@private\n */\nconst __middlewareHandler = (req, res, self) => {\n  let _cookies = {};\n  if (self.runOnServer) {\n    if (req.headers && req.headers.cookie) {\n      _cookies = parse(req.headers.cookie);\n    }\n    return new __cookies(_cookies, self.TTL, self.runOnServer, res);\n  }\n\n  throw new Meteor.Error(400, 'Can\\'t use middleware when `runOnServer` is false.');\n};\n\n\n/*\n@locus Anywhere\n@class Cookies\n@param opts {Object}\n@param opts.TTL {Number} - Default cookies expiration time (max-age) in milliseconds, by default - session (false)\n@param opts.auto {Boolean} - [Server] Auto-bind in middleware as `req.Cookies`, by default `true`\n@param opts.handler {Function} - [Server] Middleware handler\n@param opts.runOnServer {Boolean} - Expose Cookies class to Server\n@summary Main Cookie class\n */\nclass Cookies extends __cookies {\n  constructor(opts = {}) {\n    opts.TTL = _.isNumber(opts.TTL) ? opts.TTL : false;\n    opts.runOnServer = (opts.runOnServer !== false) ? true : false;\n\n    if (Meteor.isClient) {\n      super(document.cookie, opts.TTL, opts.runOnServer);\n    } else {\n      super({}, opts.TTL, opts.runOnServer);\n      opts.auto        = opts.auto !== false ? true : false;\n      this.handler     = opts.handler || (() => {});\n      this.runOnServer = opts.runOnServer;\n\n      if (this.runOnServer) {\n        if (!Cookies.isLoadedOnServer) {\n          if (opts.auto) {\n            WebApp.connectHandlers.use((req, res, next) => {\n              if (urlRE.test(req._parsedUrl.path)) {\n                if (req.headers && req.headers.cookie) {\n                  const _cObj  = parse(req.headers.cookie);\n                  const _cKeys = Object.keys(_cObj);\n                  const _cArr  = [];\n                  let   _cStr;\n\n                  for (let i = 0; i < _cKeys.length; i++) {\n                    _cStr = serialize(_cKeys[i], _cObj[_cKeys[i]]);\n                    if (!~_cArr.indexOf(_cStr)) {\n                      _cArr.push(_cStr);\n                    }\n                  }\n\n                  res.setHeader('Set-Cookie', _cArr);\n                }\n\n                res.writeHead(200);\n                res.end('');\n              } else {\n                req.Cookies = __middlewareHandler(req, res, this);\n                next();\n              }\n            });\n          }\n          Cookies.isLoadedOnServer = true;\n        }\n      }\n    }\n  }\n\n\n  /*\n  @locus Server\n  @memberOf Cookies\n  @name middleware\n  @summary Get Cookies instance into callback\n  @returns {void}\n   */\n  middleware() {\n    if (!Meteor.isServer) {\n      throw new Meteor.Error(500, '[ostrio:cookies] Can\\'t use `.middleware()` on Client, it\\'s Server only!');\n    }\n\n    return (req, res, next) => {\n      this.handler && this.handler(__middlewareHandler(req, res, this));\n      next();\n    };\n  }\n}\n\nif (Meteor.isServer) {\n  Cookies.isLoadedOnServer = false;\n}\n\n/* Export the Cookies class */\nexport { Cookies };\n"]}}]