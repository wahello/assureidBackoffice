[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar UserSessionCollection, noUserError, noUserIdError, UserSession, ownsDocument;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/benjaminrh_user-session/packages/benjaminrh_user-session.js                     //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/benjaminrh:user-session/common.js                                        //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n// This collection is where the UserSession variables are ultimately stored          // 1\nUserSessionCollection = new Meteor.Collection('userSessionCollection');              // 2\n                                                                                     // 3\n// Anonymous user error                                                              // 4\nnoUserError = function () {                                                          // 5\n\tconsole.log('You cannot use UserSession methods when there is no user logged in.'); // 6\n}                                                                                    // 7\n                                                                                     // 8\n// Missing userId error                                                              // 9\nnoUserIdError = function () {                                                        // 10\n\tconsole.log('You cannot use UserSession methods on the server without a userId.');  // 11\n}                                                                                    // 12\n                                                                                     // 13\n                                                                                     // 14\n//=======================                                                            // 15\n// = UserSession METHODS                                                             // 16\n//=======================                                                            // 17\n                                                                                     // 18\nUserSession = {                                                                      // 19\n\tset: function (key, value, userId) {                                                // 20\n\t\t// Set a new variable in the user session                                          // 21\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 22\n\t\t\t// If the user is logged in, update the variable in the collection                // 23\n\t\t\tif (typeof userId === 'undefined') {                                              // 24\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 25\n\t\t\t\telse if (Meteor.isServer) {                                                      // 26\n\t\t\t\t\tnoUserIdError();                                                                // 27\n\t\t\t\t\treturn undefined;                                                               // 28\n\t\t\t\t}                                                                                // 29\n\t\t\t}                                                                                 // 30\n\t\t\tvar existing = UserSessionCollection.findOne({ key: key, userId: userId});        // 31\n\t\t\tvar sv = { key: key, value: value, userId: userId };                              // 32\n\t\t\tif (existing) UserSessionCollection.update({ _id: existing._id }, { $set: sv });  // 33\n\t\t\telse UserSessionCollection.insert(sv);                                            // 34\n\t\t} else {                                                                           // 35\n\t\t\t//XXX Maybe we should degrade to normal Session and sync on login                 // 36\n\t\t\tnoUserError();                                                                    // 37\n\t\t}                                                                                  // 38\n\t},                                                                                  // 39\n\tget: function (key, userId) {                                                       // 40\n\t\t// Get the value of a user session variable                                        // 41\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 42\n\t\t\tif (typeof userId === 'undefined') {                                              // 43\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 44\n\t\t\t\telse if (Meteor.isServer) {                                                      // 45\n\t\t\t\t\tnoUserIdError();                                                                // 46\n\t\t\t\t\treturn undefined;                                                               // 47\n\t\t\t\t}                                                                                // 48\n\t\t\t}                                                                                 // 49\n\t\t\tvar existing = UserSessionCollection.findOne({ key: key, userId: userId});        // 50\n\t\t\tif (existing) return existing.value;                                              // 51\n\t\t} else {                                                                           // 52\n\t\t\tnoUserError();                                                                    // 53\n\t\t}                                                                                  // 54\n\t},                                                                                  // 55\n\tdelete: function (key, userId) {                                                    // 56\n\t\t// Delete a user session variable, if it exists                                    // 57\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 58\n\t\t\tif (typeof userId === 'undefined') {                                              // 59\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 60\n\t\t\t\telse if (Meteor.isServer) {                                                      // 61\n\t\t\t\t\tnoUserIdError();                                                                // 62\n\t\t\t\t\treturn undefined;                                                               // 63\n\t\t\t\t}                                                                                // 64\n\t\t\t}                                                                                 // 65\n\t\t\tvar existing = UserSessionCollection.findOne({ key: key, userId: userId});        // 66\n\t\t\tif (existing) UserSessionCollection.remove(existing._id);                         // 67\n\t\t} else {                                                                           // 68\n\t\t\tnoUserError();                                                                    // 69\n\t\t}                                                                                  // 70\n\t},                                                                                  // 71\n\tequals: function (key, value, userId) {                                             // 72\n\t\t// Test if a user session variable is equal to a value                             // 73\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 74\n\t\t\tif (typeof userId === 'undefined') {                                              // 75\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 76\n\t\t\t\telse if (Meteor.isServer) {                                                      // 77\n\t\t\t\t\tnoUserIdError();                                                                // 78\n\t\t\t\t\treturn undefined;                                                               // 79\n\t\t\t\t}                                                                                // 80\n\t\t\t}                                                                                 // 81\n\t\t\tvar existing = UserSessionCollection.findOne({ key: key, userId: userId});        // 82\n\t\t\tif (existing) return existing.value == value; //XXX Should this be ===            // 83\n\t\t} else {                                                                           // 84\n\t\t\tnoUserError();                                                                    // 85\n\t\t}                                                                                  // 86\n\t},                                                                                  // 87\n\tlist: function (userId) {                                                           // 88\n\t\t// Get all the user session variables as an object                                 // 89\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 90\n\t\t\tif (typeof userId === 'undefined') {                                              // 91\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 92\n\t\t\t\telse if (Meteor.isServer) {                                                      // 93\n\t\t\t\t\tnoUserIdError();                                                                // 94\n\t\t\t\t\treturn undefined;                                                               // 95\n\t\t\t\t}                                                                                // 96\n\t\t\t}                                                                                 // 97\n\t\t\tvar existing = UserSessionCollection.findOne({ userId: userId});                  // 98\n\t\t\tif (existing) {                                                                   // 99\n\t\t\t\tvar list = {};                                                                   // 100\n\t\t\t\tUserSessionCollection.find({ userId: userId }).forEach(function (sv) {           // 101\n\t\t\t\t\tlist[sv.key] = sv.value;                                                        // 102\n\t\t\t\t});                                                                              // 103\n\t\t\t\treturn list;                                                                     // 104\n\t\t\t}                                                                                 // 105\n\t\t} else {                                                                           // 106\n\t\t\tnoUserError();                                                                    // 107\n\t\t}                                                                                  // 108\n\t}                                                                                   // 109\n};                                                                                   // 110\n///////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////\n//                                                                                   //\n// packages/benjaminrh:user-session/server.js                                        //\n//                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////\n                                                                                     //\n// Publish only the current user's session variables to the client                   // 1\nMeteor.publish('userSessionCollection', function () {                                // 2\n\treturn UserSessionCollection.find({ userId: this.userId });                         // 3\n});                                                                                  // 4\n                                                                                     // 5\n// Check that the userId specified owns the documents                                // 6\nownsDocument = function (userId, doc) {                                              // 7\n\treturn doc && doc.userId === userId;                                                // 8\n}                                                                                    // 9\n                                                                                     // 10\n// Allow methods for UserSessionCollection (security)                                // 11\nUserSessionCollection.allow({                                                        // 12\n\tinsert: function (userId, doc) {                                                    // 13\n\t\treturn ownsDocument(userId, doc);                                                  // 14\n\t},                                                                                  // 15\n\tupdate: function (userId, doc) {                                                    // 16\n\t\treturn ownsDocument(userId, doc);                                                  // 17\n\t},                                                                                  // 18\n\tremove: function (userId, doc) {                                                    // 19\n\t\treturn ownsDocument(userId, doc);                                                  // 20\n\t}                                                                                   // 21\n});                                                                                  // 22\n///////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['benjaminrh:user-session'] = {}, {\n  UserSession: UserSession,\n  UserSessionCollection: UserSessionCollection\n});\n\n})();\n","servePath":"/packages/benjaminrh_user-session.js"}]