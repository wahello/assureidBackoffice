[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/mrt_jquery-migrate/packages/mrt_jquery-migrate.js                                               //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n(function () {                                                                                              // 1\n                                                                                                            // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                   //     // 4\n// packages/mrt:jquery-migrate/client/jquery-migrate-1.2.1.js                                        //     // 5\n//                                                                                                   //     // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                     //     // 8\n/*!                                                                                                  // 1   // 9\n * jQuery Migrate - v1.2.1 - 2013-05-08                                                              // 2   // 10\n * https://github.com/jquery/jquery-migrate                                                          // 3   // 11\n * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors; Licensed MIT                 // 4   // 12\n */                                                                                                  // 5   // 13\n(function( jQuery, window, undefined ) {                                                             // 6   // 14\n// See http://bugs.jquery.com/ticket/13335                                                           // 7   // 15\n// \"use strict\";                                                                                     // 8   // 16\n                                                                                                     // 9   // 17\n                                                                                                     // 10  // 18\nvar warnedAbout = {};                                                                                // 11  // 19\n                                                                                                     // 12  // 20\n// List of warnings already given; public read only                                                  // 13  // 21\njQuery.migrateWarnings = [];                                                                         // 14  // 22\n                                                                                                     // 15  // 23\n// Set to true to prevent console output; migrateWarnings still maintained                           // 16  // 24\n// jQuery.migrateMute = false;                                                                       // 17  // 25\n                                                                                                     // 18  // 26\n// Show a message on the console so devs know we're active                                           // 19  // 27\nif ( !jQuery.migrateMute && window.console && window.console.log ) {                                 // 20  // 28\n\twindow.console.log(\"JQMIGRATE: Logging is active\");                                                 // 21  // 29\n}                                                                                                    // 22  // 30\n                                                                                                     // 23  // 31\n// Set to false to disable traces that appear with warnings                                          // 24  // 32\nif ( jQuery.migrateTrace === undefined ) {                                                           // 25  // 33\n\tjQuery.migrateTrace = true;                                                                         // 26  // 34\n}                                                                                                    // 27  // 35\n                                                                                                     // 28  // 36\n// Forget any warnings we've already given; public                                                   // 29  // 37\njQuery.migrateReset = function() {                                                                   // 30  // 38\n\twarnedAbout = {};                                                                                   // 31  // 39\n\tjQuery.migrateWarnings.length = 0;                                                                  // 32  // 40\n};                                                                                                   // 33  // 41\n                                                                                                     // 34  // 42\nfunction migrateWarn( msg) {                                                                         // 35  // 43\n\tvar console = window.console;                                                                       // 36  // 44\n\tif ( !warnedAbout[ msg ] ) {                                                                        // 37  // 45\n\t\twarnedAbout[ msg ] = true;                                                                         // 38  // 46\n\t\tjQuery.migrateWarnings.push( msg );                                                                // 39  // 47\n\t\tif ( console && console.warn && !jQuery.migrateMute ) {                                            // 40  // 48\n\t\t\tconsole.warn( \"JQMIGRATE: \" + msg );                                                              // 41  // 49\n\t\t\tif ( jQuery.migrateTrace && console.trace ) {                                                     // 42  // 50\n\t\t\t\tconsole.trace();                                                                                 // 43  // 51\n\t\t\t}                                                                                                 // 44  // 52\n\t\t}                                                                                                  // 45  // 53\n\t}                                                                                                   // 46  // 54\n}                                                                                                    // 47  // 55\n                                                                                                     // 48  // 56\nfunction migrateWarnProp( obj, prop, value, msg ) {                                                  // 49  // 57\n\tif ( Object.defineProperty ) {                                                                      // 50  // 58\n\t\t// On ES5 browsers (non-oldIE), warn if the code tries to get prop;                                // 51  // 59\n\t\t// allow property to be overwritten in case some other plugin wants it                             // 52  // 60\n\t\ttry {                                                                                              // 53  // 61\n\t\t\tObject.defineProperty( obj, prop, {                                                               // 54  // 62\n\t\t\t\tconfigurable: true,                                                                              // 55  // 63\n\t\t\t\tenumerable: true,                                                                                // 56  // 64\n\t\t\t\tget: function() {                                                                                // 57  // 65\n\t\t\t\t\tmigrateWarn( msg );                                                                             // 58  // 66\n\t\t\t\t\treturn value;                                                                                   // 59  // 67\n\t\t\t\t},                                                                                               // 60  // 68\n\t\t\t\tset: function( newValue ) {                                                                      // 61  // 69\n\t\t\t\t\tmigrateWarn( msg );                                                                             // 62  // 70\n\t\t\t\t\tvalue = newValue;                                                                               // 63  // 71\n\t\t\t\t}                                                                                                // 64  // 72\n\t\t\t});                                                                                               // 65  // 73\n\t\t\treturn;                                                                                           // 66  // 74\n\t\t} catch( err ) {                                                                                   // 67  // 75\n\t\t\t// IE8 is a dope about Object.defineProperty, can't warn there                                    // 68  // 76\n\t\t}                                                                                                  // 69  // 77\n\t}                                                                                                   // 70  // 78\n                                                                                                     // 71  // 79\n\t// Non-ES5 (or broken) browser; just set the property                                               // 72  // 80\n\tjQuery._definePropertyBroken = true;                                                                // 73  // 81\n\tobj[ prop ] = value;                                                                                // 74  // 82\n}                                                                                                    // 75  // 83\n                                                                                                     // 76  // 84\nif ( document.compatMode === \"BackCompat\" ) {                                                        // 77  // 85\n\t// jQuery has never supported or tested Quirks Mode                                                 // 78  // 86\n\tmigrateWarn( \"jQuery is not compatible with Quirks Mode\" );                                         // 79  // 87\n}                                                                                                    // 80  // 88\n                                                                                                     // 81  // 89\n                                                                                                     // 82  // 90\nvar attrFn = jQuery( \"<input/>\", { size: 1 } ).attr(\"size\") && jQuery.attrFn,                        // 83  // 91\n\toldAttr = jQuery.attr,                                                                              // 84  // 92\n\tvalueAttrGet = jQuery.attrHooks.value && jQuery.attrHooks.value.get ||                              // 85  // 93\n\t\tfunction() { return null; },                                                                       // 86  // 94\n\tvalueAttrSet = jQuery.attrHooks.value && jQuery.attrHooks.value.set ||                              // 87  // 95\n\t\tfunction() { return undefined; },                                                                  // 88  // 96\n\trnoType = /^(?:input|button)$/i,                                                                    // 89  // 97\n\trnoAttrNodeType = /^[238]$/,                                                                        // 90  // 98\n\trboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,\n\truseDefault = /^(?:checked|selected)$/i;                                                            // 92  // 100\n                                                                                                     // 93  // 101\n// jQuery.attrFn                                                                                     // 94  // 102\nmigrateWarnProp( jQuery, \"attrFn\", attrFn || {}, \"jQuery.attrFn is deprecated\" );                    // 95  // 103\n                                                                                                     // 96  // 104\njQuery.attr = function( elem, name, value, pass ) {                                                  // 97  // 105\n\tvar lowerName = name.toLowerCase(),                                                                 // 98  // 106\n\t\tnType = elem && elem.nodeType;                                                                     // 99  // 107\n                                                                                                     // 100\n\tif ( pass ) {                                                                                       // 101\n\t\t// Since pass is used internally, we only warn for new jQuery                                      // 102\n\t\t// versions where there isn't a pass arg in the formal params                                      // 103\n\t\tif ( oldAttr.length < 4 ) {                                                                        // 104\n\t\t\tmigrateWarn(\"jQuery.fn.attr( props, pass ) is deprecated\");                                       // 105\n\t\t}                                                                                                  // 106\n\t\tif ( elem && !rnoAttrNodeType.test( nType ) &&                                                     // 107\n\t\t\t(attrFn ? name in attrFn : jQuery.isFunction(jQuery.fn[name])) ) {                                // 108\n\t\t\treturn jQuery( elem )[ name ]( value );                                                           // 109\n\t\t}                                                                                                  // 110\n\t}                                                                                                   // 111\n                                                                                                     // 112\n\t// Warn if user tries to set `type`, since it breaks on IE 6/7/8; by checking                       // 113\n\t// for disconnected elements we don't warn on $( \"<button>\", { type: \"button\" } ).                  // 114\n\tif ( name === \"type\" && value !== undefined && rnoType.test( elem.nodeName ) && elem.parentNode ) { // 115\n\t\tmigrateWarn(\"Can't change the 'type' of an input or button in IE 6/7/8\");                          // 116\n\t}                                                                                                   // 117\n                                                                                                     // 118\n\t// Restore boolHook for boolean property/attribute synchronization                                  // 119\n\tif ( !jQuery.attrHooks[ lowerName ] && rboolean.test( lowerName ) ) {                               // 120\n\t\tjQuery.attrHooks[ lowerName ] = {                                                                  // 121\n\t\t\tget: function( elem, name ) {                                                                     // 122\n\t\t\t\t// Align boolean attributes with corresponding properties                                        // 123\n\t\t\t\t// Fall back to attribute presence where some booleans are not supported                         // 124\n\t\t\t\tvar attrNode,                                                                                    // 125\n\t\t\t\t\tproperty = jQuery.prop( elem, name );                                                           // 126\n\t\t\t\treturn property === true || typeof property !== \"boolean\" &&                                     // 127\n\t\t\t\t\t( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?                    // 128\n                                                                                                     // 129\n\t\t\t\t\tname.toLowerCase() :                                                                            // 130\n\t\t\t\t\tundefined;                                                                                      // 131\n\t\t\t},                                                                                                // 132\n\t\t\tset: function( elem, value, name ) {                                                              // 133\n\t\t\t\tvar propName;                                                                                    // 134\n\t\t\t\tif ( value === false ) {                                                                         // 135\n\t\t\t\t\t// Remove boolean attributes when set to false                                                  // 136\n\t\t\t\t\tjQuery.removeAttr( elem, name );                                                                // 137\n\t\t\t\t} else {                                                                                         // 138\n\t\t\t\t\t// value is true since we know at this point it's type boolean and not false                    // 139\n\t\t\t\t\t// Set boolean attributes to the same name and set the DOM property                             // 140\n\t\t\t\t\tpropName = jQuery.propFix[ name ] || name;                                                      // 141\n\t\t\t\t\tif ( propName in elem ) {                                                                       // 142\n\t\t\t\t\t\t// Only set the IDL specifically if it already exists on the element                           // 143\n\t\t\t\t\t\telem[ propName ] = true;                                                                       // 144\n\t\t\t\t\t}                                                                                               // 145\n                                                                                                     // 146\n\t\t\t\t\telem.setAttribute( name, name.toLowerCase() );                                                  // 147\n\t\t\t\t}                                                                                                // 148\n\t\t\t\treturn name;                                                                                     // 149\n\t\t\t}                                                                                                 // 150\n\t\t};                                                                                                 // 151\n                                                                                                     // 152\n\t\t// Warn only for attributes that can remain distinct from their properties post-1.9                // 153\n\t\tif ( ruseDefault.test( lowerName ) ) {                                                             // 154\n\t\t\tmigrateWarn( \"jQuery.fn.attr('\" + lowerName + \"') may use property instead of attribute\" );       // 155\n\t\t}                                                                                                  // 156\n\t}                                                                                                   // 157\n                                                                                                     // 158\n\treturn oldAttr.call( jQuery, elem, name, value );                                                   // 159\n};                                                                                                   // 160\n                                                                                                     // 161\n// attrHooks: value                                                                                  // 162\njQuery.attrHooks.value = {                                                                           // 163\n\tget: function( elem, name ) {                                                                       // 164\n\t\tvar nodeName = ( elem.nodeName || \"\" ).toLowerCase();                                              // 165\n\t\tif ( nodeName === \"button\" ) {                                                                     // 166\n\t\t\treturn valueAttrGet.apply( this, arguments );                                                     // 167\n\t\t}                                                                                                  // 168\n\t\tif ( nodeName !== \"input\" && nodeName !== \"option\" ) {                                             // 169\n\t\t\tmigrateWarn(\"jQuery.fn.attr('value') no longer gets properties\");                                 // 170\n\t\t}                                                                                                  // 171\n\t\treturn name in elem ?                                                                              // 172\n\t\t\telem.value :                                                                                      // 173\n\t\t\tnull;                                                                                             // 174\n\t},                                                                                                  // 175\n\tset: function( elem, value ) {                                                                      // 176\n\t\tvar nodeName = ( elem.nodeName || \"\" ).toLowerCase();                                              // 177\n\t\tif ( nodeName === \"button\" ) {                                                                     // 178\n\t\t\treturn valueAttrSet.apply( this, arguments );                                                     // 179\n\t\t}                                                                                                  // 180\n\t\tif ( nodeName !== \"input\" && nodeName !== \"option\" ) {                                             // 181\n\t\t\tmigrateWarn(\"jQuery.fn.attr('value', val) no longer sets properties\");                            // 182\n\t\t}                                                                                                  // 183\n\t\t// Does not return so that setAttribute is also used                                               // 184\n\t\telem.value = value;                                                                                // 185\n\t}                                                                                                   // 186\n};                                                                                                   // 187\n                                                                                                     // 188\n                                                                                                     // 189\nvar matched, browser,                                                                                // 190\n\toldInit = jQuery.fn.init,                                                                           // 191\n\toldParseJSON = jQuery.parseJSON,                                                                    // 192\n\t// Note: XSS check is done below after string is trimmed                                            // 193\n\trquickExpr = /^([^<]*)(<[\\w\\W]+>)([^>]*)$/;                                                         // 194\n                                                                                                     // 195\n// $(html) \"looks like html\" rule change                                                             // 196\njQuery.fn.init = function( selector, context, rootjQuery ) {                                         // 197\n\tvar match;                                                                                          // 198\n                                                                                                     // 199\n\tif ( selector && typeof selector === \"string\" && !jQuery.isPlainObject( context ) &&                // 200\n\t\t\t(match = rquickExpr.exec( jQuery.trim( selector ) )) && match[ 0 ] ) {                            // 201\n\t\t// This is an HTML string according to the \"old\" rules; is it still?                               // 202\n\t\tif ( selector.charAt( 0 ) !== \"<\" ) {                                                              // 203\n\t\t\tmigrateWarn(\"$(html) HTML strings must start with '<' character\");                                // 204\n\t\t}                                                                                                  // 205\n\t\tif ( match[ 3 ] ) {                                                                                // 206\n\t\t\tmigrateWarn(\"$(html) HTML text after last tag is ignored\");                                       // 207\n\t\t}                                                                                                  // 208\n\t\t// Consistently reject any HTML-like string starting with a hash (#9521)                           // 209\n\t\t// Note that this may break jQuery 1.6.x code that otherwise would work.                           // 210\n\t\tif ( match[ 0 ].charAt( 0 ) === \"#\" ) {                                                            // 211\n\t\t\tmigrateWarn(\"HTML string cannot start with a '#' character\");                                     // 212\n\t\t\tjQuery.error(\"JQMIGRATE: Invalid selector string (XSS)\");                                         // 213\n\t\t}                                                                                                  // 214\n\t\t// Now process using loose rules; let pre-1.8 play too                                             // 215\n\t\tif ( context && context.context ) {                                                                // 216\n\t\t\t// jQuery object as context; parseHTML expects a DOM object                                       // 217\n\t\t\tcontext = context.context;                                                                        // 218\n\t\t}                                                                                                  // 219\n\t\tif ( jQuery.parseHTML ) {                                                                          // 220\n\t\t\treturn oldInit.call( this, jQuery.parseHTML( match[ 2 ], context, true ),                         // 221\n\t\t\t\t\tcontext, rootjQuery );                                                                          // 222\n\t\t}                                                                                                  // 223\n\t}                                                                                                   // 224\n\treturn oldInit.apply( this, arguments );                                                            // 225\n};                                                                                                   // 226\njQuery.fn.init.prototype = jQuery.fn;                                                                // 227\n                                                                                                     // 228\n// Let $.parseJSON(falsy_value) return null                                                          // 229\njQuery.parseJSON = function( json ) {                                                                // 230\n\tif ( !json && json !== null ) {                                                                     // 231\n\t\tmigrateWarn(\"jQuery.parseJSON requires a valid JSON string\");                                      // 232\n\t\treturn null;                                                                                       // 233\n\t}                                                                                                   // 234\n\treturn oldParseJSON.apply( this, arguments );                                                       // 235\n};                                                                                                   // 236\n                                                                                                     // 237\njQuery.uaMatch = function( ua ) {                                                                    // 238\n\tua = ua.toLowerCase();                                                                              // 239\n                                                                                                     // 240\n\tvar match = /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||                                                   // 241\n\t\t/(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||                                                              // 242\n\t\t/(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||                                                 // 243\n\t\t/(msie) ([\\w.]+)/.exec( ua ) ||                                                                    // 244\n\t\tua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||                      // 245\n\t\t[];                                                                                                // 246\n                                                                                                     // 247\n\treturn {                                                                                            // 248\n\t\tbrowser: match[ 1 ] || \"\",                                                                         // 249\n\t\tversion: match[ 2 ] || \"0\"                                                                         // 250\n\t};                                                                                                  // 251\n};                                                                                                   // 252\n                                                                                                     // 253\n// Don't clobber any existing jQuery.browser in case it's different                                  // 254\nif ( !jQuery.browser ) {                                                                             // 255\n\tmatched = jQuery.uaMatch( navigator.userAgent );                                                    // 256\n\tbrowser = {};                                                                                       // 257\n                                                                                                     // 258\n\tif ( matched.browser ) {                                                                            // 259\n\t\tbrowser[ matched.browser ] = true;                                                                 // 260\n\t\tbrowser.version = matched.version;                                                                 // 261\n\t}                                                                                                   // 262\n                                                                                                     // 263\n\t// Chrome is Webkit, but Webkit is also Safari.                                                     // 264\n\tif ( browser.chrome ) {                                                                             // 265\n\t\tbrowser.webkit = true;                                                                             // 266\n\t} else if ( browser.webkit ) {                                                                      // 267\n\t\tbrowser.safari = true;                                                                             // 268\n\t}                                                                                                   // 269\n                                                                                                     // 270\n\tjQuery.browser = browser;                                                                           // 271\n}                                                                                                    // 272\n                                                                                                     // 273\n// Warn if the code tries to get jQuery.browser                                                      // 274\nmigrateWarnProp( jQuery, \"browser\", jQuery.browser, \"jQuery.browser is deprecated\" );                // 275\n                                                                                                     // 276\njQuery.sub = function() {                                                                            // 277\n\tfunction jQuerySub( selector, context ) {                                                           // 278\n\t\treturn new jQuerySub.fn.init( selector, context );                                                 // 279\n\t}                                                                                                   // 280\n\tjQuery.extend( true, jQuerySub, this );                                                             // 281\n\tjQuerySub.superclass = this;                                                                        // 282\n\tjQuerySub.fn = jQuerySub.prototype = this();                                                        // 283\n\tjQuerySub.fn.constructor = jQuerySub;                                                               // 284\n\tjQuerySub.sub = this.sub;                                                                           // 285\n\tjQuerySub.fn.init = function init( selector, context ) {                                            // 286\n\t\tif ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {                   // 287\n\t\t\tcontext = jQuerySub( context );                                                                   // 288\n\t\t}                                                                                                  // 289\n                                                                                                     // 290\n\t\treturn jQuery.fn.init.call( this, selector, context, rootjQuerySub );                              // 291\n\t};                                                                                                  // 292\n\tjQuerySub.fn.init.prototype = jQuerySub.fn;                                                         // 293\n\tvar rootjQuerySub = jQuerySub(document);                                                            // 294\n\tmigrateWarn( \"jQuery.sub() is deprecated\" );                                                        // 295\n\treturn jQuerySub;                                                                                   // 296\n};                                                                                                   // 297\n                                                                                                     // 298\n                                                                                                     // 299\n// Ensure that $.ajax gets the new parseJSON defined in core.js                                      // 300\njQuery.ajaxSetup({                                                                                   // 301\n\tconverters: {                                                                                       // 302\n\t\t\"text json\": jQuery.parseJSON                                                                      // 303\n\t}                                                                                                   // 304\n});                                                                                                  // 305\n                                                                                                     // 306\n                                                                                                     // 307\nvar oldFnData = jQuery.fn.data;                                                                      // 308\n                                                                                                     // 309\njQuery.fn.data = function( name ) {                                                                  // 310\n\tvar ret, evt,                                                                                       // 311\n\t\telem = this[0];                                                                                    // 312\n                                                                                                     // 313\n\t// Handles 1.7 which has this behavior and 1.8 which doesn't                                        // 314\n\tif ( elem && name === \"events\" && arguments.length === 1 ) {                                        // 315\n\t\tret = jQuery.data( elem, name );                                                                   // 316\n\t\tevt = jQuery._data( elem, name );                                                                  // 317\n\t\tif ( ( ret === undefined || ret === evt ) && evt !== undefined ) {                                 // 318\n\t\t\tmigrateWarn(\"Use of jQuery.fn.data('events') is deprecated\");                                     // 319\n\t\t\treturn evt;                                                                                       // 320\n\t\t}                                                                                                  // 321\n\t}                                                                                                   // 322\n\treturn oldFnData.apply( this, arguments );                                                          // 323\n};                                                                                                   // 324\n                                                                                                     // 325\n                                                                                                     // 326\nvar rscriptType = /\\/(java|ecma)script/i,                                                            // 327\n\toldSelf = jQuery.fn.andSelf || jQuery.fn.addBack;                                                   // 328\n                                                                                                     // 329\njQuery.fn.andSelf = function() {                                                                     // 330\n\tmigrateWarn(\"jQuery.fn.andSelf() replaced by jQuery.fn.addBack()\");                                 // 331\n\treturn oldSelf.apply( this, arguments );                                                            // 332\n};                                                                                                   // 333\n                                                                                                     // 334\n// Since jQuery.clean is used internally on older versions, we only shim if it's missing             // 335\nif ( !jQuery.clean ) {                                                                               // 336\n\tjQuery.clean = function( elems, context, fragment, scripts ) {                                      // 337\n\t\t// Set context per 1.8 logic                                                                       // 338\n\t\tcontext = context || document;                                                                     // 339\n\t\tcontext = !context.nodeType && context[0] || context;                                              // 340\n\t\tcontext = context.ownerDocument || context;                                                        // 341\n                                                                                                     // 342\n\t\tmigrateWarn(\"jQuery.clean() is deprecated\");                                                       // 343\n                                                                                                     // 344\n\t\tvar i, elem, handleScript, jsTags,                                                                 // 345\n\t\t\tret = [];                                                                                         // 346\n                                                                                                     // 347\n\t\tjQuery.merge( ret, jQuery.buildFragment( elems, context ).childNodes );                            // 348\n                                                                                                     // 349\n\t\t// Complex logic lifted directly from jQuery 1.8                                                   // 350\n\t\tif ( fragment ) {                                                                                  // 351\n\t\t\t// Special handling of each script element                                                        // 352\n\t\t\thandleScript = function( elem ) {                                                                 // 353\n\t\t\t\t// Check if we consider it executable                                                            // 354\n\t\t\t\tif ( !elem.type || rscriptType.test( elem.type ) ) {                                             // 355\n\t\t\t\t\t// Detach the script and store it in the scripts array (if provided) or the fragment            // 356\n\t\t\t\t\t// Return truthy to indicate that it has been handled                                           // 357\n\t\t\t\t\treturn scripts ?                                                                                // 358\n\t\t\t\t\t\tscripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :                 // 359\n\t\t\t\t\t\tfragment.appendChild( elem );                                                                  // 360\n\t\t\t\t}                                                                                                // 361\n\t\t\t};                                                                                                // 362\n                                                                                                     // 363\n\t\t\tfor ( i = 0; (elem = ret[i]) != null; i++ ) {                                                     // 364\n\t\t\t\t// Check if we're done after handling an executable script                                       // 365\n\t\t\t\tif ( !( jQuery.nodeName( elem, \"script\" ) && handleScript( elem ) ) ) {                          // 366\n\t\t\t\t\t// Append to fragment and handle embedded scripts                                               // 367\n\t\t\t\t\tfragment.appendChild( elem );                                                                   // 368\n\t\t\t\t\tif ( typeof elem.getElementsByTagName !== \"undefined\" ) {                                       // 369\n\t\t\t\t\t\t// handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration               // 370\n\t\t\t\t\t\tjsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName(\"script\") ), handleScript ); // 371\n                                                                                                     // 372\n\t\t\t\t\t\t// Splice the scripts into ret after their former ancestor and advance our index beyond them   // 373\n\t\t\t\t\t\tret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );                                          // 374\n\t\t\t\t\t\ti += jsTags.length;                                                                            // 375\n\t\t\t\t\t}                                                                                               // 376\n\t\t\t\t}                                                                                                // 377\n\t\t\t}                                                                                                 // 378\n\t\t}                                                                                                  // 379\n                                                                                                     // 380\n\t\treturn ret;                                                                                        // 381\n\t};                                                                                                  // 382\n}                                                                                                    // 383\n                                                                                                     // 384\nvar eventAdd = jQuery.event.add,                                                                     // 385\n\teventRemove = jQuery.event.remove,                                                                  // 386\n\teventTrigger = jQuery.event.trigger,                                                                // 387\n\toldToggle = jQuery.fn.toggle,                                                                       // 388\n\toldLive = jQuery.fn.live,                                                                           // 389\n\toldDie = jQuery.fn.die,                                                                             // 390\n\tajaxEvents = \"ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess\",                      // 391\n\trajaxEvent = new RegExp( \"\\\\b(?:\" + ajaxEvents + \")\\\\b\" ),                                          // 392\n\trhoverHack = /(?:^|\\s)hover(\\.\\S+|)\\b/,                                                             // 393\n\thoverHack = function( events ) {                                                                    // 394\n\t\tif ( typeof( events ) !== \"string\" || jQuery.event.special.hover ) {                               // 395\n\t\t\treturn events;                                                                                    // 396\n\t\t}                                                                                                  // 397\n\t\tif ( rhoverHack.test( events ) ) {                                                                 // 398\n\t\t\tmigrateWarn(\"'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'\");                   // 399\n\t\t}                                                                                                  // 400\n\t\treturn events && events.replace( rhoverHack, \"mouseenter$1 mouseleave$1\" );                        // 401\n\t};                                                                                                  // 402\n                                                                                                     // 403\n// Event props removed in 1.9, put them back if needed; no practical way to warn them                // 404\nif ( jQuery.event.props && jQuery.event.props[ 0 ] !== \"attrChange\" ) {                              // 405\n\tjQuery.event.props.unshift( \"attrChange\", \"attrName\", \"relatedNode\", \"srcElement\" );                // 406\n}                                                                                                    // 407\n                                                                                                     // 408\n// Undocumented jQuery.event.handle was \"deprecated\" in jQuery 1.7                                   // 409\nif ( jQuery.event.dispatch ) {                                                                       // 410\n\tmigrateWarnProp( jQuery.event, \"handle\", jQuery.event.dispatch, \"jQuery.event.handle is undocumented and deprecated\" );\n}                                                                                                    // 412\n                                                                                                     // 413\n// Support for 'hover' pseudo-event and ajax event warnings                                          // 414\njQuery.event.add = function( elem, types, handler, data, selector ){                                 // 415\n\tif ( elem !== document && rajaxEvent.test( types ) ) {                                              // 416\n\t\tmigrateWarn( \"AJAX events should be attached to document: \" + types );                             // 417\n\t}                                                                                                   // 418\n\teventAdd.call( this, elem, hoverHack( types || \"\" ), handler, data, selector );                     // 419\n};                                                                                                   // 420\njQuery.event.remove = function( elem, types, handler, selector, mappedTypes ){                       // 421\n\teventRemove.call( this, elem, hoverHack( types ) || \"\", handler, selector, mappedTypes );           // 422\n};                                                                                                   // 423\n                                                                                                     // 424\njQuery.fn.error = function() {                                                                       // 425\n\tvar args = Array.prototype.slice.call( arguments, 0);                                               // 426\n\tmigrateWarn(\"jQuery.fn.error() is deprecated\");                                                     // 427\n\targs.splice( 0, 0, \"error\" );                                                                       // 428\n\tif ( arguments.length ) {                                                                           // 429\n\t\treturn this.bind.apply( this, args );                                                              // 430\n\t}                                                                                                   // 431\n\t// error event should not bubble to window, although it does pre-1.7                                // 432\n\tthis.triggerHandler.apply( this, args );                                                            // 433\n\treturn this;                                                                                        // 434\n};                                                                                                   // 435\n                                                                                                     // 436\njQuery.fn.toggle = function( fn, fn2 ) {                                                             // 437\n                                                                                                     // 438\n\t// Don't mess with animation or css toggles                                                         // 439\n\tif ( !jQuery.isFunction( fn ) || !jQuery.isFunction( fn2 ) ) {                                      // 440\n\t\treturn oldToggle.apply( this, arguments );                                                         // 441\n\t}                                                                                                   // 442\n\tmigrateWarn(\"jQuery.fn.toggle(handler, handler...) is deprecated\");                                 // 443\n                                                                                                     // 444\n\t// Save reference to arguments for access in closure                                                // 445\n\tvar args = arguments,                                                                               // 446\n\t\tguid = fn.guid || jQuery.guid++,                                                                   // 447\n\t\ti = 0,                                                                                             // 448\n\t\ttoggler = function( event ) {                                                                      // 449\n\t\t\t// Figure out which function to execute                                                           // 450\n\t\t\tvar lastToggle = ( jQuery._data( this, \"lastToggle\" + fn.guid ) || 0 ) % i;                       // 451\n\t\t\tjQuery._data( this, \"lastToggle\" + fn.guid, lastToggle + 1 );                                     // 452\n                                                                                                     // 453\n\t\t\t// Make sure that clicks stop                                                                     // 454\n\t\t\tevent.preventDefault();                                                                           // 455\n                                                                                                     // 456\n\t\t\t// and execute the function                                                                       // 457\n\t\t\treturn args[ lastToggle ].apply( this, arguments ) || false;                                      // 458\n\t\t};                                                                                                 // 459\n                                                                                                     // 460\n\t// link all the functions, so any of them can unbind this click handler                             // 461\n\ttoggler.guid = guid;                                                                                // 462\n\twhile ( i < args.length ) {                                                                         // 463\n\t\targs[ i++ ].guid = guid;                                                                           // 464\n\t}                                                                                                   // 465\n                                                                                                     // 466\n\treturn this.click( toggler );                                                                       // 467\n};                                                                                                   // 468\n                                                                                                     // 469\njQuery.fn.live = function( types, data, fn ) {                                                       // 470\n\tmigrateWarn(\"jQuery.fn.live() is deprecated\");                                                      // 471\n\tif ( oldLive ) {                                                                                    // 472\n\t\treturn oldLive.apply( this, arguments );                                                           // 473\n\t}                                                                                                   // 474\n\tjQuery( this.context ).on( types, this.selector, data, fn );                                        // 475\n\treturn this;                                                                                        // 476\n};                                                                                                   // 477\n                                                                                                     // 478\njQuery.fn.die = function( types, fn ) {                                                              // 479\n\tmigrateWarn(\"jQuery.fn.die() is deprecated\");                                                       // 480\n\tif ( oldDie ) {                                                                                     // 481\n\t\treturn oldDie.apply( this, arguments );                                                            // 482\n\t}                                                                                                   // 483\n\tjQuery( this.context ).off( types, this.selector || \"**\", fn );                                     // 484\n\treturn this;                                                                                        // 485\n};                                                                                                   // 486\n                                                                                                     // 487\n// Turn global events into document-triggered events                                                 // 488\njQuery.event.trigger = function( event, data, elem, onlyHandlers  ){                                 // 489\n\tif ( !elem && !rajaxEvent.test( event ) ) {                                                         // 490\n\t\tmigrateWarn( \"Global events are undocumented and deprecated\" );                                    // 491\n\t}                                                                                                   // 492\n\treturn eventTrigger.call( this,  event, data, elem || document, onlyHandlers  );                    // 493\n};                                                                                                   // 494\njQuery.each( ajaxEvents.split(\"|\"),                                                                  // 495\n\tfunction( _, name ) {                                                                               // 496\n\t\tjQuery.event.special[ name ] = {                                                                   // 497\n\t\t\tsetup: function() {                                                                               // 498\n\t\t\t\tvar elem = this;                                                                                 // 499\n                                                                                                     // 500\n\t\t\t\t// The document needs no shimming; must be !== for oldIE                                         // 501\n\t\t\t\tif ( elem !== document ) {                                                                       // 502\n\t\t\t\t\tjQuery.event.add( document, name + \".\" + jQuery.guid, function() {                              // 503\n\t\t\t\t\t\tjQuery.event.trigger( name, null, elem, true );                                                // 504\n\t\t\t\t\t});                                                                                             // 505\n\t\t\t\t\tjQuery._data( this, name, jQuery.guid++ );                                                      // 506\n\t\t\t\t}                                                                                                // 507\n\t\t\t\treturn false;                                                                                    // 508\n\t\t\t},                                                                                                // 509\n\t\t\tteardown: function() {                                                                            // 510\n\t\t\t\tif ( this !== document ) {                                                                       // 511\n\t\t\t\t\tjQuery.event.remove( document, name + \".\" + jQuery._data( this, name ) );                       // 512\n\t\t\t\t}                                                                                                // 513\n\t\t\t\treturn false;                                                                                    // 514\n\t\t\t}                                                                                                 // 515\n\t\t};                                                                                                 // 516\n\t}                                                                                                   // 517\n);                                                                                                   // 518\n                                                                                                     // 519\n                                                                                                     // 520\n})( jQuery, window );                                                                                // 521\n                                                                                                     // 522\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 531\n                                                                                                            // 532\n}).call(this);                                                                                              // 533\n                                                                                                            // 534\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['mrt:jquery-migrate'] = {};\n\n})();\n","servePath":"/packages/mrt_jquery-migrate.js"}]