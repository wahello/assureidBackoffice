[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Session = Package.session.Session;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar UserSessionCollection, noUserError, noUserIdError, UserSession;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                          //\n// packages/benjaminrh_user-session/packages/benjaminrh_user-session.js                     //\n//                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                            //\n(function () {                                                                              // 1\n                                                                                            // 2\n///////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                   //     // 4\n// packages/benjaminrh:user-session/common.js                                        //     // 5\n//                                                                                   //     // 6\n///////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                     //     // 8\n// This collection is where the UserSession variables are ultimately stored          // 1   // 9\nUserSessionCollection = new Meteor.Collection('userSessionCollection');              // 2   // 10\n                                                                                     // 3   // 11\n// Anonymous user error                                                              // 4   // 12\nnoUserError = function () {                                                          // 5   // 13\n\tconsole.log('You cannot use UserSession methods when there is no user logged in.'); // 6   // 14\n}                                                                                    // 7   // 15\n                                                                                     // 8   // 16\n// Missing userId error                                                              // 9   // 17\nnoUserIdError = function () {                                                        // 10  // 18\n\tconsole.log('You cannot use UserSession methods on the server without a userId.');  // 11  // 19\n}                                                                                    // 12  // 20\n                                                                                     // 13  // 21\n                                                                                     // 14  // 22\n//=======================                                                            // 15  // 23\n// = UserSession METHODS                                                             // 16  // 24\n//=======================                                                            // 17  // 25\n                                                                                     // 18  // 26\nUserSession = {                                                                      // 19  // 27\n\tset: function (key, value, userId) {                                                // 20  // 28\n\t\t// Set a new variable in the user session                                          // 21  // 29\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 22  // 30\n\t\t\t// If the user is logged in, update the variable in the collection                // 23  // 31\n\t\t\tif (typeof userId === 'undefined') {                                              // 24  // 32\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 25  // 33\n\t\t\t\telse if (Meteor.isServer) {                                                      // 26  // 34\n\t\t\t\t\tnoUserIdError();                                                                // 27  // 35\n\t\t\t\t\treturn undefined;                                                               // 28  // 36\n\t\t\t\t}                                                                                // 29  // 37\n\t\t\t}                                                                                 // 30  // 38\n\t\t\tvar existing = UserSessionCollection.findOne({ key: key, userId: userId});        // 31  // 39\n\t\t\tvar sv = { key: key, value: value, userId: userId };                              // 32  // 40\n\t\t\tif (existing) UserSessionCollection.update({ _id: existing._id }, { $set: sv });  // 33  // 41\n\t\t\telse UserSessionCollection.insert(sv);                                            // 34  // 42\n\t\t} else {                                                                           // 35  // 43\n\t\t\t//XXX Maybe we should degrade to normal Session and sync on login                 // 36  // 44\n\t\t\tnoUserError();                                                                    // 37  // 45\n\t\t}                                                                                  // 38  // 46\n\t},                                                                                  // 39  // 47\n\tget: function (key, userId) {                                                       // 40  // 48\n\t\t// Get the value of a user session variable                                        // 41  // 49\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 42  // 50\n\t\t\tif (typeof userId === 'undefined') {                                              // 43  // 51\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 44  // 52\n\t\t\t\telse if (Meteor.isServer) {                                                      // 45  // 53\n\t\t\t\t\tnoUserIdError();                                                                // 46  // 54\n\t\t\t\t\treturn undefined;                                                               // 47  // 55\n\t\t\t\t}                                                                                // 48  // 56\n\t\t\t}                                                                                 // 49  // 57\n\t\t\tvar existing = UserSessionCollection.findOne({ key: key, userId: userId});        // 50  // 58\n\t\t\tif (existing) return existing.value;                                              // 51  // 59\n\t\t} else {                                                                           // 52  // 60\n\t\t\tnoUserError();                                                                    // 53  // 61\n\t\t}                                                                                  // 54  // 62\n\t},                                                                                  // 55  // 63\n\tdelete: function (key, userId) {                                                    // 56  // 64\n\t\t// Delete a user session variable, if it exists                                    // 57  // 65\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 58  // 66\n\t\t\tif (typeof userId === 'undefined') {                                              // 59  // 67\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 60  // 68\n\t\t\t\telse if (Meteor.isServer) {                                                      // 61  // 69\n\t\t\t\t\tnoUserIdError();                                                                // 62  // 70\n\t\t\t\t\treturn undefined;                                                               // 63  // 71\n\t\t\t\t}                                                                                // 64  // 72\n\t\t\t}                                                                                 // 65  // 73\n\t\t\tvar existing = UserSessionCollection.findOne({ key: key, userId: userId});        // 66  // 74\n\t\t\tif (existing) UserSessionCollection.remove(existing._id);                         // 67  // 75\n\t\t} else {                                                                           // 68  // 76\n\t\t\tnoUserError();                                                                    // 69  // 77\n\t\t}                                                                                  // 70  // 78\n\t},                                                                                  // 71  // 79\n\tequals: function (key, value, userId) {                                             // 72  // 80\n\t\t// Test if a user session variable is equal to a value                             // 73  // 81\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 74  // 82\n\t\t\tif (typeof userId === 'undefined') {                                              // 75  // 83\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 76  // 84\n\t\t\t\telse if (Meteor.isServer) {                                                      // 77  // 85\n\t\t\t\t\tnoUserIdError();                                                                // 78  // 86\n\t\t\t\t\treturn undefined;                                                               // 79  // 87\n\t\t\t\t}                                                                                // 80  // 88\n\t\t\t}                                                                                 // 81  // 89\n\t\t\tvar existing = UserSessionCollection.findOne({ key: key, userId: userId});        // 82  // 90\n\t\t\tif (existing) return existing.value == value; //XXX Should this be ===            // 83  // 91\n\t\t} else {                                                                           // 84  // 92\n\t\t\tnoUserError();                                                                    // 85  // 93\n\t\t}                                                                                  // 86  // 94\n\t},                                                                                  // 87  // 95\n\tlist: function (userId) {                                                           // 88  // 96\n\t\t// Get all the user session variables as an object                                 // 89  // 97\n\t\tif (Meteor.userId() || Meteor.isServer) {                                          // 90  // 98\n\t\t\tif (typeof userId === 'undefined') {                                              // 91  // 99\n\t\t\t\tif (Meteor.isClient) userId = Meteor.userId();                                   // 92  // 100\n\t\t\t\telse if (Meteor.isServer) {                                                      // 93  // 101\n\t\t\t\t\tnoUserIdError();                                                                // 94  // 102\n\t\t\t\t\treturn undefined;                                                               // 95  // 103\n\t\t\t\t}                                                                                // 96  // 104\n\t\t\t}                                                                                 // 97  // 105\n\t\t\tvar existing = UserSessionCollection.findOne({ userId: userId});                  // 98  // 106\n\t\t\tif (existing) {                                                                   // 99  // 107\n\t\t\t\tvar list = {};                                                                   // 100\n\t\t\t\tUserSessionCollection.find({ userId: userId }).forEach(function (sv) {           // 101\n\t\t\t\t\tlist[sv.key] = sv.value;                                                        // 102\n\t\t\t\t});                                                                              // 103\n\t\t\t\treturn list;                                                                     // 104\n\t\t\t}                                                                                 // 105\n\t\t} else {                                                                           // 106\n\t\t\tnoUserError();                                                                    // 107\n\t\t}                                                                                  // 108\n\t}                                                                                   // 109\n};                                                                                   // 110\n///////////////////////////////////////////////////////////////////////////////////////     // 119\n                                                                                            // 120\n}).call(this);                                                                              // 121\n                                                                                            // 122\n                                                                                            // 123\n                                                                                            // 124\n                                                                                            // 125\n                                                                                            // 126\n                                                                                            // 127\n(function () {                                                                              // 128\n                                                                                            // 129\n///////////////////////////////////////////////////////////////////////////////////////     // 130\n//                                                                                   //     // 131\n// packages/benjaminrh:user-session/client.js                                        //     // 132\n//                                                                                   //     // 133\n///////////////////////////////////////////////////////////////////////////////////////     // 134\n                                                                                     //     // 135\n// Subscribe to the user's session variables on the client                           // 1   // 136\nMeteor.subscribe('userSessionCollection');                                           // 2   // 137\n///////////////////////////////////////////////////////////////////////////////////////     // 138\n                                                                                            // 139\n}).call(this);                                                                              // 140\n                                                                                            // 141\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['benjaminrh:user-session'] = {}, {\n  UserSession: UserSession,\n  UserSessionCollection: UserSessionCollection\n});\n\n})();\n","servePath":"/packages/benjaminrh_user-session.js"}]