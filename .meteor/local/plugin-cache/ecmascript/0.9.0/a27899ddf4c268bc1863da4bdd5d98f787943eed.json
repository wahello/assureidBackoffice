{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["Events","TempEventImages"],"specifiers":[{"kind":"local","local":"Events","exported":"Events"},{"kind":"local","local":"TempEventImages","exported":"TempEventImages"}]}}},"options":{"filename":"imports/dashboard/reactCMS/api/Events.js","filenameRelative":"imports/dashboard/reactCMS/api/Events.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/reactCMS/api/Events.js.map","sourceFileName":"imports/dashboard/reactCMS/api/Events.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Events"},"ignored":false,"code":"module.export({\n  Events: function () {\n    return Events;\n  },\n  TempEventImages: function () {\n    return TempEventImages;\n  }\n});\nvar Mongo = void 0;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Events = new Mongo.Collection(\"events\");\nvar TempEventImages = new Mongo.Collection(\"tempEventImages\");\n\nif (Meteor.isServer) {\n  Meteor.publish('events', function () {\n    return Events.find({});\n  });\n  Meteor.publish('tempEventImages', function () {\n    return TempEventImages.find({});\n  });\n  Meteor.methods({\n    'uploadTempEventImages': function (id, amazonUrl, uploadTime) {\n      TempEventImages.insert({\n        'id': id,\n        'amazonUrl': amazonUrl,\n        'uploadTime': new Date(),\n        'authorUserId': id,\n        'submitted': false\n      });\n    },\n    'updateTempEventImages': function (_id, boolean) {\n      TempEventImages.update({\n        '_id': _id\n      }, {\n        $set: {\n          'submitted': boolean\n        }\n      });\n    },\n    'removeTempEventImages': function (id) {\n      TempEventImages.remove({\n        'id': id,\n        'submitted': true\n      });\n    },\n    'removeEventUnsubmitImages': function (id) {\n      TempEventImages.remove({\n        'id': id,\n        'submitted': false\n      });\n    },\n    'removeEventUrlImages': function (url) {\n      TempEventImages.remove({\n        'amazonUrl': url\n      });\n    },\n    'createEvent': function (eventName, eventVenue, eventTime, eventVideo, eventBody, s3, userId, updateTimestamp) {\n      console.log(s3);\n      Events.insert({\n        'eventName': eventName,\n        'eventVenue': eventVenue,\n        'eventTime': eventTime,\n        'eventVideo': eventVideo,\n        'eventBody': eventBody,\n        's3': s3,\n        'createdAt': new Date(),\n        'authorUserId': userId,\n        'lastModified': updateTimestamp\n      });\n    },\n    'updateEvent': function (id, eventName, eventVenue, eventTime, eventVideo, eventBody, userId, updateTimestamp) {\n      Events.update({\n        '_id': id\n      }, {\n        $set: {\n          'eventName': eventName,\n          'eventVenue': eventVenue,\n          'eventTime': eventTime,\n          'eventVideo': eventVideo,\n          'eventBody': eventBody,\n          'authorUserId': userId,\n          'lastModified': updateTimestamp //End of set\n\n        }\n      });\n    },\n    'updateEditEvent': function (amazonUrl) {\n      Events.update({\n        \"s3.amazonUrl\": amazonUrl\n      }, {\n        $set: {\n          's3.$.amazonUrl': \"\",\n          's3.$.uploadTime': \"\" //End of set\n\n        }\n      });\n    },\n    'updateEventAmazonUrl': function (amazonUrl, uploadTime, id) {\n      Events.update({\n        '_id': id\n      }, {\n        $push: {\n          's3': {\n            'amazonUrl': amazonUrl,\n            'uploadTime': uploadTime\n          }\n        }\n      });\n    },\n    'deleteEvent': function (id) {\n      Events.remove({\n        '_id': id\n      });\n    }\n  });\n}","map":{"version":3,"sources":["imports/dashboard/reactCMS/api/Events.js"],"names":["module","export","Events","TempEventImages","Mongo","watch","require","v","Meteor","Collection","isServer","publish","find","methods","id","amazonUrl","uploadTime","insert","Date","_id","boolean","update","$set","remove","url","eventName","eventVenue","eventTime","eventVideo","eventBody","s3","userId","updateTimestamp","console","log","$push"],"mappings":"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","file":"imports/dashboard/reactCMS/api/Events.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const Events = new Mongo.Collection(\"events\");\nexport const TempEventImages = new Mongo.Collection(\"tempEventImages\");\nif(Meteor.isServer){\n    Meteor.publish('events',()=>{\n        return Events.find({});\n    });\n    Meteor.publish('tempEventImages',()=>{\n        return TempEventImages.find({});\n    });\n\n    Meteor.methods({\n      'uploadTempEventImages':function(id,amazonUrl,uploadTime){\n    \t\tTempEventImages.insert({\n    \t\t\t'id'             : id,\n    \t\t\t'amazonUrl'      : amazonUrl,\n    \t\t\t'uploadTime'     : new Date(),\n          'authorUserId'   : id,\n          'submitted'       : false,\n    \t\t});\n    \t},\n      'updateTempEventImages':function(_id,boolean){\n    \t\tTempEventImages.update({\n    \t\t\t'_id'           : _id},\n          {$set:{\n    \t\t\t'submitted'      : boolean,\n    \t\t}});\n    \t},\n      'removeTempEventImages':function(id){\n        TempEventImages.remove({'id':id,'submitted':true});\n      },\n      'removeEventUnsubmitImages':function(id){\n        TempEventImages.remove({'id':id,'submitted':false});\n      },\n      'removeEventUrlImages':function(url){\n        TempEventImages.remove({'amazonUrl':url});\n      },\n    \t'createEvent':function(eventName,eventVenue,eventTime,eventVideo,eventBody,s3,userId,updateTimestamp){\n        console.log(s3);\n    \t\tEvents.insert({\n    \t\t\t'eventName'     : eventName,\n          'eventVenue'    : eventVenue,\n          'eventTime'     : eventTime,\n          'eventVideo'    : eventVideo,\n    \t\t\t'eventBody'     : eventBody,\n          's3'            : s3,\n    \t\t\t'createdAt'     : new Date(),\n          'authorUserId'  : userId,\n          'lastModified'  : updateTimestamp,\n    \t\t});\n    \t},\n      'updateEvent':function(id,eventName,eventVenue,eventTime,eventVideo,eventBody,userId,updateTimestamp){\n    \t\tEvents.update(\n    \t\t\t{ '_id': id },\n    \t        {\n    \t          $set:{\n                  'eventName'     : eventName,\n                  'eventVenue'    : eventVenue,\n                  'eventTime'     : eventTime,\n                  'eventVideo'    : eventVideo,\n            \t\t\t'eventBody'     : eventBody,\n                  'authorUserId'  : userId,\n                  'lastModified'  : updateTimestamp,\n    \t        } //End of set\n    \t      }\n    \t\t);\n    \t},\n      'updateEditEvent':function(amazonUrl){\n    \t\tEvents.update(\n    \t\t\t{ \"s3.amazonUrl\": amazonUrl },\n    \t        {\n    \t          $set:{\n\n                  's3.$.amazonUrl'   : \"\",\n                  's3.$.uploadTime'  : \"\",\n    \t        } //End of set\n    \t      }\n    \t\t);\n    \t},\n      'updateEventAmazonUrl':function(amazonUrl,uploadTime,id){\n    \t\tEvents.update(\n    \t\t\t   { '_id': id },\n    \t        {\n    \t          $push:{\n                    's3':\n                    {\n                      'amazonUrl': amazonUrl,\n                      'uploadTime':uploadTime,\n                    }\n    \t        }\n    \t      }\n    \t\t);\n    \t},\n      'deleteEvent':function(id){\n     \t\t Events.remove({'_id': id});\n\n    \t},\n    });\n}\n"]},"hash":"a27899ddf4c268bc1863da4bdd5d98f787943eed"}
