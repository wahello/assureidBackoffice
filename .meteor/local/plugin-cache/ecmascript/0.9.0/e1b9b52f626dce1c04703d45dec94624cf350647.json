{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["TicketMaster","TicketBucket","BADetails"],"specifiers":[{"kind":"local","local":"TicketMaster","exported":"TicketMaster"},{"kind":"local","local":"TicketBucket","exported":"TicketBucket"},{"kind":"local","local":"BADetails","exported":"BADetails"}]}}},"options":{"filename":"imports/website/ServiceProcess/api/TicketMaster.js","filenameRelative":"imports/website/ServiceProcess/api/TicketMaster.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/website/ServiceProcess/api/TicketMaster.js.map","sourceFileName":"imports/website/ServiceProcess/api/TicketMaster.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"TicketMaster"},"ignored":false,"code":"module.export({\n\tTicketMaster: () => TicketMaster,\n\tTicketBucket: () => TicketBucket,\n\tBADetails: () => BADetails\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n\tMongo(v) {\n\t\tMongo = v;\n\t}\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n\tMeteor(v) {\n\t\tMeteor = v;\n\t}\n\n}, 1);\nconst TicketMaster = new Mongo.Collection(\"ticketMaster\");\nconst TicketBucket = new Mongo.Collection(\"ticketbucket\");\nconst BADetails = new Mongo.Collection(\"badetails\");\n\nif (Meteor.isServer) {\n\tMeteor.publish('allTickets', () => {\n\t\treturn TicketMaster.find({});\n\t});\n\tMeteor.publish('singleTicket', _id => {\n\t\treturn TicketMaster.find({\n\t\t\t\"_id\": _id\n\t\t});\n\t});\n\tMeteor.publish('allTicketBucket', () => {\n\t\treturn TicketBucket.find({});\n\t});\n\tMeteor.methods({\n\t\t'createTicket': function (id, userId, serviceId, serviceName, totalAmount, paymentStatus, delieveryStatus) {\n\t\t\tvar ticketObj = TicketMaster.findOne({}, {\n\t\t\t\tsort: {\n\t\t\t\t\tcreatedAt: -1\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (ticketObj) {\n\t\t\t\t// var ticketNumber = parseInt(ticketObj.ticketNumber.);\n\t\t\t\t//  var last  = parseInt(ticketObj.ticketNumber.substr(ticketObj.ticketNumber.length - 6));\n\t\t\t\t//  var first = ticketObj.ticketNumber.substr(0, 1);\n\t\t\t\t// var ticket = 'AZ099998';\n\t\t\t\tvar first = ticketObj.ticketNumber.substr(0, 2);\n\t\t\t\tvar last = parseInt(ticketObj.ticketNumber.substr(ticketObj.ticketNumber.length - 6));\n\t\t\t\tlast = last + 1;\n\t\t\t\tvar last0 = '0';\n\n\t\t\t\tif (last > 0 && last < 11) {\n\t\t\t\t\tlast0 = '00000' + last;\n\n\t\t\t\t\tif (last == 10) {\n\t\t\t\t\t\tlast0 = '0000' + last;\n\t\t\t\t\t} /*working*/\n\t\t\t\t} else if (last > 10 && last < 101) {\n\t\t\t\t\tlast0 = '0000' + last;\n\n\t\t\t\t\tif (last == 100) {\n\t\t\t\t\t\tlast0 = '000' + last;\n\t\t\t\t\t} /*working*/\n\t\t\t\t} else if (last > 100 && last < 1001) {\n\t\t\t\t\tlast0 = '000' + last;\n\n\t\t\t\t\tif (last == 1000) {\n\t\t\t\t\t\tlast0 = '00' + last;\n\t\t\t\t\t} /*working*/\n\t\t\t\t} else if (last > 1000 && last < 10001) {\n\t\t\t\t\tlast0 = '00' + last;\n\n\t\t\t\t\tif (last == 10000) {\n\t\t\t\t\t\tlast0 = '0' + last;\n\t\t\t\t\t} /*working*/\n\t\t\t\t} else if (last > 10000 && last < 100001) {\n\t\t\t\t\tlast0 = '0' + last;\n\n\t\t\t\t\tif (last == 100000) {\n\t\t\t\t\t\tlast0 = '000000';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (last >= 100000) {\n\t\t\t\t\tlast0 = '000000';\n\t\t\t\t\tvar first2Char = first.substr(1, 1); /*second digit*/\n\t\t\t\t\tvar secondAscii = first2Char.charCodeAt(); /*second ascii*/\n\t\t\t\t\tvar firstChar = first.substr(0, 1); /*First char*/\n\n\t\t\t\t\tif (secondAscii == 90) {\n\t\t\t\t\t\tvar firstAscii = firstChar.charCodeAt() + 1;\n\t\t\t\t\t\tfirst = String.fromCharCode(firstAscii) + 'A';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar newsecond = secondAscii + 1;\n\t\t\t\t\t\tfirst = firstChar + '' + String.fromCharCode(newsecond);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar ticketNumber = first + '' + last0;\n\t\t\t} else {\n\t\t\t\tvar ticketNumber = 'AA000000';\n\t\t\t}\n\n\t\t\tvar ticketId = TicketMaster.insert({\n\t\t\t\t\"orderId\": id,\n\t\t\t\t\"userId\": userId,\n\t\t\t\t\"serviceId\": serviceId,\n\t\t\t\t\"serviceName\": serviceName,\n\t\t\t\t\"payment\": totalAmount,\n\t\t\t\t\"paymentStatus\": paymentStatus,\n\t\t\t\t\"ticketNumber\": ticketNumber,\n\t\t\t\t\"ticketStatus\": [delieveryStatus],\n\t\t\t\t\"createdAt\": new Date()\n\t\t\t}, (error, result) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn error;\n\t\t\t\t} else {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ticketId;\n\t\t},\n\t\t'updateTicket': function (ticketElem) {\n\t\t\tvar updateTicket = TicketMaster.update({\n\t\t\t\t'_id': ticketElem.ticketid\n\t\t\t}, {\n\t\t\t\t$push: {\n\t\t\t\t\tticketElement: {\n\t\t\t\t\t\t'staffId': ticketElem.staffId,\n\t\t\t\t\t\t'staffName': ticketElem.staffname,\n\t\t\t\t\t\t'staffRole': ticketElem.role,\n\t\t\t\t\t\t'roleTicketStatus': [{\n\t\t\t\t\t\t\t'ticketstatus': \"Accepted\",\n\t\t\t\t\t\t\t'createdOn': new Date()\n\t\t\t\t\t\t}]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tMeteor.call('updateOuterStatus', ticketElem);\n\t\t\treturn updateTicket;\n\t\t},\n\t\t'updateOuterStatus': function (ticketElem) {\n\t\t\tTicketMaster.update({\n\t\t\t\t'_id': ticketElem.ticketid\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\t\"ticketStatus.0.status\": \"Accepted\"\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t'addDocument': function (id, index, status, addressType) {\n\t\t\tif (addressType == \"Current Address\") {\n\t\t\t\tTicketMaster.update({\n\t\t\t\t\t'_id': id\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t[\"ticketElement.0.currentAddress.\" + index + \".status\"]: status,\n\t\t\t\t\t\t[\"ticketElement.0.currentAddress.\" + index + \".statusDate\"]: new Date()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (addressType == \"Permanent Address\") {\n\t\t\t\tTicketMaster.update({\n\t\t\t\t\t'_id': id\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t[\"ticketElement.0.permanentAddress.\" + index + \".status\"]: status,\n\t\t\t\t\t\t[\"ticketElement.0.permanentAddress.\" + index + \".statusDate\"]: new Date()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tTicketMaster.update({\n\t\t\t\t\t'_id': id\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t[\"ticketElement.0.currentAddress.\" + index + \".status\"]: status,\n\t\t\t\t\t\t[\"ticketElement.0.currentAddress.\" + index + \".statusDate\"]: new Date()\n\t\t\t\t\t}\n\t\t\t\t}), TicketMaster.update({\n\t\t\t\t\t'_id': id\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t[\"ticketElement.0.permanentAddress.\" + index + \".status\"]: status,\n\t\t\t\t\t\t[\"ticketElement.0.permanentAddress.\" + index + \".statusDate\"]: new Date()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t'updateTicketFinalStatus': function (id, status) {\n\t\t\treturn TicketMaster.update({\n\t\t\t\t'_id': id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\t'ticketStatus.0.status': status,\n\t\t\t\t\t'ticketStatus.0.createdAt': new Date()\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t'updateTicketBucket': function (ticket) {\n\t\t\t// console.log(\"Inside updateTicketBucket \");\n\t\t\t// console.log(ticket);\n\t\t\tTicketBucket.update({\n\t\t\t\t'ticketid': ticket.ticketid\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\t\"empid\": ticket.empID,\n\t\t\t\t\t\"role\": ticket.role,\n\t\t\t\t\t\"createdAt\": new Date()\n\t\t\t\t}\n\t\t\t}); // console.log(ticket.ticketid)\n\n\t\t\treturn ticket.ticketid;\n\t\t},\n\t\t'updateCommitteeUserCount': function (count, id) {\n\t\t\tMeteor.users.update({\n\t\t\t\t'_id': id\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\t'count': count\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t'updateTicketElement': function (ticketId, empid, role, permanentAddress, currentAddress) {\n\t\t\tconsole.log(\"Inside updateTicketElement\");\n\t\t\tconsole.log(ticketId, empid, role); // console.log(permanentAddress);\n\t\t\t// console.log(currentAddress);\n\n\t\t\tTicketMaster.update({\n\t\t\t\t'_id': ticketId\n\t\t\t}, {\n\t\t\t\t$push: {\n\t\t\t\t\t'ticketElement': {\n\t\t\t\t\t\t'empid': empid,\n\t\t\t\t\t\t'role': role,\n\t\t\t\t\t\t'role_status': 'Accepted',\n\t\t\t\t\t\t'createdAt': new Date(),\n\t\t\t\t\t\t'permanentAddress': permanentAddress,\n\t\t\t\t\t\t'currentAddress': currentAddress\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tTicketMaster.update({\n\t\t\t\t'_id': ticketId\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\t'ticketStatus.0.status': \"Accepted\",\n\t\t\t\t\t'ticketStatus.0.role': \"team leader\",\n\t\t\t\t\t'ticketStatus.0.createdAt': new Date()\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t'allocateToTeamMember': function (ticketId, firstName, lastName, allocateToMemberDetails) {\n\t\t\tvar teamMemberDetails = Meteor.users.findOne({\n\t\t\t\t'profile.firstname': firstName,\n\t\t\t\t'profile.lastname': lastName\n\t\t\t});\n\t\t\tTicketMaster.update({\n\t\t\t\t'_id': ticketId\n\t\t\t}, {\n\t\t\t\t$push: {\n\t\t\t\t\t'ticketElement': {\n\t\t\t\t\t\t'empid': teamMemberDetails._id,\n\t\t\t\t\t\t'role': \"team member\",\n\t\t\t\t\t\t'role_status': 'New',\n\t\t\t\t\t\t'createdAt': new Date(),\n\t\t\t\t\t\t'permanentAddress': allocateToMemberDetails.permanentAddress,\n\t\t\t\t\t\t'currentAddress': allocateToMemberDetails.currentAddress\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tTicketMaster.update({\n\t\t\t\t'_id': ticketId\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\t// 'ticketElement.2.permanentAddress.status':\"New\",\n\t\t\t\t\t// 'ticketElement.2.permanentAddress.statusDate': new Date(),\n\t\t\t\t\t'ticketElement.1.role_status': \"Allocated\",\n\t\t\t\t\t'ticketElement.1.createdAt': new Date(),\n\t\t\t\t\t'ticketElement.1.allocatedTo': firstName + \" \" + lastName\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t'updateTMStatus': function (ticketId, addressType, status) {\n\t\t\tconsole.log(ticketId, addressType, status);\n\n\t\t\tif (addressType == \"permanentAddress\" && status == \"Accepted\") {\n\t\t\t\tTicketMaster.update({\n\t\t\t\t\t'_id': ticketId\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t'ticketElement.2.permanentAddress.status': status,\n\t\t\t\t\t\t'ticketElement.2.permanentAddress.createdAt': new Date()\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (addressType == \"currentAddress\" && status == \"Accepted\") {\n\t\t\t\tTicketMaster.update({\n\t\t\t\t\t'_id': ticketId\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t'ticketElement.2.currentAddress.status': status,\n\t\t\t\t\t\t'ticketElement.2.currentAddress.createdAt': new Date() // 'ticketElement.2.currentAddress.Remark':\"\"\n\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (addressType == \"currentAddress\" && status == \"Rejected\") {\n\t\t\t\tTicketMaster.update({\n\t\t\t\t\t'_id': ticketId\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t'ticketElement.2.currentAddress.status': status,\n\t\t\t\t\t\t'ticketElement.2.currentAddress.createdAt': new Date(),\n\t\t\t\t\t\t'ticketElement.2.currentAddress.Remark': \"\"\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tTicketMaster.update({\n\t\t\t\t\t'_id': ticketId\n\t\t\t\t}, {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t'ticketElement.2.permanentAddress.status': status,\n\t\t\t\t\t\t'ticketElement.2.permanentAddress.createdAt': new Date(),\n\t\t\t\t\t\t'ticketElement.2.permanentAddress.Remark': \"\"\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tTicketMaster.update({\n\t\t\t\t'_id': ticketId\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\t'ticketElement.2.role_status': \"Accepted\",\n\t\t\t\t\t'ticketElement.2.createdAt': new Date()\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t'addBADetails': function (BAName) {\n\t\t\tvar badetails = BADetails.insert({\n\t\t\t\t'BAName': BAName\n\t\t\t});\n\t\t\treturn badetails;\n\t\t}\n\t});\n}","map":{"version":3,"sources":["imports/website/ServiceProcess/api/TicketMaster.js"],"names":["module","export","TicketMaster","TicketBucket","BADetails","Mongo","watch","require","v","Meteor","Collection","isServer","publish","find","_id","methods","id","userId","serviceId","serviceName","totalAmount","paymentStatus","delieveryStatus","ticketObj","findOne","sort","createdAt","first","ticketNumber","substr","last","parseInt","length","last0","first2Char","secondAscii","charCodeAt","firstChar","firstAscii","String","fromCharCode","newsecond","ticketId","insert","Date","error","result","ticketElem","updateTicket","update","ticketid","$push","ticketElement","staffId","staffname","role","call","$set","index","status","addressType","ticket","empID","count","users","empid","permanentAddress","currentAddress","console","log","firstName","lastName","allocateToMemberDetails","teamMemberDetails","BAName","badetails"],"mappings":"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","file":"imports/website/ServiceProcess/api/TicketMaster.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const TicketMaster = new Mongo.Collection(\"ticketMaster\");\nexport const TicketBucket = new Mongo.Collection(\"ticketbucket\");\nexport const BADetails = new Mongo.Collection(\"badetails\");\n\nif(Meteor.isServer){\n\tMeteor.publish('allTickets',()=>{\n        return TicketMaster.find({});\n\t});\n\tMeteor.publish('singleTicket',(_id)=>{\n        return TicketMaster.find({\"_id\" : _id});\n\t});\n\n\tMeteor.publish('allTicketBucket',()=>{\n        return TicketBucket.find({});\n\t});\n\t\n\tMeteor.methods({\n   \t 'createTicket':function(id,userId,serviceId,serviceName,totalAmount,paymentStatus,delieveryStatus) {\n   \t \t   var ticketObj = TicketMaster.findOne({}, {sort: { createdAt : -1}});\n\t\t\t    if(ticketObj){\n\t\t\t      // var ticketNumber = parseInt(ticketObj.ticketNumber.);\n\t\t\t     //  var last  = parseInt(ticketObj.ticketNumber.substr(ticketObj.ticketNumber.length - 6));\n\t\t\t     //  var first = ticketObj.ticketNumber.substr(0, 1);\n\t\t\t\t    // var ticket = 'AZ099998';\n\t\t\t\t    var first = ticketObj.ticketNumber.substr(0, 2);\n\t\t\t\t    var last  = parseInt(ticketObj.ticketNumber.substr(ticketObj.ticketNumber.length - 6));\n\t\t\t\t\t  last = last + 1;\n\t\t\t\t    var last0 = '0';\n\t\t\t\t    if(last > 0 && last < 11) \n\t\t\t\t    {\n\t\t\t\t    \tlast0 = '00000' + last;\n\t\t\t\t        if(last == 10){last0 = '0000' + last;} /*working*/\n\t\t\t\t    }else if(last > 10 && last < 101){\n\t\t\t\t    \tlast0 = '0000' + last;\n\t\t\t\t        if(last == 100){last0 = '000' + last;}/*working*/\n\t\t\t\t    }else if(last > 100 && last < 1001){\n\t\t\t\t    \tlast0 = '000' + last;\n\t\t\t\t        if(last == 1000){last0 = '00' + last;}/*working*/\n\t\t\t\t    }else if(last > 1000 && last < 10001){\n\t\t\t\t    \tlast0 = '00' + last;\n\t\t\t\t        if(last == 10000){last0 = '0' + last;}/*working*/\n\t\t\t\t    }else if(last > 10000 && last < 100001){\n\t\t\t\t    \tlast0 = '0' + last;\n\t\t\t\t        if(last == 100000){last0 = '000000';}\n\t\t\t\t    }\n\t\t\t\t    if(last >= 100000){\n\t\t\t\t    \tlast0 = '000000';\n\t\t\t\t        var first2Char = first.substr(1,1); /*second digit*/\n\t\t\t\t        var secondAscii = first2Char.charCodeAt(); /*second ascii*/\n\t\t\t\t        var firstChar = first.substr(0,1); /*First char*/\n\t\t\t\t        if(secondAscii == 90){\n\t\t\t\t        \tvar firstAscii = firstChar.charCodeAt() + 1;\n\t\t\t\t          first = String.fromCharCode(firstAscii) + 'A';\n\t\t\t\t        }else {\n\t\t\t\t        \tvar newsecond = secondAscii + 1;\n\t\t\t\t          first = firstChar +''+ String.fromCharCode(newsecond);\n\t\t\t\t        }\n\t\t\t\t        \n\t\t\t\t    }\n\t\t\t\t    var ticketNumber = first+''+last0;\t\t\t   \n\t       }else{\n\t\t\t      var ticketNumber = 'AA000000';\n\t\t\t   }\n\t\t\t   var ticketId  = TicketMaster.insert({\n   \t      \t  \"orderId\"          :   id,\n   \t      \t  \"userId\"           :   userId,\n   \t      \t  \"serviceId\"        :   serviceId,\n              \"serviceName\"      :   serviceName,\n              \"payment\"          :   totalAmount,\n              \"paymentStatus\"    :   paymentStatus,\n              \"ticketNumber\"     :   ticketNumber,\n              \"ticketStatus\"     :  [delieveryStatus],\n              \"createdAt\"        :   new Date(),\n   \t      },(error, result)=>{\n             if (error) {\n                return error;\n             }else{\n             \t return result;\n             }\n          });\n\t\t\t  return ticketId;\n\t\t},    \n\t\t\n\n\t\t'updateTicket':function(ticketElem){\n\t\t\tvar updateTicket = TicketMaster.update(\n\t\t\t\t{'_id':ticketElem.ticketid},\n\t\t\t\t{$push:{\n\t\t\t\t\t\tticketElement:{\n\t\t\t\t\t\t'staffId'  : ticketElem.staffId,\n\t\t\t\t\t\t'staffName': ticketElem.staffname,\n\t\t\t\t\t\t'staffRole': ticketElem.role,\n\t\t\t\t\t\t'roleTicketStatus':[{\n\t\t\t\t\t\t\t'ticketstatus':\"Accepted\",\n\t\t\t\t\t\t\t'createdOn'   : new Date(),\n\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tMeteor.call('updateOuterStatus',ticketElem);\n\t\t\treturn updateTicket;\n\t\t\t\n\t\t},\n\n\t\t'updateOuterStatus':function(ticketElem){\n\t\t\tTicketMaster.update(\n\t\t\t{'_id':ticketElem.ticketid},\n\t\t\t{   $set:{\n\t\t\t\t\t\"ticketStatus.0.status\":\"Accepted\",\n\t\t\t\t}\n\t\t\t}\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t'addDocument':function(id,index,status,addressType){\n\t\t\n\t\t\tif(addressType == \"Current Address\"){\n\t\t\t\tTicketMaster.update(\n\t\t\t\t\t{'_id':id},\n\t\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\t\t[\"ticketElement.0.currentAddress.\"+index+\".status\"]:status,\n\t\t\t\t\t\t\t\t[\"ticketElement.0.currentAddress.\"+index+\".statusDate\"] : new Date(),\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}else if(addressType == \"Permanent Address\"){\n\t\t\t\tTicketMaster.update(\n\t\t\t\t\t{'_id':id},\n\t\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\t\t[\"ticketElement.0.permanentAddress.\"+index+\".status\"]:status,\n\t\t\t\t\t\t\t\t[\"ticketElement.0.permanentAddress.\"+index+\".statusDate\"] : new Date(),\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}else{\n\n\t\t\t\tTicketMaster.update(\n\t\t\t\t\t{'_id':id},\n\t\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\t\t[\"ticketElement.0.currentAddress.\"+index+\".status\"]:status,\n\t\t\t\t\t\t\t\t[\"ticketElement.0.currentAddress.\"+index+\".statusDate\"] : new Date(),\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\n\t\t\t\tTicketMaster.update(\n\t\t\t\t\t{'_id':id},\n\t\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\t\t[\"ticketElement.0.permanentAddress.\"+index+\".status\"]:status,\n\t\t\t\t\t\t\t\t[\"ticketElement.0.permanentAddress.\"+index+\".statusDate\"] : new Date(),\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t},\n\t\t'updateTicketFinalStatus':function(id,status){\n\t\t\treturn TicketMaster.update(\n\t\t\t\t{'_id':id},\n\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\t'ticketStatus.0.status':status,\n\t\t\t\t\t\t\t'ticketStatus.0.createdAt': new Date(),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t},\n\t\t'updateTicketBucket':function(ticket){\n\t\t\t// console.log(\"Inside updateTicketBucket \");\n\t\t\t// console.log(ticket);\n\t\t\t TicketBucket.update(\n\t\t\t\t{'ticketid':ticket.ticketid},\n\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\"empid\"    : ticket.empID,\n\t\t\t\t\t\t\"role\"     : ticket.role,\n\t\t\t\t\t\t\"createdAt\" : new Date(),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t\t// console.log(ticket.ticketid)\n\t\t\treturn ticket.ticketid;\n\t\t},\n\n\n\t\t'updateCommitteeUserCount':function(count,id){\n\t\t\tMeteor.users.update(\n\t\t\t\t{'_id':id},\n\t\t\t\t{$set:{\n\t\t\t\t\t'count':count\n\t\t\t\t}}\n\t\t\t\n\t\t\t)\n\t\t},\n\n\t\t'updateTicketElement':function(ticketId,empid,role,permanentAddress,currentAddress){\n\t\t\tconsole.log(\"Inside updateTicketElement\");\n\t\t\tconsole.log(ticketId,empid,role);\n\t\t\t// console.log(permanentAddress);\n\t\t\t// console.log(currentAddress);\n\t\t\tTicketMaster.update(\n\t\t\t\t{'_id':ticketId},\n\t\t\t\t{   $push:{\n\t\t\t\t\t\t'ticketElement':{\n\t\t\t\t\t\t\t'empid': empid,\n\t\t\t\t\t\t\t'role' : role,\n\t\t\t\t\t\t\t'role_status':'Accepted',\n\t\t\t\t\t\t\t'createdAt': new Date(),\n\t\t\t\t\t\t\t'permanentAddress' : permanentAddress,\n\t\t\t\t\t\t\t'currentAddress'   : currentAddress,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\n\t\t\tTicketMaster.update(\n\t\t\t\t{'_id':ticketId},\n\t\t\t\t{   $set:{\n\t\t\t\t\t\t'ticketStatus.0.status': \"Accepted\",\t\t\t\t\t\n\t\t\t\t\t\t'ticketStatus.0.role': \"team leader\",\n\t\t\t\t\t\t'ticketStatus.0.createdAt': new Date()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t},\n\n\t\t'allocateToTeamMember':function(ticketId,firstName,lastName,allocateToMemberDetails){\n\t\t\tvar teamMemberDetails = Meteor.users.findOne({'profile.firstname':firstName,'profile.lastname':lastName})\n\t\t\tTicketMaster.update(\n\t\t\t\t{'_id':ticketId},\n\t\t\t\t{   $push:{\n\t\t\t\t\t\t'ticketElement':{\n\t\t\t\t\t\t\t'empid': teamMemberDetails._id,\n\t\t\t\t\t\t\t'role' : \"team member\",\n\t\t\t\t\t\t\t'role_status':'New',\n\t\t\t\t\t\t\t'createdAt': new Date(),\n\t\t\t\t\t\t\t'permanentAddress' : allocateToMemberDetails.permanentAddress,\n\t\t\t\t\t\t\t'currentAddress'   : allocateToMemberDetails.currentAddress,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\n\t\t\tTicketMaster.update(\n\t\t\t\t{'_id':ticketId},\n\t\t\t\t{   $set:{\n\t\t\t\t\t\t// 'ticketElement.2.permanentAddress.status':\"New\",\n\t\t\t\t\t\t// 'ticketElement.2.permanentAddress.statusDate': new Date(),\n\t\t\t\t\t\t'ticketElement.1.role_status': \"Allocated\",\t\t\t\t\t\n\t\t\t\t\t\t'ticketElement.1.createdAt': new Date(),\n\t\t\t\t\t\t'ticketElement.1.allocatedTo': firstName+\" \"+lastName,\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\n\t\t},\n\n\t\t'updateTMStatus':function(ticketId,addressType,status){\n\t\t\tconsole.log(ticketId,addressType,status);\n\t\t\tif((addressType==\"permanentAddress\") && (status==\"Accepted\")){\n\t\t\t\tTicketMaster.update(\n\t\t\t\t\t{'_id':ticketId},\n\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t'ticketElement.2.permanentAddress.status': status,\t\t\t\t\t\n\t\t\t\t\t\t\t'ticketElement.2.permanentAddress.createdAt': new Date(),\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}else if((addressType==\"currentAddress\") && (status==\"Accepted\")){\n\t\t\t\tTicketMaster.update(\n\t\t\t\t\t{'_id':ticketId},\n\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t'ticketElement.2.currentAddress.status': status,\t\t\t\t\t\n\t\t\t\t\t\t'ticketElement.2.currentAddress.createdAt': new Date(),\n\t\t\t\t\t\t\t// 'ticketElement.2.currentAddress.Remark':\"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}else if((addressType==\"currentAddress\") && (status==\"Rejected\")){\n\t\t\t\tTicketMaster.update(\n\t\t\t\t\t{'_id':ticketId},\n\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t'ticketElement.2.currentAddress.status': status,\t\t\t\t\t\n\t\t\t\t\t\t'ticketElement.2.currentAddress.createdAt': new Date(),\n\t\t\t\t\t\t'ticketElement.2.currentAddress.Remark':\"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}else{\n\t\t\t\tTicketMaster.update(\n\t\t\t\t\t{'_id':ticketId},\n\t\t\t\t\t{   $set:{\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t'ticketElement.2.permanentAddress.status': status,\t\t\t\t\t\n\t\t\t\t\t\t'ticketElement.2.permanentAddress.createdAt': new Date(),\n\t\t\t\t\t\t'ticketElement.2.permanentAddress.Remark':\"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tTicketMaster.update(\n\t\t\t\t{'_id':ticketId},\n\t\t\t\t{   $set:{\n\t\t\t\t\t\t\n\t\t\t\t\t\t'ticketElement.2.role_status': \"Accepted\",\t\t\t\t\t\n\t\t\t\t\t\t'ticketElement.2.createdAt': new Date(),\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t},\n\n\t\t'addBADetails':function(BAName){\n\n\t\t\tvar badetails = BADetails.insert({\n\t\t\t\t'BAName':BAName,\n\t\t\t});\n\t\t\treturn badetails;\n\t\t},\n\n\t\t\n\t\n\t  });\n\n\n}"]},"hash":"e1b9b52f626dce1c04703d45dec94624cf350647"}
