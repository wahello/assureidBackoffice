{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/ejson","imported":["EJSON"],"specifiers":[{"kind":"named","imported":"EJSON","local":"EJSON"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/ostrio:cookies","imported":["Cookies"],"specifiers":[{"kind":"named","imported":"Cookies","local":"Cookies"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/ostrio:cookies/cookies-tests.js","filenameRelative":"packages/ostrio:cookies/cookies-tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ostrio:cookies/cookies-tests.js.map","sourceFileName":"packages/ostrio:cookies/cookies-tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"cookies-tests"},"ignored":false,"code":"var EJSON = void 0;\nmodule.watch(require(\"meteor/ejson\"), {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Cookies = void 0;\nmodule.watch(require(\"meteor/ostrio:cookies\"), {\n  Cookies: function (v) {\n    Cookies = v;\n  }\n}, 2);\nvar WebApp = void 0;\n\nif (Meteor.isServer) {\n  WebApp = require('meteor/webapp').WebApp;\n}\n\nif (Meteor.isClient) {\n  var cookies = new Cookies();\n  Tinytest.add('From Server to Client', function (test) {\n    test.equal(cookies.get('FORCLIENT'), '_form_server_to_client_tests_');\n  });\n  Tinytest.add('cookies: set() - empty value', function (test) {\n    var testVal = void 0;\n    var setRes = cookies.set('testCookieEmpty', testVal);\n    test.isFalse(setRes);\n    test.equal(cookies.get('testCookieEmpty'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() - String', function (test) {\n    var testVal = 'this is test value';\n    var setRes = cookies.set('testCookie', testVal);\n    test.isTrue(setRes);\n    test.equal(cookies.get('testCookie'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() / has() - Unicode', function (test) {\n    var testVal = '⦶';\n    var setRes = cookies.set('⦁', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('⦁'));\n    test.isFalse(cookies.has('⦁⦁⦁'));\n    test.equal(cookies.get('⦁'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() / has() - Unicode 2', function (test) {\n    var testVal = '小飼弾\\n小飼弾';\n    var setRes = cookies.set('小飼弾', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('小飼弾'));\n    test.equal(cookies.get('小飼弾'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() / has() - Cyrillic', function (test) {\n    var testVal = 'йцукен\\nнекуцй';\n    var setRes = cookies.set('фывфыв', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('фывфыв'));\n    test.equal(cookies.get('фывфыв'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() / has() - FALSE', function (test) {\n    var testVal = false;\n    var setRes = cookies.set('testFalse', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('testFalse'));\n    test.equal(cookies.get('testFalse'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() / has() - TRUE', function (test) {\n    var testVal = true;\n    var setRes = cookies.set('testTrue', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('testTrue'));\n    test.equal(cookies.get('testTrue'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() / has() - NULL', function (test) {\n    var testVal = null;\n    var setRes = cookies.set('testNull', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('testNull'));\n    test.equal(cookies.get('testNull'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() - Object', function (test) {\n    var testVal = {\n      key: '1',\n      key2: {\n        key1: 1,\n        key2: false,\n        key3: [true, false]\n      }\n    };\n    var setRes = cookies.set('testObject', testVal);\n    test.isTrue(setRes);\n    test.equal(cookies.get('testObject'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() - Array', function (test) {\n    var testVal = [true, false, null, {\n      key1: 1,\n      key2: false,\n      key3: [true, false]\n    }, [1, 2, 3, '4', '5']];\n    var setRes = cookies.set('testArray', testVal);\n    test.isTrue(setRes);\n    test.equal(cookies.get('testArray'), testVal);\n  });\n  Tinytest.add('cookies: set() / get() / has() - no key', function (test) {\n    test.isFalse(cookies.set());\n    test.isUndefined(cookies.get());\n    test.isFalse(cookies.has());\n  });\n  Tinytest.add('cookies: get() / has() - from custom string', function (test) {\n    var testVal = 'customCookieVal';\n    var cookie = \"customCookie=\" + testVal + \"; \";\n    test.equal(cookies.get('customCookie', cookie), testVal);\n    test.equal(cookies.get('asd', cookie), undefined);\n    test.isTrue(cookies.has('customCookie', cookie));\n    test.isFalse(cookies.has('asd', cookie));\n  });\n  Tinytest.add('cookies: get() - non existent cookie', function (test) {\n    test.isUndefined(cookies.get('1234567890321-asdfghjk'));\n  });\n  Tinytest.add('cookies: remove() - non existent cookie', function (test) {\n    var removeRes = cookies.remove('1234567890asdfghjk');\n    test.isFalse(removeRes);\n  });\n  Tinytest.add('cookies: keys() / has() / remove() - String', function (test) {\n    cookies.remove();\n    cookies.set('testCookieOne', 'One');\n    cookies.set('testCookieTwo', 'Two');\n    test.equal(cookies.keys(), ['testCookieOne', 'testCookieTwo']);\n    test.isTrue(cookies.has('testCookieOne'));\n    test.isTrue(cookies.has('testCookieTwo'));\n    var removeRes = cookies.remove('testCookieOne');\n    test.isTrue(removeRes);\n    test.isFalse(cookies.has('testCookieOne'));\n    test.isTrue(cookies.has('testCookieTwo'));\n  });\n  Tinytest.add('cookies: remove() - all', function (test) {\n    var removeRes = cookies.remove();\n    test.isTrue(removeRes);\n    test.equal(cookies.keys(), []);\n    removeRes = cookies.remove();\n    test.isFalse(removeRes);\n  });\n  Tinytest.addAsync('cookies: send(callback) - empty', function (test, next) {\n    cookies.send(function () {\n      test.isTrue(true);\n      next();\n    });\n  });\n  Tinytest.add('Server test - see in console', function () {});\n  Tinytest.add('From Client to Server', function () {\n    cookies.set('FORSERVERTEST', '_form_client_to_server_tests_');\n    cookies.send();\n  });\n  Tinytest.addAsync('cookies: send(callback) - default', function (test, next) {\n    cookies.send(function () {\n      test.isTrue(true);\n      next();\n    });\n  });\n} else {\n  var tester = function (one, two, testname) {\n    if (EJSON.equals(one, two)) {\n      console.info(\"[\" + testname + \"] PASSED\");\n    } else {\n      console.warn(\"[\" + testname + \"] Failed\", \"Expected: \" + JSON.stringify(two), \"Got: \" + JSON.stringify(one));\n    }\n  };\n\n  var cookie = new Cookies({\n    auto: false,\n    handler: function (cookies) {\n      tester(cookies.get('FORSERVERTEST'), '_form_client_to_server_tests_', 'From Client to Server [First Time should FAIL]');\n\n      (function () {\n        var testVal = '⦶';\n        var setRes = cookies.set('⦁', testVal);\n        tester(setRes, true, 'Unicode .set()', cookies);\n        tester(cookies.has('⦁'), true, 'Unicode .has()', cookies);\n        tester(cookies.has('⦁⦁⦁'), false, 'Unicode .has() non-existent', cookies);\n        tester(cookies.get('⦁'), testVal, 'Unicode .get()', cookies);\n      })();\n\n      (function () {\n        var testVal = '小飼弾\\n小飼弾';\n        var setRes = cookies.set('小飼弾', testVal);\n        tester(setRes, true, 'Unicode 2 .set()', cookies);\n        tester(cookies.has('小飼弾'), true, 'Unicode 2 .has()', cookies);\n        tester(cookies.get('小飼弾'), testVal, 'Unicode 2 .get()', cookies);\n      })();\n\n      (function () {\n        var testVal = 'йцукен\\nнекуцй';\n        var setRes = cookies.set('фывфыв', testVal);\n        tester(setRes, true, 'Cyrillic .set()', cookies);\n        tester(cookies.has('фывфыв'), true, 'Cyrillic .has()', cookies);\n        tester(cookies.get('фывфыв'), testVal, 'Cyrillic .get()', cookies);\n      })();\n\n      (function () {\n        var testVal = void 0;\n        var setRes = cookies.set('testCookieEmpty', testVal);\n        tester(setRes, false, 'test empty value', cookies);\n        tester(cookies.get('testCookieEmpty'), testVal, 'test empty value', cookies);\n      })();\n\n      (function () {\n        var testVal = 'this is test value';\n        var setRes = cookies.set('testCookie', testVal);\n        tester(setRes, true, 'cookies.set', cookies);\n        tester(cookies.get('testCookie'), testVal, 'cookies.get', cookies);\n      })();\n\n      (function () {\n        tester(cookies.set(), false, 'cookies.set()', cookies);\n        tester(cookies.get(), undefined, 'cookies.get()', cookies);\n        tester(cookies.has(), false, 'cookies.has()', cookies);\n      })();\n\n      (function () {\n        var testVal = 'customCookieVal';\n\n        var _cookie = \"customCookie=\" + testVal + \"; \";\n\n        tester(cookies.get('customCookie', _cookie), testVal, \"cookies.get('customCookie')\", cookies);\n        tester(cookies.get('asd', _cookie), undefined, \"cookies.get('asd')\", cookies);\n        tester(cookies.has('customCookie', _cookie), true, \"cookies.has('customCookie')\", cookies);\n        tester(cookies.has('asd', _cookie), false, \"cookies.has('asd')\", cookies);\n      })();\n\n      (function () {\n        var removeRes = cookies.remove('1234567890asdfghjk');\n        tester(removeRes, false, \"cookies.remove('1234567890asdfghjk')\", cookies);\n      })();\n\n      (function () {\n        tester(cookies.get('1234567890asdfghjk'), undefined, \"cookies.get('1234567890asdfghjk')\", cookies);\n      })();\n\n      (function () {\n        cookies.remove();\n        cookies.set('testCookieOne', 'One');\n        cookies.set('testCookieTwo', 'Two');\n        tester(cookies.keys(), ['testCookieOne', 'testCookieTwo'], 'cookies.keys()', cookies);\n        tester(cookies.has('testCookieOne'), true, \"cookies.has('testCookieOne')\", cookies);\n        tester(cookies.has('testCookieTwo'), true, \"cookies.has('testCookieTwo')\", cookies);\n        var removeRes = cookies.remove('testCookieOne');\n        tester(removeRes, true, \"cookies.remove('testCookieOne')\", cookies);\n        tester(cookies.has('testCookieOne'), false, \"cookies.has('testCookieOne')\", cookies);\n        tester(cookies.has('testCookieTwo'), true, \"cookies.has('testCookieTwo')\", cookies);\n      })();\n\n      (function () {\n        var removeRes = cookies.remove();\n        tester(removeRes, true, 'cookies.remove()', cookies);\n        tester(cookies.keys(), [], 'cookies.keys()', cookies);\n        removeRes = cookies.remove();\n        tester(removeRes, false, 'cookies.remove()', cookies);\n      })();\n\n      cookies.set('FORCLIENT', '_form_server_to_client_tests_');\n    }\n  });\n  WebApp.connectHandlers.use(cookie.middleware());\n}","map":{"version":3,"sources":["packages/ostrio:cookies/cookies-tests.js"],"names":["EJSON","module","watch","require","v","Meteor","Cookies","WebApp","isServer","isClient","cookies","Tinytest","add","test","equal","get","testVal","setRes","set","isFalse","isTrue","has","key","key2","key1","key3","isUndefined","cookie","undefined","removeRes","remove","keys","addAsync","next","send","tester","one","two","testname","equals","console","info","warn","JSON","stringify","auto","handler","_cookie","connectHandlers","use","middleware"],"mappings":"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","file":"packages/ostrio:cookies/cookies-tests.js.map","sourcesContent":["import { EJSON } from 'meteor/ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { Cookies } from 'meteor/ostrio:cookies';\n\nlet WebApp;\n\nif (Meteor.isServer) {\n  WebApp = require('meteor/webapp').WebApp;\n}\n\nif(Meteor.isClient){\n  const cookies = new Cookies();\n\n  Tinytest.add('From Server to Client', test => {\n    test.equal(cookies.get('FORCLIENT'), '_form_server_to_client_tests_');\n  });\n\n  Tinytest.add('cookies: set() - empty value', test => {\n    const testVal = void 0;\n    const setRes = cookies.set('testCookieEmpty', testVal);\n    test.isFalse(setRes);\n    test.equal(cookies.get('testCookieEmpty'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() - String', test => {\n    const testVal = 'this is test value';\n    const setRes = cookies.set('testCookie', testVal);\n    test.isTrue(setRes);\n    test.equal(cookies.get('testCookie'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() / has() - Unicode', function (test) {\n    const testVal = '⦶';\n    const setRes = cookies.set('⦁', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('⦁'));\n    test.isFalse(cookies.has('⦁⦁⦁'));\n    test.equal(cookies.get('⦁'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() / has() - Unicode 2', function (test) {\n    const testVal = '小飼弾\\n小飼弾';\n    const setRes = cookies.set('小飼弾', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('小飼弾'));\n    test.equal(cookies.get('小飼弾'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() / has() - Cyrillic', function (test) {\n    const testVal = 'йцукен\\nнекуцй';\n    const setRes = cookies.set('фывфыв', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('фывфыв'));\n    test.equal(cookies.get('фывфыв'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() / has() - FALSE', test => {\n    const testVal = false;\n    const setRes = cookies.set('testFalse', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('testFalse'));\n    test.equal(cookies.get('testFalse'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() / has() - TRUE', test => {\n    const testVal = true;\n    const setRes = cookies.set('testTrue', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('testTrue'));\n    test.equal(cookies.get('testTrue'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() / has() - NULL', test => {\n    const testVal = null;\n    const setRes = cookies.set('testNull', testVal);\n    test.isTrue(setRes);\n    test.isTrue(cookies.has('testNull'));\n    test.equal(cookies.get('testNull'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() - Object', test => {\n    const testVal = {key: '1', key2: {key1: 1, key2: false, key3: [true, false]}};\n    const setRes = cookies.set('testObject', testVal);\n    test.isTrue(setRes);\n    test.equal(cookies.get('testObject'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() - Array', test => {\n    const testVal = [true, false, null, {key1: 1, key2: false, key3: [true, false]}, [1, 2, 3, '4', '5']];\n    const setRes = cookies.set('testArray', testVal);\n    test.isTrue(setRes);\n    test.equal(cookies.get('testArray'), testVal);\n  });\n\n  Tinytest.add('cookies: set() / get() / has() - no key', test => {\n    test.isFalse(cookies.set());\n    test.isUndefined(cookies.get());\n    test.isFalse(cookies.has());\n  });\n\n  Tinytest.add('cookies: get() / has() - from custom string', test => {\n    const testVal = 'customCookieVal';\n    const cookie = `customCookie=${testVal}; `;\n    test.equal(cookies.get('customCookie', cookie), testVal);\n    test.equal(cookies.get('asd', cookie), undefined);\n    test.isTrue(cookies.has('customCookie', cookie));\n    test.isFalse(cookies.has('asd', cookie));\n  });\n\n  Tinytest.add('cookies: get() - non existent cookie', test => {\n    test.isUndefined(cookies.get('1234567890321-asdfghjk'));\n  });\n\n  Tinytest.add('cookies: remove() - non existent cookie', test => {\n    const removeRes = cookies.remove('1234567890asdfghjk');\n    test.isFalse(removeRes);\n  });\n\n\n  Tinytest.add('cookies: keys() / has() / remove() - String', test => {\n    cookies.remove();\n\n    cookies.set('testCookieOne', 'One');\n    cookies.set('testCookieTwo', 'Two');\n\n    test.equal(cookies.keys(), ['testCookieOne', 'testCookieTwo']);\n\n    test.isTrue(cookies.has('testCookieOne'));\n    test.isTrue(cookies.has('testCookieTwo'));\n\n    const removeRes = cookies.remove('testCookieOne');\n    test.isTrue(removeRes);\n\n    test.isFalse(cookies.has('testCookieOne'));\n    test.isTrue(cookies.has('testCookieTwo'));\n  });\n\n  Tinytest.add('cookies: remove() - all', test => {\n    let removeRes = cookies.remove();\n    test.isTrue(removeRes);\n    test.equal(cookies.keys(), []);\n\n    removeRes = cookies.remove();\n    test.isFalse(removeRes);\n  });\n\n  Tinytest.addAsync('cookies: send(callback) - empty', (test, next) => {\n    cookies.send(() => {\n      test.isTrue(true);\n      next();\n    });\n  });\n\n  Tinytest.add('Server test - see in console', () => {});\n\n  Tinytest.add('From Client to Server', () => {\n    cookies.set('FORSERVERTEST', '_form_client_to_server_tests_');\n    cookies.send();\n  });\n\n  Tinytest.addAsync('cookies: send(callback) - default', (test, next) => {\n    cookies.send(() => {\n      test.isTrue(true);\n      next();\n    });\n  });\n} else {\n  const tester = (one, two, testname) => {\n    if(EJSON.equals(one, two)){\n      console.info(`[${testname}] PASSED`);\n    }else{\n      console.warn(`[${testname}] Failed`, `Expected: ${JSON.stringify(two)}`, `Got: ${JSON.stringify(one)}`);\n    }\n  };\n\n  const cookie = new Cookies({\n    auto: false,\n    handler(cookies) {\n      tester(cookies.get('FORSERVERTEST'), '_form_client_to_server_tests_', 'From Client to Server [First Time should FAIL]');\n\n      (() => {\n        const testVal = '⦶';\n        const setRes = cookies.set('⦁', testVal);\n        tester(setRes, true, 'Unicode .set()', cookies);\n        tester(cookies.has('⦁'), true, 'Unicode .has()', cookies);\n        tester(cookies.has('⦁⦁⦁'), false, 'Unicode .has() non-existent', cookies);\n        tester(cookies.get('⦁'), testVal, 'Unicode .get()', cookies);\n      })();\n\n      (() => {\n        const testVal = '小飼弾\\n小飼弾';\n        const setRes = cookies.set('小飼弾', testVal);\n        tester(setRes, true, 'Unicode 2 .set()', cookies);\n        tester(cookies.has('小飼弾'), true, 'Unicode 2 .has()', cookies);\n        tester(cookies.get('小飼弾'), testVal, 'Unicode 2 .get()', cookies);\n      })();\n\n      (() => {\n        const testVal = 'йцукен\\nнекуцй';\n        const setRes = cookies.set('фывфыв', testVal);\n        tester(setRes, true, 'Cyrillic .set()', cookies);\n        tester(cookies.has('фывфыв'), true, 'Cyrillic .has()', cookies);\n        tester(cookies.get('фывфыв'), testVal, 'Cyrillic .get()', cookies);\n      })();\n\n      (() => {\n        const testVal = void 0;\n        const setRes = cookies.set('testCookieEmpty', testVal);\n        tester(setRes, false, 'test empty value', cookies);\n        tester(cookies.get('testCookieEmpty'), testVal, 'test empty value', cookies);\n      })();\n\n      (() => {\n        const testVal = 'this is test value';\n        const setRes = cookies.set('testCookie', testVal);\n        tester(setRes, true, 'cookies.set', cookies);\n        tester(cookies.get('testCookie'), testVal, 'cookies.get', cookies);\n      })();\n\n      (() => {\n        tester(cookies.set(), false, 'cookies.set()', cookies);\n        tester(cookies.get(), undefined, 'cookies.get()', cookies);\n        tester(cookies.has(), false, 'cookies.has()', cookies);\n      })();\n\n      (() => {\n        const testVal = 'customCookieVal';\n        const _cookie = `customCookie=${testVal}; `;\n        tester(cookies.get('customCookie', _cookie), testVal, \"cookies.get('customCookie')\", cookies);\n        tester(cookies.get('asd', _cookie), undefined, \"cookies.get('asd')\", cookies);\n        tester(cookies.has('customCookie', _cookie), true, \"cookies.has('customCookie')\", cookies);\n        tester(cookies.has('asd', _cookie), false, \"cookies.has('asd')\", cookies);\n      })();\n\n\n      (() => {\n        const removeRes = cookies.remove('1234567890asdfghjk');\n        tester(removeRes, false, \"cookies.remove('1234567890asdfghjk')\", cookies);\n      })();\n\n      (() => {\n        tester(cookies.get('1234567890asdfghjk'), undefined, \"cookies.get('1234567890asdfghjk')\", cookies);\n      })();\n\n      (() => {\n        cookies.remove();\n\n        cookies.set('testCookieOne', 'One');\n        cookies.set('testCookieTwo', 'Two');\n\n        tester(cookies.keys(), ['testCookieOne', 'testCookieTwo'], 'cookies.keys()', cookies);\n\n        tester(cookies.has('testCookieOne'), true, \"cookies.has('testCookieOne')\", cookies);\n        tester(cookies.has('testCookieTwo'), true, \"cookies.has('testCookieTwo')\", cookies);\n\n        const removeRes = cookies.remove('testCookieOne');\n        tester(removeRes, true, \"cookies.remove('testCookieOne')\", cookies);\n\n        tester(cookies.has('testCookieOne'), false, \"cookies.has('testCookieOne')\", cookies);\n        tester(cookies.has('testCookieTwo'), true, \"cookies.has('testCookieTwo')\", cookies);\n      })();\n\n      (() => {\n        let removeRes = cookies.remove();\n        tester(removeRes, true, 'cookies.remove()', cookies);\n        tester(cookies.keys(), [], 'cookies.keys()', cookies);\n\n        removeRes = cookies.remove();\n        tester(removeRes, false, 'cookies.remove()', cookies);\n      })();\n\n      cookies.set('FORCLIENT', '_form_server_to_client_tests_');\n    }\n  });\n\n  WebApp.connectHandlers.use(cookie.middleware());\n}\n"]},"hash":"10823950aa0dbdf8fa95397e0ac25968a4316f1f"}
