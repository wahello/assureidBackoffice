{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["CompanySettings"],"specifiers":[{"kind":"local","local":"CompanySettings","exported":"CompanySettings"}]}}},"options":{"filename":"imports/dashboard/companySetting/api/CompanySettingMaster.js","filenameRelative":"imports/dashboard/companySetting/api/CompanySettingMaster.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/companySetting/api/CompanySettingMaster.js.map","sourceFileName":"imports/dashboard/companySetting/api/CompanySettingMaster.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"CompanySettingMaster"},"ignored":false,"code":"module.export({\n  CompanySettings: function () {\n    return CompanySettings;\n  }\n});\nvar Mongo = void 0;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar CompanySettings = new Mongo.Collection('companySetting');\n\nif (Meteor.isServer) {\n  Meteor.publish('companyData', function () {\n    function companyData() {\n      return CompanySettings.find({});\n    }\n\n    return companyData;\n  }());\n}\n\nMeteor.methods({\n  'insertCompanyInfo': function (companyInfoFormValue) {\n    //Insert into collection \n    if (companyInfoFormValue.logoFilename == '') {\n      var logoFilename = '';\n    } else {\n      var logoFilename = companyInfoFormValue.logoFilename;\n    }\n\n    var count = CompanySettings.find({\n      'companyId': 1\n    }).count();\n\n    if (count) {\n      CompanySettings.update({\n        \"companyId\": 1\n      }, {\n        $set: {\n          \"companyName\": companyInfoFormValue.companyName,\n          \"companyContactNumber\": companyInfoFormValue.companyContactNumber,\n          \"companyMobileNumber\": companyInfoFormValue.companyMobileNumber,\n          \"companyEmail\": companyInfoFormValue.companyEmail,\n          \"companyAltEmail\": companyInfoFormValue.companyAltEmail,\n          \"logoFilename\": logoFilename,\n          \"companyUniqueID\": companyInfoFormValue.companyUniqueID,\n          \"companyLogo\": companyInfoFormValue.companyLogo,\n          \"companyLocationsInfo\": [{\n            \"mainLocation\": \"Headoffice\",\n            \"companyAddress\": companyInfoFormValue.companyAddress,\n            \"companyPincode\": companyInfoFormValue.companyPincode,\n            \"companyCity\": companyInfoFormValue.companyCity,\n            \"companyState\": companyInfoFormValue.companyState,\n            \"companyCountry\": companyInfoFormValue.companyCountry\n          }]\n        }\n      });\n    } else {\n      CompanySettings.insert({\n        \"companyId\": 1,\n        \"companyName\": companyInfoFormValue.companyName,\n        \"companyContactNumber\": companyInfoFormValue.companyContactNumber,\n        \"companyMobileNumber\": companyInfoFormValue.companyMobileNumber,\n        \"companyEmail\": companyInfoFormValue.companyEmail,\n        \"companyAltEmail\": companyInfoFormValue.companyAltEmail,\n        \"logoFilename\": logoFilename,\n        \"companyUniqueID\": companyInfoFormValue.companyUniqueID,\n        \"companyLogo\": companyInfoFormValue.companyLogo,\n        \"companyLocationsInfo\": [{\n          \"mainLocation\": \"Headoffice\",\n          \"companyAddress\": companyInfoFormValue.companyAddress,\n          \"companyPincode\": companyInfoFormValue.companyPincode,\n          \"companyCity\": companyInfoFormValue.companyCity,\n          \"companyState\": companyInfoFormValue.companyState,\n          \"companyCountry\": companyInfoFormValue.companyCountry\n        }]\n      });\n    }\n\n    Meteor.call('tempLogoImageDelete', companyInfoFormValue.logoFilename);\n  },\n  'insertCompanyLocations': function (companyLocationFormValue) {\n    var userId = CompanySettings.findOne({\n      \"companyId\": 1\n    });\n\n    if (userId) {\n      CompanySettings.update({\n        \"companyId\": 1\n      }, {\n        $push: {\n          companyLocationsInfo: {\n            companyLocation: companyLocationFormValue.companyLocation,\n            companyAddress: companyLocationFormValue.companyAddress,\n            companyPincode: companyLocationFormValue.companyPincode,\n            companyCity: companyLocationFormValue.companyCity,\n            companyState: companyLocationFormValue.companyState,\n            companyCountry: companyLocationFormValue.companyCountry\n          }\n        }\n      });\n    }\n  },\n  removeCompanyLocation: function (targetedID) {\n    var _$unset;\n\n    CompanySettings.update({\n      'companyId': 1\n    }, {\n      $unset: (_$unset = {}, _$unset['companyLocationsInfo.' + targetedID] = 1, _$unset)\n    });\n    CompanySettings.update({\n      'companyId': 1\n    }, {\n      $pull: {\n        'companyLocationsInfo': null\n      }\n    });\n  },\n  'updateCompanyLocations': function (companyLocationFormValue) {\n    var companyData = CompanySettings.findOne({\n      \"companyId\": 1\n    });\n\n    if (companyData) {\n      CompanySettings.update({\n        '_id': companyData._id,\n        'companyLocationsInfo.companyAddress': companyLocationFormValue.companyAddress\n      }, {\n        $set: {\n          'companyLocationsInfo.$.companyLocation': companyLocationFormValue.companyLocation,\n          'companyLocationsInfo.$.companyAddress': companyLocationFormValue.companyAddress,\n          'companyLocationsInfo.$.companyPincode': companyLocationFormValue.companyPincode,\n          'companyLocationsInfo.$.companyCity': companyLocationFormValue.companyCity,\n          'companyLocationsInfo.$.companyState': companyLocationFormValue.companyState,\n          'companyLocationsInfo.$.companyCountry': companyLocationFormValue.companyCountry\n        }\n      });\n    }\n  },\n  'updateBankDetails': function (companyBankDetailsFormValue) {\n    var companyData = CompanySettings.findOne({\n      \"companyId\": 1\n    });\n\n    if (companyData) {\n      CompanySettings.update({\n        '_id': companyData._id,\n        'bankDetails.ifscCode': companyBankDetailsFormValue.ifscCode\n      }, {\n        $set: {\n          'bankDetails.$.accHolderName': companyBankDetailsFormValue.accHolderName,\n          'bankDetails.$.bankName': companyBankDetailsFormValue.bankName,\n          'bankDetails.$.branchName': companyBankDetailsFormValue.branchName,\n          'bankDetails.$.accNumber': companyBankDetailsFormValue.accNumber,\n          'bankDetails.$.ifscCode': companyBankDetailsFormValue.ifscCode\n        }\n      });\n    } //end of if companyData\n\n  },\n  removeBankDetails: function (targetedID) {\n    var _$unset2;\n\n    CompanySettings.update({\n      'companyId': 1\n    }, {\n      $unset: (_$unset2 = {}, _$unset2['bankDetails.' + targetedID] = 1, _$unset2)\n    });\n    CompanySettings.update({\n      'companyId': 1\n    }, {\n      $pull: {\n        'bankDetails': null\n      }\n    });\n  },\n  'insertCompanyBankDetails': function (companyBankDetailsFormValue) {\n    var companyData = CompanySettings.findOne({\n      \"companyId\": 1\n    });\n\n    if (companyData) {\n      CompanySettings.update({\n        '_id': companyData._id\n      }, {\n        $push: {\n          bankDetails: {\n            accHolderName: companyBankDetailsFormValue.accHolderName,\n            bankName: companyBankDetailsFormValue.bankName,\n            branchName: companyBankDetailsFormValue.branchName,\n            accNumber: companyBankDetailsFormValue.accNumber,\n            ifscCode: companyBankDetailsFormValue.ifscCode\n          }\n        }\n      });\n    } //end of if companyData\n\n  },\n  'insertTaxSettings': function (taxSettingsFormValue) {\n    // Refer http://stackoverflow.com/questions/7556591/javascript-date-object-always-one-day-off\n    //First find previous day of FromDate. \n    //Update Previous Record for same TaxType. Put ToDate = 1 Day prior to FromDate\n    var userId = CompanySettings.findOne({\n      \"companyId\": 1\n    });\n\n    if (userId) {\n      var fromDate1 = taxSettingsFormValue.effectiveFrom.replace(/-/g, '\\/');\n      var toDateForPreviousRecordISOFormat = new Date(new Date(fromDate1) - 24 * 60 * 60 * 1000);\n      var formateddate = new Date(toDateForPreviousRecordISOFormat); //Convert ISO Date in to only date format 2016-06-11\n\n      var toDateForPreviousRecord = formateddate.getFullYear() + '-' + (formateddate.getMonth() + 1) + '-' + formateddate.getDate();\n      var queryResult = CompanySettings.find({\n        '_id': userId._id,\n        'taxSettings.taxType': taxSettingsFormValue.taxType,\n        'taxSettings.effectiveTo': ''\n      }).count();\n\n      if (queryResult) {\n        CompanySettings.update({\n          'taxSettings': {\n            $elemMatch: {\n              'taxType': taxSettingsFormValue.taxType,\n              'effectiveTo': \"\"\n            }\n          }\n        }, {\n          $set: {\n            'taxSettings.$.effectiveTo': toDateForPreviousRecord\n          }\n        });\n        CompanySettings.update({\n          '_id': userId._id\n        }, {\n          $push: {\n            taxSettings: {\n              taxType: taxSettingsFormValue.taxType,\n              applicableTax: taxSettingsFormValue.applicableTax,\n              effectiveFrom: taxSettingsFormValue.effectiveFrom,\n              effectiveTo: '',\n              createdAt: new Date()\n            }\n          }\n        });\n      } else {\n        CompanySettings.update({\n          '_id': userId._id\n        }, {\n          $push: {\n            taxSettings: {\n              taxType: taxSettingsFormValue.taxType,\n              applicableTax: taxSettingsFormValue.applicableTax,\n              effectiveFrom: taxSettingsFormValue.effectiveFrom,\n              effectiveTo: '',\n              createdAt: new Date()\n            }\n          }\n        });\n      }\n    }\n  },\n  removeTaxDetails: function (targetedID) {\n    var _$unset3;\n\n    CompanySettings.update({\n      'companyId': 1\n    }, {\n      $unset: (_$unset3 = {}, _$unset3['taxSettings.' + targetedID] = 1, _$unset3)\n    });\n    CompanySettings.update({\n      'companyId': 1\n    }, {\n      $pull: {\n        'taxSettings': null\n      }\n    });\n  },\n  'updatetaxSettings': function (taxSettingsFormValue, targetedID) {\n    var companyData = CompanySettings.findOne({\n      \"companyId\": 1\n    });\n\n    if (companyData) {\n      var _$set;\n\n      var fromDate1 = taxSettingsFormValue.effectiveFrom.replace(/-/g, '\\/');\n      var toDateForPreviousRecordISOFormat = new Date(new Date(fromDate1) - 24 * 60 * 60 * 1000);\n      var formateddate = new Date(toDateForPreviousRecordISOFormat);\n      var toDateForPreviousRecord = formateddate.getFullYear() + '-' + (formateddate.getMonth() + 1) + '-' + formateddate.getDate();\n      var queryResult = CompanySettings.find({\n        '_id': companyData._id,\n        'taxSettings.taxType': taxSettingsFormValue.taxType\n      }).count();\n      CompanySettings.update({\n        '_id': companyData._id,\n        'taxSettings.taxType': taxSettingsFormValue.taxType\n      }, {\n        $set: (_$set = {}, _$set['taxSettings.' + targetedID + '.taxType'] = taxSettingsFormValue.taxType, _$set['taxSettings.' + targetedID + '.applicableTax'] = taxSettingsFormValue.applicableTax, _$set['taxSettings.' + targetedID + '.effectiveFrom'] = taxSettingsFormValue.effectiveFrom, _$set)\n      });\n    }\n  }\n});","map":{"version":3,"sources":["imports/dashboard/companySetting/api/CompanySettingMaster.js"],"names":["module","export","CompanySettings","Mongo","watch","require","v","Meteor","Collection","isServer","publish","companyData","find","methods","companyInfoFormValue","logoFilename","count","update","$set","companyName","companyContactNumber","companyMobileNumber","companyEmail","companyAltEmail","companyUniqueID","companyLogo","companyAddress","companyPincode","companyCity","companyState","companyCountry","insert","call","companyLocationFormValue","userId","findOne","$push","companyLocationsInfo","companyLocation","removeCompanyLocation","targetedID","$unset","$pull","_id","companyBankDetailsFormValue","ifscCode","accHolderName","bankName","branchName","accNumber","removeBankDetails","bankDetails","taxSettingsFormValue","fromDate1","effectiveFrom","replace","toDateForPreviousRecordISOFormat","Date","formateddate","toDateForPreviousRecord","getFullYear","getMonth","getDate","queryResult","taxType","$elemMatch","taxSettings","applicableTax","effectiveTo","createdAt","removeTaxDetails"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,mBAAgB;AAAA,WAAIA,eAAJ;AAAA;AAAjB,CAAd;AAAqD,IAAIC,cAAJ;AAAUH,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACF,OAAD,YAAOG,CAAP,EAAS;AAACH,YAAMG,CAAN;AAAQ;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,eAAJ;AAAWP,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,QAAD,YAAQD,CAAR,EAAU;AAACC,aAAOD,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAG/H,IAAMJ,kBAAkB,IAAIC,MAAMK,UAAV,CAAqB,gBAArB,CAAxB;;AAEP,IAAGD,OAAOE,QAAV,EAAmB;AAEjBF,SAAOG,OAAP,CAAe,aAAf;AAA6B,aAASC,WAAT,GAAsB;AAC/C,aAAOT,gBAAgBU,IAAhB,CAAqB,EAArB,CAAP;AACH;;AAFD,WAAsCD,WAAtC;AAAA;AAID;;AAEDJ,OAAOM,OAAP,CAAe;AAEb,uBAAoB,UAASC,oBAAT,EAA8B;AAChD;AAEA,QAAGA,qBAAqBC,YAArB,IAAqC,EAAxC,EAA2C;AACzC,UAAIA,eAAe,EAAnB;AACD,KAFD,MAEK;AACH,UAAIA,eAAeD,qBAAqBC,YAAxC;AACD;;AAED,QAAIC,QAAQd,gBAAgBU,IAAhB,CAAqB;AAAC,mBAAY;AAAb,KAArB,EAAsCI,KAAtC,EAAZ;;AAEE,QAAGA,KAAH,EAAS;AACTd,sBAAgBe,MAAhB,CACA;AAAC,qBAAiB;AAAlB,OADA,EAEA;AAACC,cACC;AACE,yBAAyBJ,qBAAqBK,WADhD;AAEE,kCAAyBL,qBAAqBM,oBAFhD;AAGE,iCAAyBN,qBAAqBO,mBAHhD;AAIE,0BAAyBP,qBAAqBQ,YAJhD;AAKE,6BAAyBR,qBAAqBS,eALhD;AAME,0BAAyBR,YAN3B;AAOE,6BAAyBD,qBAAqBU,eAPhD;AAQE,yBAAyBV,qBAAqBW,WARhD;AASE,kCAAyB,CAAC;AACF,4BAAqB,YADnB;AAEF,8BAAqBX,qBAAqBY,cAFxC;AAGF,8BAAqBZ,qBAAqBa,cAHxC;AAIF,2BAAqBb,qBAAqBc,WAJxC;AAKF,4BAAqBd,qBAAqBe,YALxC;AAMF,8BAAqBf,qBAAqBgB;AANxC,WAAD;AAT3B;AADF,OAFA;AAwBD,KAzBC,MAyBG;AACH5B,sBAAgB6B,MAAhB,CAAuB;AACrB,qBAAyB,CADJ;AAErB,uBAAyBjB,qBAAqBK,WAFzB;AAGrB,gCAAyBL,qBAAqBM,oBAHzB;AAIrB,+BAAyBN,qBAAqBO,mBAJzB;AAKrB,wBAAyBP,qBAAqBQ,YALzB;AAMrB,2BAAyBR,qBAAqBS,eANzB;AAOrB,wBAAyBR,YAPJ;AAQrB,2BAAyBD,qBAAqBU,eARzB;AASrB,uBAAyBV,qBAAqBW,WATzB;AAUrB,gCAAyB,CAAC;AACA,0BAAqB,YADrB;AAEA,4BAAqBX,qBAAqBY,cAF1C;AAGA,4BAAqBZ,qBAAqBa,cAH1C;AAIA,yBAAqBb,qBAAqBc,WAJ1C;AAKA,0BAAqBd,qBAAqBe,YAL1C;AAMA,4BAAqBf,qBAAqBgB;AAN1C,SAAD;AAVJ,OAAvB;AAmBD;;AACDvB,WAAOyB,IAAP,CAAY,qBAAZ,EAAkClB,qBAAqBC,YAAvD;AAGD,GA9DY;AAgEb,4BAAyB,UAASkB,wBAAT,EAAkC;AACvD,QAAIC,SAAShC,gBAAgBiC,OAAhB,CAAwB;AAAC,mBAAc;AAAf,KAAxB,CAAb;;AACA,QAAGD,MAAH,EAAU;AACRhC,sBAAgBe,MAAhB,CAAuB;AAAC,qBAAc;AAAf,OAAvB,EACE;AAACmB,eAAM;AAAEC,gCAAuB;AAC5BC,6BAAiBL,yBAAyBK,eADd;AAE5BZ,4BAAiBO,yBAAyBP,cAFd;AAG5BC,4BAAiBM,yBAAyBN,cAHd;AAI5BC,yBAAiBK,yBAAyBL,WAJd;AAK5BC,0BAAiBI,yBAAyBJ,YALd;AAM5BC,4BAAiBG,yBAAyBH;AANd;AAAzB;AAAP,OADF;AAYD;AAEJ,GAjFY;AAkFbS,yBAAuB,UAASC,UAAT,EAAoB;AAAA;;AACvCtC,oBAAgBe,MAAhB,CAAuB;AAAC,mBAAa;AAAd,KAAvB,EAAyC;AAACwB,qCAAW,0BAAwBD,UAAnC,IAAiD,CAAjD;AAAD,KAAzC;AACAtC,oBAAgBe,MAAhB,CAAuB;AAAC,mBAAa;AAAd,KAAvB,EAAyC;AAACyB,aAAQ;AAAC,gCAAyB;AAA1B;AAAT,KAAzC;AAEH,GAtFY;AAwFb,4BAAyB,UAAST,wBAAT,EAAkC;AACzD,QAAItB,cAAcT,gBAAgBiC,OAAhB,CAAwB;AAAC,mBAAc;AAAf,KAAxB,CAAlB;;AAEA,QAAGxB,WAAH,EAAe;AACbT,sBAAgBe,MAAhB,CAAuB;AAAC,eAAQN,YAAYgC,GAArB;AAA0B,+CAAsCV,yBAAyBP;AAAzF,OAAvB,EACI;AAACR,cAAM;AACH,oDAA0Ce,yBAAyBK,eADhE;AAEH,mDAA0CL,yBAAyBP,cAFhE;AAGH,mDAA0CO,yBAAyBN,cAHhE;AAIH,gDAA0CM,yBAAyBL,WAJhE;AAKH,iDAA0CK,yBAAyBJ,YALhE;AAMH,mDAA0CI,yBAAyBH;AANhE;AAAP,OADJ;AAaD;AAGF,GA5GY;AA8Gb,uBAAoB,UAASc,2BAAT,EAAqC;AAEvD,QAAIjC,cAAcT,gBAAgBiC,OAAhB,CAAwB;AAAC,mBAAc;AAAf,KAAxB,CAAlB;;AACA,QAAGxB,WAAH,EAAe;AAEbT,sBAAgBe,MAAhB,CAAuB;AAAC,eAAON,YAAYgC,GAApB;AAAwB,gCAAuBC,4BAA4BC;AAA3E,OAAvB,EACE;AAAC3B,cAAK;AACJ,yCAA8B0B,4BAA4BE,aADtD;AAEJ,oCAA6BF,4BAA4BG,QAFrD;AAGJ,sCAA+BH,4BAA4BI,UAHvD;AAIJ,qCAA6BJ,4BAA4BK,SAJrD;AAKJ,oCAA6BL,4BAA4BC;AALrD;AAAN,OADF;AAWD,KAhBsD,CAgBrD;;AACH,GA/HY;AAiIbK,qBAAmB,UAASV,UAAT,EAAoB;AAAA;;AACnCtC,oBAAgBe,MAAhB,CAAuB;AAAC,mBAAa;AAAd,KAAvB,EAAyC;AAACwB,uCAAW,iBAAeD,UAA1B,IAAwC,CAAxC;AAAD,KAAzC;AACAtC,oBAAgBe,MAAhB,CAAuB;AAAC,mBAAa;AAAd,KAAvB,EAAyC;AAACyB,aAAQ;AAAC,uBAAgB;AAAjB;AAAT,KAAzC;AAED,GArIU;AAwIb,8BAA2B,UAASE,2BAAT,EAAqC;AAG9D,QAAIjC,cAAcT,gBAAgBiC,OAAhB,CAAwB;AAAC,mBAAc;AAAf,KAAxB,CAAlB;;AACA,QAAGxB,WAAH,EAAe;AACXT,sBAAgBe,MAAhB,CAAuB;AAAC,eAAON,YAAYgC;AAApB,OAAvB,EACE;AAACP,eAAM;AAAEe,uBAAc;AACnBL,2BAAgBF,4BAA4BE,aADzB;AAEnBC,sBAAgBH,4BAA4BG,QAFzB;AAGnBC,wBAAgBJ,4BAA4BI,UAHzB;AAInBC,uBAAgBL,4BAA4BK,SAJzB;AAKnBJ,sBAAgBD,4BAA4BC;AALzB;AAAhB;AAAP,OADF;AAWH,KAhB6D,CAgB5D;;AACH,GAzJY;AA4Jb,uBAAoB,UAASO,oBAAT,EAA8B;AAGhD;AAEA;AACA;AACA,QAAIlB,SAAShC,gBAAgBiC,OAAhB,CAAwB;AAAC,mBAAc;AAAf,KAAxB,CAAb;;AACA,QAAGD,MAAH,EAAU;AACR,UAAImB,YAAYD,qBAAqBE,aAArB,CAAmCC,OAAnC,CAA2C,IAA3C,EAAiD,IAAjD,CAAhB;AACA,UAAIC,mCAAmC,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,CAASJ,SAAT,IAAuB,KAAG,EAAH,GAAM,EAAN,GAAS,IAAzC,CAAvC;AACA,UAAIK,eAAe,IAAID,IAAJ,CAASD,gCAAT,CAAnB,CAHQ,CAKR;;AACA,UAAIG,0BAA0BD,aAAaE,WAAb,KAA2B,GAA3B,IAAkCF,aAAaG,QAAb,KAAwB,CAA1D,IAA+D,GAA/D,GAAmEH,aAAaI,OAAb,EAAjG;AACA,UAAIC,cAAc7D,gBAAgBU,IAAhB,CAAqB;AAAC,eAAOsB,OAAOS,GAAf;AACjC,+BAA4BS,qBAAqBY,OADhB;AAEjC,mCAA4B;AAFK,OAArB,EAEsBhD,KAFtB,EAAlB;;AAKE,UAAG+C,WAAH,EAAe;AACf7D,wBAAgBe,MAAhB,CAAuB;AAAC,yBACV;AACEgD,wBACA;AACE,yBAAYb,qBAAqBY,OADnC;AAEI,6BAAgB;AAFpB;AAFF;AADS,SAAvB,EASE;AAAC9C,gBAAK;AACF,yCAA8ByC;AAD5B;AAAN,SATF;AAgBAzD,wBAAgBe,MAAhB,CAAuB;AAAC,iBAAOiB,OAAOS;AAAf,SAAvB,EACE;AAACP,iBAAM;AAAE8B,yBAAa;AAElBF,uBAAgBZ,qBAAqBY,OAFnB;AAGlBG,6BAAgBf,qBAAqBe,aAHnB;AAIlBb,6BAAgBF,qBAAqBE,aAJnB;AAKlBc,2BAAgB,EALE;AAMlBC,yBAAgB,IAAIZ,IAAJ;AANE;AAAf;AAAP,SADF;AAaD,OA9BC,MA8BG;AAEHvD,wBAAgBe,MAAhB,CAAuB;AAAC,iBAAOiB,OAAOS;AAAf,SAAvB,EACE;AAACP,iBAAM;AAAE8B,yBAAa;AAElBF,uBAAgBZ,qBAAqBY,OAFnB;AAGlBG,6BAAgBf,qBAAqBe,aAHnB;AAIlBb,6BAAgBF,qBAAqBE,aAJnB;AAKlBc,2BAAgB,EALE;AAMlBC,yBAAgB,IAAIZ,IAAJ;AANE;AAAf;AAAP,SADF;AAYD;AACA;AACF,GA9NU;AAgOXa,oBAAkB,UAAS9B,UAAT,EAAoB;AAAA;;AACjCtC,oBAAgBe,MAAhB,CAAuB;AAAC,mBAAa;AAAd,KAAvB,EAAyC;AAACwB,uCAAW,iBAAeD,UAA1B,IAAwC,CAAxC;AAAD,KAAzC;AACAtC,oBAAgBe,MAAhB,CAAuB;AAAC,mBAAa;AAAd,KAAvB,EAAyC;AAACyB,aAAQ;AAAC,uBAAgB;AAAjB;AAAT,KAAzC;AAEF,GApOQ;AAuOX,uBAAoB,UAASU,oBAAT,EAA8BZ,UAA9B,EAAyC;AAE3D,QAAI7B,cAAcT,gBAAgBiC,OAAhB,CAAwB;AAAC,mBAAc;AAAf,KAAxB,CAAlB;;AACA,QAAGxB,WAAH,EAAe;AAAA;;AACb,UAAI0C,YAAYD,qBAAqBE,aAArB,CAAmCC,OAAnC,CAA2C,IAA3C,EAAiD,IAAjD,CAAhB;AACA,UAAIC,mCAAmC,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,CAASJ,SAAT,IAAuB,KAAG,EAAH,GAAM,EAAN,GAAS,IAAzC,CAAvC;AACA,UAAIK,eAAe,IAAID,IAAJ,CAASD,gCAAT,CAAnB;AAEA,UAAIG,0BAA0BD,aAAaE,WAAb,KAA2B,GAA3B,IAAkCF,aAAaG,QAAb,KAAwB,CAA1D,IAA+D,GAA/D,GAAmEH,aAAaI,OAAb,EAAjG;AACA,UAAIC,cAAc7D,gBAAgBU,IAAhB,CAAqB;AAAC,eAAOD,YAAYgC,GAApB;AACjC,+BAAwBS,qBAAqBY;AADZ,OAArB,EAC4ChD,KAD5C,EAAlB;AAIAd,sBAAgBe,MAAhB,CAAuB;AAAC,eAAON,YAAYgC,GAApB;AAAyB,+BAAsBS,qBAAqBY;AAApE,OAAvB,EACE;AAAC9C,iCACI,iBAAesB,UAAf,GAA0B,UAD9B,IACiDY,qBAAqBY,OADtE,QAEI,iBAAexB,UAAf,GAA0B,gBAF9B,IAEkDY,qBAAqBe,aAFvE,QAGI,iBAAe3B,UAAf,GAA0B,gBAH9B,IAGkDY,qBAAqBE,aAHvE;AAAD,OADF;AAWD;AACJ;AAhQY,CAAf","file":"imports/dashboard/companySetting/api/CompanySettingMaster.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nexport const CompanySettings = new Mongo.Collection('companySetting');\n\nif(Meteor.isServer){\n\n  Meteor.publish('companyData',function companyData(){\n      return CompanySettings.find({});\n  }); \n  \n}\n\nMeteor.methods({\n\n  'insertCompanyInfo':function(companyInfoFormValue){\n    //Insert into collection \n\n    if(companyInfoFormValue.logoFilename == ''){\n      var logoFilename = '';\n    }else{\n      var logoFilename = companyInfoFormValue.logoFilename;\n    }\n    \n    var count = CompanySettings.find({'companyId':1}).count();\n\n      if(count){\n      CompanySettings.update(\n      {\"companyId\"    : 1},\n      {$set:\n        {\n          \"companyName\"          : companyInfoFormValue.companyName,\n          \"companyContactNumber\" : companyInfoFormValue.companyContactNumber,\n          \"companyMobileNumber\"  : companyInfoFormValue.companyMobileNumber,\n          \"companyEmail\"         : companyInfoFormValue.companyEmail,\n          \"companyAltEmail\"      : companyInfoFormValue.companyAltEmail,\n          \"logoFilename\"         : logoFilename,\n          \"companyUniqueID\"      : companyInfoFormValue.companyUniqueID,\n          \"companyLogo\"          : companyInfoFormValue.companyLogo,\n          \"companyLocationsInfo\" : [{\n                                  \"mainLocation\"     : \"Headoffice\",\n                                  \"companyAddress\"   : companyInfoFormValue.companyAddress,\n                                  \"companyPincode\"   : companyInfoFormValue.companyPincode,\n                                  \"companyCity\"      : companyInfoFormValue.companyCity,\n                                  \"companyState\"     : companyInfoFormValue.companyState,\n                                  \"companyCountry\"   : companyInfoFormValue.companyCountry,\n                                  }],\n        }\n      }\n\n    );\n    }else{\n      CompanySettings.insert({\n        \"companyId\"            : 1,\n        \"companyName\"          : companyInfoFormValue.companyName,\n        \"companyContactNumber\" : companyInfoFormValue.companyContactNumber,\n        \"companyMobileNumber\"  : companyInfoFormValue.companyMobileNumber,\n        \"companyEmail\"         : companyInfoFormValue.companyEmail,\n        \"companyAltEmail\"      : companyInfoFormValue.companyAltEmail,\n        \"logoFilename\"         : logoFilename,\n        \"companyUniqueID\"      : companyInfoFormValue.companyUniqueID,\n        \"companyLogo\"          : companyInfoFormValue.companyLogo,\n        \"companyLocationsInfo\" : [{\n                                  \"mainLocation\"     : \"Headoffice\",\n                                  \"companyAddress\"   : companyInfoFormValue.companyAddress,\n                                  \"companyPincode\"   : companyInfoFormValue.companyPincode,\n                                  \"companyCity\"      : companyInfoFormValue.companyCity,\n                                  \"companyState\"     : companyInfoFormValue.companyState,\n                                  \"companyCountry\"   : companyInfoFormValue.companyCountry,\n                                }],\n      });\n    }\n    Meteor.call('tempLogoImageDelete',companyInfoFormValue.logoFilename);\n\n\n  },\n\n  'insertCompanyLocations':function(companyLocationFormValue){\n      var userId = CompanySettings.findOne({\"companyId\" : 1});\n      if(userId){     \n        CompanySettings.update({\"companyId\" : 1},\n          {$push:{ companyLocationsInfo : {\n              companyLocation: companyLocationFormValue.companyLocation,\n              companyAddress : companyLocationFormValue.companyAddress,\n              companyPincode : companyLocationFormValue.companyPincode,\n              companyCity    : companyLocationFormValue.companyCity,\n              companyState   : companyLocationFormValue.companyState,\n              companyCountry : companyLocationFormValue.companyCountry,\n              \n              }\n            }\n        });\n      }\n    \n  },\n  removeCompanyLocation: function(targetedID){\n      CompanySettings.update({'companyId': 1}, {$unset : {['companyLocationsInfo.'+targetedID] : 1}});\n      CompanySettings.update({'companyId': 1}, {$pull : {'companyLocationsInfo' : null}});\n      \n  },\n\n  'updateCompanyLocations':function(companyLocationFormValue){\n    var companyData = CompanySettings.findOne({\"companyId\" : 1});\n    \n    if(companyData){\n      CompanySettings.update({'_id' : companyData._id, 'companyLocationsInfo.companyAddress':companyLocationFormValue.companyAddress },\n          {$set: {\n              'companyLocationsInfo.$.companyLocation': companyLocationFormValue.companyLocation,\n              'companyLocationsInfo.$.companyAddress' : companyLocationFormValue.companyAddress,\n              'companyLocationsInfo.$.companyPincode' : companyLocationFormValue.companyPincode,\n              'companyLocationsInfo.$.companyCity'    : companyLocationFormValue.companyCity,\n              'companyLocationsInfo.$.companyState'   : companyLocationFormValue.companyState,\n              'companyLocationsInfo.$.companyCountry' : companyLocationFormValue.companyCountry,\n              \n              }\n            }\n        );\n\n    }\n    \n\n  },\n\n  'updateBankDetails':function(companyBankDetailsFormValue){\n    \n    var companyData = CompanySettings.findOne({\"companyId\" : 1});\n    if(companyData){\n      \n      CompanySettings.update({'_id': companyData._id,'bankDetails.ifscCode':companyBankDetailsFormValue.ifscCode},\n        {$set:{ \n          'bankDetails.$.accHolderName':companyBankDetailsFormValue.accHolderName,\n          'bankDetails.$.bankName'   : companyBankDetailsFormValue.bankName,\n          'bankDetails.$.branchName'   : companyBankDetailsFormValue.branchName,\n          'bankDetails.$.accNumber'  : companyBankDetailsFormValue.accNumber,\n          'bankDetails.$.ifscCode'   : companyBankDetailsFormValue.ifscCode,\n            \n            \n          }\n        });\n    } //end of if companyData\n  },\n\n  removeBankDetails: function(targetedID){\n      CompanySettings.update({'companyId': 1}, {$unset : {['bankDetails.'+targetedID] : 1}});\n      CompanySettings.update({'companyId': 1}, {$pull : {'bankDetails' : null}});\n      \n    },\n  \n\n  'insertCompanyBankDetails':function(companyBankDetailsFormValue){\n    \n    \n    var companyData = CompanySettings.findOne({\"companyId\" : 1});\n    if(companyData){\n        CompanySettings.update({'_id': companyData._id},\n          {$push:{ bankDetails : {\n              accHolderName : companyBankDetailsFormValue.accHolderName,\n              bankName      : companyBankDetailsFormValue.bankName,\n              branchName    : companyBankDetailsFormValue.branchName,\n              accNumber     : companyBankDetailsFormValue.accNumber,\n              ifscCode      : companyBankDetailsFormValue.ifscCode,\n              \n              }\n            }\n          });\n    } //end of if companyData\n  },\n\n\n  'insertTaxSettings':function(taxSettingsFormValue){\n    \n    \n    // Refer http://stackoverflow.com/questions/7556591/javascript-date-object-always-one-day-off\n\n    //First find previous day of FromDate. \n    //Update Previous Record for same TaxType. Put ToDate = 1 Day prior to FromDate\n    var userId = CompanySettings.findOne({\"companyId\" : 1});\n    if(userId){\n      var fromDate1 = taxSettingsFormValue.effectiveFrom.replace(/-/g, '\\/');\n      var toDateForPreviousRecordISOFormat = new Date(new Date(fromDate1) - (24*60*60*1000) );\n      var formateddate = new Date(toDateForPreviousRecordISOFormat);\n      \n      //Convert ISO Date in to only date format 2016-06-11\n      var toDateForPreviousRecord = formateddate.getFullYear()+'-' + (formateddate.getMonth()+1) + '-'+formateddate.getDate();\n      var queryResult = CompanySettings.find({'_id': userId._id, \n            'taxSettings.taxType'     : taxSettingsFormValue.taxType , \n            'taxSettings.effectiveTo' : '',}).count();  \n      \n      \n        if(queryResult){\n        CompanySettings.update({'taxSettings':\n                      {\n                        $elemMatch:\n                        { \n                          'taxType' : taxSettingsFormValue.taxType , \n                            'effectiveTo' : \"\",\n                          }\n                    }\n          },\n          {$set:{ \n              'taxSettings.$.effectiveTo' : toDateForPreviousRecord,\n              \n              }\n          },\n        );\n\n        CompanySettings.update({'_id': userId._id},\n          {$push:{ taxSettings :{\n\n              taxType       : taxSettingsFormValue.taxType,\n              applicableTax : taxSettingsFormValue.applicableTax,\n              effectiveFrom : taxSettingsFormValue.effectiveFrom,\n              effectiveTo   : '',\n              createdAt     : new Date(),\n            }\n          }\n        },\n        );\n\n      }else{\n        \n        CompanySettings.update({'_id': userId._id},\n          {$push:{ taxSettings :{\n\n              taxType       : taxSettingsFormValue.taxType,\n              applicableTax : taxSettingsFormValue.applicableTax,\n              effectiveFrom : taxSettingsFormValue.effectiveFrom,\n              effectiveTo   : '',\n              createdAt     : new Date(),\n            }\n          }\n        },\n        );\n      }\n      }\n    },\n    \n    removeTaxDetails: function(targetedID){\n         CompanySettings.update({'companyId': 1}, {$unset : {['taxSettings.'+targetedID] : 1}});\n         CompanySettings.update({'companyId': 1}, {$pull : {'taxSettings' : null}});\n      \n      },\n  \n\n    'updatetaxSettings':function(taxSettingsFormValue,targetedID){\n  \n      var companyData = CompanySettings.findOne({\"companyId\" : 1});\n      if(companyData){\n        var fromDate1 = taxSettingsFormValue.effectiveFrom.replace(/-/g, '\\/');\n        var toDateForPreviousRecordISOFormat = new Date(new Date(fromDate1) - (24*60*60*1000) );\n        var formateddate = new Date(toDateForPreviousRecordISOFormat);\n      \n        var toDateForPreviousRecord = formateddate.getFullYear()+'-' + (formateddate.getMonth()+1) + '-'+formateddate.getDate();\n        var queryResult = CompanySettings.find({'_id': companyData._id, \n              'taxSettings.taxType' : taxSettingsFormValue.taxType }).count();  \n    \n      \n        CompanySettings.update({'_id': companyData._id, 'taxSettings.taxType':taxSettingsFormValue.taxType},\n          {$set:{\n              ['taxSettings.'+targetedID+'.taxType']       :taxSettingsFormValue.taxType,\n              ['taxSettings.'+targetedID+'.applicableTax'] : taxSettingsFormValue.applicableTax,\n              ['taxSettings.'+targetedID+'.effectiveFrom'] : taxSettingsFormValue.effectiveFrom,\n              \n            \n          }\n        },\n        );\n\n      }\n  },\n\n  \n});"]},"hash":"fd34d64dbb0358a32921a21e1b28e22e71c278bc"}
