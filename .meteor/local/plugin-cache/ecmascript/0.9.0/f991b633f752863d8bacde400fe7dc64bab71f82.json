{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["Products","TempProductImages"],"specifiers":[{"kind":"local","local":"Products","exported":"Products"},{"kind":"local","local":"TempProductImages","exported":"TempProductImages"}]}}},"options":{"filename":"imports/dashboard/reactCMS/api/Products.js","filenameRelative":"imports/dashboard/reactCMS/api/Products.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/reactCMS/api/Products.js.map","sourceFileName":"imports/dashboard/reactCMS/api/Products.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Products"},"ignored":false,"code":"module.export({\n  Products: () => Products,\n  TempProductImages: () => TempProductImages\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Products = new Mongo.Collection(\"products\");\nconst TempProductImages = new Mongo.Collection(\"tempProductImages\");\n\nif (Meteor.isServer) {\n  Meteor.publish('products', () => {\n    return Products.find({});\n  });\n  Meteor.publish('tempProductImages', () => {\n    return TempProductImages.find({});\n  });\n  Meteor.methods({\n    'uploadTempProductImages': function (id, amazonUrl, uploadTime) {\n      TempProductImages.insert({\n        'id': id,\n        'amazonUrl': amazonUrl,\n        'uploadTime': new Date(),\n        'authorUserId': id,\n        'submitted': false\n      });\n    },\n    'updateTempProductImages': function (_id, boolean) {\n      TempProductImages.update({\n        '_id': _id\n      }, {\n        $set: {\n          'submitted': boolean\n        }\n      });\n    },\n    'removeTempProductImages': function (id) {\n      TempProductImages.remove({\n        'id': id,\n        'submitted': true\n      });\n    },\n    'removeProductUnsubmitImages': function (id) {\n      TempProductImages.remove({\n        'id': id,\n        'submitted': false\n      });\n    },\n    'removeProductUrlImages': function (url) {\n      TempProductImages.remove({\n        'amazonUrl': url\n      });\n    },\n    'createProduct': function (productName, productBody, s3, userId, updateTimestamp) {\n      console.log(s3);\n      Products.insert({\n        'productName': productName,\n        'productBody': productBody,\n        's3': s3,\n        'createdAt': new Date(),\n        'authorUserId': userId,\n        'lastModified': updateTimestamp\n      });\n    },\n    'updateProduct': function (id, productName, productBody, userId, updateTimestamp) {\n      Products.update({\n        '_id': id\n      }, {\n        $set: {\n          'productName': productName,\n          'productBody': productBody,\n          'authorUserId': userId,\n          'lastModified': updateTimestamp //End of set\n\n        }\n      });\n    },\n    'updateEditProduct': function (amazonUrl) {\n      Products.update({\n        \"s3.amazonUrl\": amazonUrl\n      }, {\n        $set: {\n          's3.$.amazonUrl': \"\",\n          's3.$.uploadTime': \"\" //End of set\n\n        }\n      });\n    },\n    'updateProductAmazonUrl': function (amazonUrl, uploadTime, id) {\n      Products.update({\n        '_id': id\n      }, {\n        $push: {\n          's3': {\n            'amazonUrl': amazonUrl,\n            'uploadTime': uploadTime\n          }\n        }\n      });\n    },\n    'deleteProduct': function (id) {\n      Products.remove({\n        '_id': id\n      });\n    }\n  });\n}","map":{"version":3,"sources":["imports/dashboard/reactCMS/api/Products.js"],"names":["module","export","Products","TempProductImages","Mongo","watch","require","v","Meteor","Collection","isServer","publish","find","methods","id","amazonUrl","uploadTime","insert","Date","_id","boolean","update","$set","remove","url","productName","productBody","s3","userId","updateTimestamp","console","log","$push"],"mappings":"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","file":"imports/dashboard/reactCMS/api/Products.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const Products = new Mongo.Collection(\"products\");\nexport const TempProductImages = new Mongo.Collection(\"tempProductImages\");\nif(Meteor.isServer){\n    Meteor.publish('products',()=>{\n        return Products.find({});\n    });\n    Meteor.publish('tempProductImages',()=>{\n        return TempProductImages.find({});\n    });\n\n    Meteor.methods({\n      'uploadTempProductImages':function(id,amazonUrl,uploadTime){\n    \t\tTempProductImages.insert({\n    \t\t\t'id'             : id,\n    \t\t\t'amazonUrl'      : amazonUrl,\n    \t\t\t'uploadTime'     : new Date(),\n          'authorUserId'   : id,\n          'submitted'       : false,\n    \t\t});\n    \t},\n      'updateTempProductImages':function(_id,boolean){\n    \t\tTempProductImages.update({\n    \t\t\t'_id'           : _id},\n          {$set:{\n    \t\t\t'submitted'      : boolean,\n    \t\t}});\n    \t},\n      'removeTempProductImages':function(id){\n        TempProductImages.remove({'id':id,'submitted':true});\n      },\n      'removeProductUnsubmitImages':function(id){\n        TempProductImages.remove({'id':id,'submitted':false});\n      },\n      'removeProductUrlImages':function(url){\n        TempProductImages.remove({'amazonUrl':url});\n      },\n    \t'createProduct':function(productName,productBody,s3,userId,updateTimestamp){\n        console.log(s3);\n    \t\tProducts.insert({\n    \t\t\t'productName'  : productName,\n    \t\t\t'productBody'  : productBody,\n          's3'            : s3,\n    \t\t\t'createdAt'     : new Date(),\n          'authorUserId'  : userId,\n          'lastModified'  : updateTimestamp,\n    \t\t});\n    \t},\n      'updateProduct':function(id,productName,productBody,userId,updateTimestamp){\n    \t\tProducts.update(\n    \t\t\t{ '_id': id },\n    \t        {\n    \t          $set:{\n                  'productName'  : productName,\n            \t\t\t'productBody'  : productBody,\n                  'authorUserId'  : userId,\n                  'lastModified'  : updateTimestamp,\n    \t        } //End of set\n    \t      }\n    \t\t);\n    \t},\n      'updateEditProduct':function(amazonUrl){\n    \t\tProducts.update(\n    \t\t\t{ \"s3.amazonUrl\": amazonUrl },\n    \t        {\n    \t          $set:{\n\n                  's3.$.amazonUrl'   : \"\",\n                  's3.$.uploadTime'  : \"\",\n    \t        } //End of set\n    \t      }\n    \t\t);\n    \t},\n      'updateProductAmazonUrl':function(amazonUrl,uploadTime,id){\n    \t\tProducts.update(\n    \t\t\t   { '_id': id },\n    \t        {\n    \t          $push:{\n                    's3':\n                    {\n                      'amazonUrl': amazonUrl,\n                      'uploadTime':uploadTime,\n                    }\n    \t        }\n    \t      }\n    \t\t);\n    \t},\n      'deleteProduct':function(id){\n     \t\t Products.remove({'_id': id});\n\n    \t},\n    });\n}\n"]},"hash":"f991b633f752863d8bacde400fe7dc64bab71f82"}
