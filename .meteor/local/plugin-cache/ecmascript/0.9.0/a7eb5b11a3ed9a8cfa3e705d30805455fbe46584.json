{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["Order","TempOrder"],"specifiers":[{"kind":"local","local":"Order","exported":"Order"},{"kind":"local","local":"TempOrder","exported":"TempOrder"}]}}},"options":{"filename":"imports/website/ServiceProcess/api/Order.js","filenameRelative":"imports/website/ServiceProcess/api/Order.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/website/ServiceProcess/api/Order.js.map","sourceFileName":"imports/website/ServiceProcess/api/Order.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Order"},"ignored":false,"code":"module.export({\n   Order: function () {\n      return Order;\n   },\n   TempOrder: function () {\n      return TempOrder;\n   }\n});\nvar Mongo = void 0;\nmodule.watch(require(\"meteor/mongo\"), {\n   Mongo: function (v) {\n      Mongo = v;\n   }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n   Meteor: function (v) {\n      Meteor = v;\n   }\n}, 1);\nvar Order = new Mongo.Collection(\"order\");\nvar TempOrder = new Mongo.Collection(\"tempOrder\");\n\nif (Meteor.isServer) {\n   Meteor.publish('allOrders', function () {\n      return Order.find({});\n   });\n   Meteor.publish('singleOrder', function (_id) {\n      return Order.find({\n         \"_id\": _id\n      });\n   });\n   Meteor.publish('singleTempOrder', function (_id) {\n      return TempOrder.find({\n         \"_id\": _id\n      });\n   });\n   Meteor.methods({\n      'insertTempPayment': function (invoiceDate, invoiceNo, serviceId, serviceName, serviceRate, serviceDuration, userId, userName, totalAmount) {\n         var id = TempOrder.insert({\n            \"invoiceDate\": invoiceDate,\n            \"invoiceNo\": invoiceNo,\n            \"serviceId\": serviceId,\n            \"serviceName\": serviceName,\n            \"serviceRate\": serviceRate,\n            \"serviceDuration\": serviceDuration,\n            \"userId\": userId,\n            \"userName\": userName,\n            \"totalAmount\": totalAmount,\n            \"createdAt\": new Date()\n         }, function (error, result) {\n            if (error) {\n               return error;\n            } else {\n               return result;\n            }\n         });\n         return id;\n      },\n      'insertOrder': function (invoiceDate, invoiceNo, serviceId, serviceName, serviceRate, serviceDuration, userId, userName, totalAmount, paymentStatus, delieveryStatus) {\n         var orderObj = Order.findOne({}, {\n            sort: {\n               orderNo: -1\n            }\n         });\n\n         if (orderObj) {\n            orderNo = orderObj.orderNo + 1;\n         } else {\n            orderNo = 1;\n         }\n\n         var id = Order.insert({\n            \"orderNo\": orderNo,\n            \"invoiceDate\": invoiceDate,\n            \"invoiceNo\": invoiceNo,\n            \"serviceId\": serviceId,\n            \"serviceName\": serviceName,\n            \"serviceRate\": serviceRate,\n            \"serviceDuration\": serviceDuration,\n            \"userId\": userId,\n            \"userName\": userName,\n            \"totalAmount\": totalAmount,\n            \"paymentStatus\": paymentStatus,\n            \"delieveryStatus\": [delieveryStatus],\n            \"createdAt\": new Date()\n         }, function (error, result) {\n            if (error) {\n               return error;\n            } else {\n               return result;\n            }\n         });\n         Meteor.call('createTicket', id, userId, serviceId, serviceName, totalAmount, paymentStatus, delieveryStatus);\n         TempOrder.remove({});\n         return id;\n      }\n   });\n}","map":{"version":3,"sources":["imports/website/ServiceProcess/api/Order.js"],"names":["module","export","Order","TempOrder","Mongo","watch","require","v","Meteor","Collection","isServer","publish","find","_id","methods","invoiceDate","invoiceNo","serviceId","serviceName","serviceRate","serviceDuration","userId","userName","totalAmount","id","insert","Date","error","result","paymentStatus","delieveryStatus","orderObj","findOne","sort","orderNo","call","remove"],"mappings":"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","file":"imports/website/ServiceProcess/api/Order.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const Order = new Mongo.Collection(\"order\");\nexport const TempOrder = new Mongo.Collection(\"tempOrder\");\n\nif(Meteor.isServer){\n     Meteor.publish('allOrders',()=>{\n        return Order.find({});\n    });\n\t  Meteor.publish('singleOrder',(_id)=>{\n        return Order.find({\"_id\" : _id});\n    });\n    Meteor.publish('singleTempOrder',(_id)=>{\n        return TempOrder.find({\"_id\" : _id});\n    });\n    \n\n\t  Meteor.methods({\n   \t 'insertTempPayment':function(invoiceDate,invoiceNo,serviceId,serviceName,serviceRate,serviceDuration,userId,userName,totalAmount) {\n   \t      var id  = TempOrder.insert({\n   \t      \t  \"invoiceDate\"      :   invoiceDate,\n   \t      \t  \"invoiceNo\"        :   invoiceNo,\n              \"serviceId\"        :   serviceId,\n              \"serviceName\"      :   serviceName,\n              \"serviceRate\"      :   serviceRate,\n              \"serviceDuration\"  :   serviceDuration,\n              \"userId\"           :   userId,\n              \"userName\"         :   userName,\n              \"totalAmount\"      :   totalAmount,\n              \"createdAt\"        :   new Date(),\n   \t      },(error, result)=>{\n             if (error) {\n                return error;\n             }else{\n             \t return result;\n             }\n          });\n\n      return id;\n   \t },\n   \t 'insertOrder':function(invoiceDate,invoiceNo,serviceId,serviceName,serviceRate,serviceDuration,userId,userName,totalAmount,paymentStatus,delieveryStatus) {      \n   \t     var orderObj = Order.findOne({}, {sort: { orderNo : -1}});\n\t\t\t    if(orderObj){\n\t\t\t      orderNo = orderObj.orderNo + 1;\n\t\t\t    }else{\n\t\t\t      orderNo = 1;\n\t\t\t    }\n   \t      var id  = Order.insert({\n   \t      \t  \"orderNo\"          :   orderNo,\n   \t      \t  \"invoiceDate\"      :   invoiceDate,\n   \t      \t  \"invoiceNo\"        :   invoiceNo,\n              \"serviceId\"        :   serviceId,\n              \"serviceName\"      :   serviceName,\n              \"serviceRate\"      :   serviceRate,\n              \"serviceDuration\"  :   serviceDuration,\n              \"userId\"           :   userId,\n              \"userName\"         :   userName,\n              \"totalAmount\"      :   totalAmount,\n              \"paymentStatus\"    :   paymentStatus,\n              \"delieveryStatus\"  :  [delieveryStatus],\n              \"createdAt\"        :   new Date(),\n   \t      },(error, result)=>{\n             if (error) {\n                return error;\n             }else{\n             \t return result;\n             }\n          });\n          Meteor.call('createTicket',id,userId,serviceId,serviceName,totalAmount,paymentStatus,delieveryStatus);\n\n       TempOrder.remove({});\n      return id;\n   \t }\n   });\n\n}\n"]},"hash":"a7eb5b11a3ed9a8cfa3e705d30805455fbe46584"}
