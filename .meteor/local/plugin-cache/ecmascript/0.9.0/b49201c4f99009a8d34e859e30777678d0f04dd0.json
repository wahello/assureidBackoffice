{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/accounts-base","imported":["Accounts"],"specifiers":[{"kind":"named","imported":"Accounts","local":"Accounts"}]},{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]},{"source":"meteor/email","imported":["Email"],"specifiers":[{"kind":"named","imported":"Email","local":"Email"}]},{"source":"../UserPicUploadClient/UserPicUploadClient.js","imported":["UserImage"],"specifiers":[{"kind":"named","imported":"UserImage","local":"UserImage"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/dashboard/userManagement/api/userAccounts.js","filenameRelative":"imports/dashboard/userManagement/api/userAccounts.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/userManagement/api/userAccounts.js.map","sourceFileName":"imports/dashboard/userManagement/api/userAccounts.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"userAccounts"},"ignored":false,"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.watch(require(\"meteor/accounts-base\"), {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet Tracker;\nmodule.watch(require(\"meteor/tracker\"), {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 3);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 4);\nlet Email;\nmodule.watch(require(\"meteor/email\"), {\n  Email(v) {\n    Email = v;\n  }\n\n}, 5);\nlet UserImage;\nmodule.watch(require(\"../UserPicUploadClient/UserPicUploadClient.js\"), {\n  UserImage(v) {\n    UserImage = v;\n  }\n\n}, 6);\n\nif (Meteor.isServer) {\n  // Meteor.publish('signUpConfig', function() {\n  //     this.unblock();\n  //     return CheckedField.find({});\n  // });\n  Meteor.publish('userfunction', function () {\n    // this.unblock();\n    return Meteor.users.find({});\n  });\n  Meteor.publish('currentUserfunction', function () {\n    // this.unblock();\n    return Meteor.users.find({\n      \"_id\": this.userId\n    });\n  });\n  Meteor.publish('userData', function (id) {\n    return Meteor.users.find({\n      '_id': id\n    });\n  });\n  Meteor.publish('spaceOwnerUserData', function () {\n    return Meteor.users.find({\n      \"roles\": \"spaceOwner\"\n    });\n  });\n  Meteor.publish('clientUserData', function () {\n    return Meteor.users.find({\n      \"roles\": \"user\"\n    });\n  });\n  Meteor.publish('rolefunction', function () {\n    // this.unblock();\n    return Meteor.roles.find({});\n  });\n  Meteor.publish(\"users-count\", function () {\n    Counts.publish(this, \"users-count\", Meteor.users.find({}));\n  });\n  Meteor.publish('userRole', function (id) {\n    // this.unblock();\n    return Meteor.roles.find({\n      \"_id\": id\n    });\n  });\n  Meteor.publish('allEmails', function () {\n    // you should restrict this publication to only be available to admin users\n    return Meteor.users.find({}, {\n      fields: {\n        emails: 1\n      }\n    });\n  });\n}\n\nMeteor.methods({\n  'addUserImage': function (id, userId) {\n    var data = UserImage.findOne({\n      \"_id\": id\n    });\n    var imageLink = data.link();\n    Meteor.users.update({\n      '_id': userId\n    }, {\n      $set: {\n        \"profile.userProfile\": imageLink //End of set\n\n      }\n    });\n  },\n  'userCreateAccount': function (formValues) {\n    // console.log(formValues.signupPassword);\n    // console.log(formValues.signupPassword.split(\"\").reverse().join(\"\"));\n    newUserId = Accounts.createUser({\n      username: formValues.signupEmail,\n      email: formValues.signupEmail,\n      password: formValues.signupPassword,\n      profile: {\n        firstname: formValues.firstname,\n        lastname: formValues.lastname,\n        mobNumber: formValues.mobNumber,\n        servicesName: formValues.servicesName,\n        userProfile: '',\n        status: 'Blocked',\n        profileInsert: true,\n        createdOn: new Date(),\n        userCode: formValues.signupPassword.split(\"\").reverse().join(\"\")\n      }\n    });\n    Meteor.users.update({\n      '_id': newUserId\n    }, {\n      $set: {\n        \"emails.0.verified\": true //End of set\n\n      }\n    }); //end of update\n\n    return newUserId;\n  },\n  'editMyProfileData': function (formValues, id) {\n    Meteor.users.update({\n      '_id': id\n    }, {\n      $set: {\n        \"profile.firstname\": formValues.firstname,\n        \"profile.lastname\": formValues.lastname,\n        \"profile.mobNumber\": formValues.mobNumber //End of set\n\n      }\n    });\n  },\n  'addOTP': function (newID, mobileotp, emailotp) {\n    Meteor.users.update({\n      '_id': newID\n    }, {\n      $set: {\n        \"profile.sentMobileOTP\": mobileotp,\n        \"profile.sentEmailOTP\": emailotp //End of set\n\n      }\n    });\n  },\n  'updateOTP': function (newID, mobotp, mailotp) {\n    Meteor.users.update({\n      '_id': newID\n    }, {\n      $set: {\n        \"profile.sentMobileOTP\": 0,\n        \"profile.sentEmailOTP\": 0,\n        \"profile.receivedMobileOTP\": mobotp,\n        \"profile.receivedEmailOTP\": mailotp,\n        \"profile.status\": 'Active' //End of set\n\n      }\n    });\n  },\n  'userMobileNumberExist': function (mobNumber) {\n    var userFound = Meteor.users.findOne({\n      'profile.mobNumber': mobNumber\n    });\n\n    if (userFound) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  'sendVerificationLinkToUser': function (newID) {\n    this.unblock(); // console.log('sendVerificationLink'+ newID);\n\n    let userId = newID; // console.log('sendVerificationLink userId :' + userId);\n\n    if (userId) {\n      var user = Meteor.users.findOne({\n        '_id': userId\n      });\n\n      if (user) {\n        // console.log(user._id);\n        return Accounts.sendVerificationEmail(userId, user.emails[0].address);\n      }\n    } else {\n      throw new Meteor.Error(402, 'no user login');\n    }\n  },\n  'createUserByAdminSetEmailToTrue': function (newID) {\n    Meteor.users.update({\n      '_id': newID\n    }, {\n      $set: {\n        \"emails.0.verified\": true //End of set\n\n      }\n    }); //end of update\n  },\n  'createUserByAdmin': function (formValues) {\n    // console.log(formValues.email);\n    var users = Meteor.users.findOne({\n      'emails.0.address': formValues.email\n    }); // console.log(users);\n\n    if (users) {\n      // console.log( \"Email Address already taken\");\n      return 'emailIdExist';\n    } else {\n      // console.log('in else');\n      var newUser = Accounts.createUser(formValues);\n      return newUser;\n    }\n  },\n  checkEmailVerification: function (email) {\n    found_user = Meteor.users.findOne({\n      'emails.address': email\n    });\n\n    if (found_user) {\n      if (found_user.emails[0].verified == true) {\n        return \"verified\";\n      } else {\n        return \"unverified\";\n      }\n    } else {\n      return \"notfound\";\n    }\n  },\n  checkBlockedUser: function (email) {\n    found_user = Meteor.users.findOne({\n      'emails.address': email\n    });\n\n    if (found_user) {\n      if (found_user.profile.status == \"Active\") {\n        return \"Active\";\n      } else {\n        return \"Blocked\";\n      }\n    } else {\n      return \"notfound\";\n    }\n  },\n  checkcurrentPassword: function (digest, urlUID) {\n    check(digest, String);\n\n    if (urlUID) {\n      var user = Meteor.user();\n      var password = {\n        digest: digest,\n        algorithm: 'sha-256'\n      };\n\n      var result = Accounts._checkPassword(user, password);\n\n      return result.error == null;\n    } else {\n      return false;\n    }\n  },\n  currentPassword: function (digest) {\n    check(digest, String);\n    var user = Meteor.user();\n    var password = {\n      digest: digest,\n      algorithm: 'sha-256'\n    };\n\n    var result = Accounts._checkPassword(user, password);\n\n    return result.error == null;\n  },\n  updateUserByAdmin: function (urlUID, doc, passwordVar1) {\n    Meteor.users.update({\n      '_id': urlUID\n    }, {\n      $set: {\n        \"emails.0.address\": doc.emailVar1,\n        \"profile.firstName\": doc.firstNameVar1,\n        \"username\": doc.userNameVar1,\n        \"profile.signGender\": doc.signGenderVar1,\n        \"profile.homeAdd\": doc.homeAddVar1,\n        \"profile.city\": doc.cityVar1,\n        \"profile.state\": doc.stateVar1,\n        \"profile.zip\": doc.zipVar1,\n        \"profile.country\": doc.countryVar1,\n        \"profile.mobNumber\": doc.mobNumberVar1,\n        \"profile.alterNumber\": doc.alterNumberVar1,\n        \"profile.salutation\": doc.salutationVar1,\n        \"profile.lastName\": doc.lastNameVar1,\n        \"profile.displayPicture\": doc.displayPicture1,\n        \"profile.status\": 'Active',\n        \"profile.createdOn\": new Date(),\n        \"driverAddressOne\": \"\",\n        \"driverAddressTwo\": \"\",\n        \"driverAddressCity\": \"\",\n        \"driverAddressState\": \"\",\n        \"driverAddressZip\": \"\",\n        \"driverLicenseNumber\": \"\",\n        \"driverLicenseState\": \"\",\n        \"driverLicenseNumberExpiryMM\": \"\",\n        \"driverLicenseNumberExpiryYY\": \"\",\n        \"driverAutoInsuranceIssueBy\": \"\",\n        \"driverAutoInsurancePolicy\": \"\",\n        \"driverAutoInsuranceExpiryMM\": \"\",\n        \"driverAutoInsuranceExpiryYY\": \"\" //End of set\n\n      }\n    });\n    Accounts.setPassword(urlUID, passwordVar1);\n  },\n  updateUserByUser: function (urlUID, doc, userFormValues) {\n    Meteor.users.update({\n      '_id': urlUID\n    }, {\n      $set: {\n        \"emails.0.address\": doc.emailVar1,\n        \"profile.firstName\": doc.firstNameVar1,\n        \"profile.userName\": doc.userNameVar1,\n        \"profile.signGender\": doc.signGenderVar1,\n        \"profile.homeAdd\": doc.homeAddVar1,\n        \"profile.city\": doc.cityVar1,\n        \"profile.state\": doc.stateVar1,\n        \"profile.zip\": doc.zipVar1,\n        \"profile.country\": doc.countryVar1,\n        \"profile.mobNumber\": doc.mobNumberVar1,\n        \"profile.alterNumber\": doc.alterNumberVar1,\n        \"profile.salutation\": doc.salutationVar1,\n        \"profile.lastName\": doc.lastNameVar1,\n        \"profile.displayPicture\": doc.displayPicture1,\n        \"profile.signupConfirmPassword\": userFormValues.signupConfirmPasswordVar1,\n        \"profile.status\": 'Active',\n        \"profile.createdOn\": new Date() //End of set\n\n      }\n    });\n    Accounts.setPassword(urlUID, userFormValues.passwordVar1);\n  },\n  updaterole: function (roleId, roleName) {\n    // console.log(roleId);\n    // console.log(roleName);\n    Meteor.roles.update({\n      '_id': roleId\n    }, {\n      $set: {\n        \"name\": roleName //End of set\n\n      }\n    });\n  },\n  addrole: function (roleName) {\n    Roles.createRole(roleName);\n  },\n  deleteUser: function (userId) {\n    Meteor.users.remove({\n      '_id': userId\n    });\n  },\n  deleteRole: function (roleID) {\n    // Roles.deleteRole('super-admin');\n    Meteor.roles.remove({\n      '_id': roleID\n    });\n  },\n  addRoles: function (newID, defaultRoleconfig) {\n    // console.log('addRoles'+ newID);\n    Roles.addUsersToRoles(newID, defaultRoleconfig);\n  },\n  'addRoleToUser': function (role, checkedUsersList) {\n    // console.log('role : ' + role);\n    var addRoles = [role]; // console.log(checkedUsersList.length);\n\n    for (var i = 0; i < checkedUsersList.length; i++) {\n      // console.log(checkedUsersList[i]);\n      var userId = checkedUsersList[i];\n\n      if (checkedUsersList[i] != null) {\n        Roles.addUsersToRoles(userId, addRoles);\n      }\n    }\n  },\n  removeRoleFromUser: function (role, checkedUsersList) {\n    var rmRoles = [role];\n\n    for (var i = 0; i < checkedUsersList.length; i++) {\n      Roles.removeUsersFromRoles(checkedUsersList[i], rmRoles);\n    }\n  },\n  blockSelectedUser: function (checkedUsersList) {\n    // console.log('Serverside-Checked checkboxes:'+ array);\n    for (var i = 0; i < checkedUsersList.length; i++) {\n      // console.log('value: ' + checkedUsersList[i]);\n      Meteor.users.update({\n        '_id': checkedUsersList[i]\n      }, {\n        $set: {\n          \"profile.status\": 'Blocked' //End of set\n\n        }\n      }); //end of update\n    } //End of for loop\n\n  },\n  //end of blockuser function\n  activeSelectedUser: function (checkedUsersList) {\n    // console.log('Serverside-Checked checkboxes:'+ array);\n    for (var i = 0; i < checkedUsersList.length; i++) {\n      // console.log('value: ' + checkedUsersList[i]);\n      Meteor.users.update({\n        '_id': checkedUsersList[i]\n      }, {\n        $set: {\n          \"profile.status\": 'Active' //End of set\n\n        }\n      }); //end of update\n    } //End of for loop\n\n  },\n  //end of Active function\n  deleteSelectedUser: function (checkedUsersList) {\n    // console.log('Serverside-Checked checkboxes:'+ array);\n    for (var i = 0; i < checkedUsersList.length; i++) {\n      // console.log('value: ' + array[i]);\n      Meteor.users.remove({\n        '_id': checkedUsersList[i]\n      }); //end of update\n    } //End of for loop\n\n  },\n  //end of Deleteuser function\n  sendEmail1: function (to, from, subject, body) {\n    check([to, from, subject, body], [String]); // console.log('to : '+ to);\n    // console.log('from : ' + from);\n    // console.log('subject : ' + subject);\n    // console.log('body : ' + body);\n    // Let other method calls from the same client start running,\n    // without waiting for the email sending to complete.\n\n    this.unblock();\n    Email.send({\n      to: to,\n      from: from,\n      subject: subject,\n      text: body\n    });\n  },\n  //End of Send Email Function\n  'sendEmailnNotification': function (to, from, subject, body) {\n    Email.send({\n      to: to,\n      from: from,\n      subject: subject,\n      html: body\n    });\n  },\n  //End of Send Email Function\n  'resetPasswordUsingotp': function (id, password) {\n    Accounts.setPassword(id, password);\n  }\n});\nMeteor.startup(() => {\n  if (!Meteor.users.findOne({\n    username: 'superAdmin'\n  })) {\n    superUserId = Accounts.createUser({\n      username: 'superAdmin',\n      email: 'superAdmin@gmail.com',\n      password: 'superAdmin',\n      profile: {\n        'status': 'Active',\n        'vehicles': []\n      }\n    });\n    Roles.addUsersToRoles(superUserId, \"superAdmin\");\n    Meteor.call('createUserByAdminSetEmailToTrue', superUserId, function (error, result) {\n      if (error) {\n        console.log(error);\n      } //info about what went wrong \n      else {\n          console.log(\"Admin email verified by default\");\n        } //the _id of new object if successful\n\n    });\n  } // Create super admin\n\n\n  process.env.MAIL_URL = \"smtp://rashmimhatre1000:rashmimhatre1000@smtp.googlemail.com:587\";\n  Accounts.emailTemplates.siteName = \"ASSUREiD\";\n  Accounts.emailTemplates.from = 'ASSUREiD Admin<karishma.kottarwar@gmail.com>';\n\n  Accounts.urls.resetPassword = function (token) {\n    return Meteor.absoluteUrl('reset-password/' + token);\n  }; // Configures \"verify email\" email link\n\n\n  Accounts.urls.verifyEmail = function (token) {\n    return Meteor.absoluteUrl(\"verify-email/\" + token);\n  }; // Welcome and Email Verification\n\n\n  Accounts.emailTemplates.verifyEmail.subject = function (user) {\n    return 'Verify Account with ASSUREiD';\n  };\n\n  Accounts.emailTemplates.verifyEmail.html = function (user, url) {\n    return 'Hello,<br><br>Thank You for Signing up on ASSUREiD. Please verify your email address to continue the site use.<br><br>To verify your account, enter the <b>OTP : ' + user.profile.sentEmailOTP + ' </b><br><br>Regards,<br>Team ASSUREiD';\n  }; // Accounts.emailTemplates.verifyEmail.html = function (user, url) {\n  //   // return html string\n  //   return Handlebars.templates.verifyEmail_html({\n  //     emailAddress: user.email(),\n  //     url: url,\n  //   });\n  // };\n\n});","map":{"version":3,"sources":["imports/dashboard/userManagement/api/userAccounts.js"],"names":["Meteor","module","watch","require","v","Mongo","Accounts","Tracker","check","Email","UserImage","isServer","publish","users","find","userId","id","roles","Counts","fields","emails","methods","data","findOne","imageLink","link","update","$set","formValues","newUserId","createUser","username","signupEmail","email","password","signupPassword","profile","firstname","lastname","mobNumber","servicesName","userProfile","status","profileInsert","createdOn","Date","userCode","split","reverse","join","newID","mobileotp","emailotp","mobotp","mailotp","userFound","unblock","user","sendVerificationEmail","address","Error","newUser","checkEmailVerification","found_user","verified","checkBlockedUser","checkcurrentPassword","digest","urlUID","String","algorithm","result","_checkPassword","error","currentPassword","updateUserByAdmin","doc","passwordVar1","emailVar1","firstNameVar1","userNameVar1","signGenderVar1","homeAddVar1","cityVar1","stateVar1","zipVar1","countryVar1","mobNumberVar1","alterNumberVar1","salutationVar1","lastNameVar1","displayPicture1","setPassword","updateUserByUser","userFormValues","signupConfirmPasswordVar1","updaterole","roleId","roleName","addrole","Roles","createRole","deleteUser","remove","deleteRole","roleID","addRoles","defaultRoleconfig","addUsersToRoles","role","checkedUsersList","i","length","removeRoleFromUser","rmRoles","removeUsersFromRoles","blockSelectedUser","activeSelectedUser","deleteSelectedUser","sendEmail1","to","from","subject","body","send","text","html","startup","superUserId","call","console","log","process","env","MAIL_URL","emailTemplates","siteName","urls","resetPassword","token","absoluteUrl","verifyEmail","url","sentEmailOTP"],"mappings":"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","file":"imports/dashboard/userManagement/api/userAccounts.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Tracker } from 'meteor/tracker';\nimport { check } from 'meteor/check';\nimport { Email } from 'meteor/email';\nimport { UserImage } from \"../UserPicUploadClient/UserPicUploadClient.js\";\n\nif (Meteor.isServer) {\n\n  // Meteor.publish('signUpConfig', function() {\n  //     this.unblock();\n  //     return CheckedField.find({});\n  // });\n\n  Meteor.publish('userfunction', function(){\n      // this.unblock();\n      return Meteor.users.find({});\n  }); \n\n  Meteor.publish('currentUserfunction', function(){\n      // this.unblock();\n      return Meteor.users.find({\"_id\":this.userId});\n  });\n\n  Meteor.publish('userData', function(id){ \n      return Meteor.users.find({ '_id' : id });\n  });\n\n  Meteor.publish('spaceOwnerUserData', function(){\n      return Meteor.users.find({\"roles\": \"spaceOwner\"});\n  });\n\n  Meteor.publish('clientUserData', function(){\n      return Meteor.users.find({\"roles\": \"user\"});\n  });\n\n  Meteor.publish('rolefunction', function(){\n      // this.unblock();\n      return Meteor.roles.find({});\n  });\n\n  Meteor.publish(\"users-count\",function(){\n    Counts.publish(this,\"users-count\",Meteor.users.find({}));\n  });\n\n  Meteor.publish('userRole', function(id){\n      // this.unblock();\n      return Meteor.roles.find({\"_id\":id});\n  });\n\n  Meteor.publish('allEmails',function(){\n  // you should restrict this publication to only be available to admin users\n  return Meteor.users.find({},{fields: { emails: 1 }});\n  });\n\n}\n\nMeteor.methods({\n  'addUserImage': function (id,userId) {\n     var data = UserImage.findOne({\"_id\" : id});\n     var imageLink = data.link();\n\n     Meteor.users.update(\n      {'_id': userId },\n      {\n        $set:{\n          \"profile.userProfile\" :  imageLink,\n        } //End of set\n      }\n    );\n  },\n\n  'userCreateAccount' : function(formValues) {\n    // console.log(formValues.signupPassword);\n    // console.log(formValues.signupPassword.split(\"\").reverse().join(\"\"));\n    \n    newUserId = Accounts.createUser({\n      username        : formValues.signupEmail,\n      email           : formValues.signupEmail,\n      password        : formValues.signupPassword,\n      \n      profile     : {   \n        firstname     : formValues.firstname,\n        lastname      : formValues.lastname,\n        mobNumber     : formValues.mobNumber,\n        servicesName    : formValues.servicesName,\n        userProfile   : '',\n        status        : 'Blocked',\n        profileInsert : true,\n        createdOn     : new Date(),\n        userCode      : formValues.signupPassword.split(\"\").reverse().join(\"\"),\n      }\n      \n    });\n\n    Meteor.users.update(\n      {'_id': newUserId },\n      {\n        $set:{\n            \"emails.0.verified\" : true,\n      } //End of set\n    }\n    ); //end of update\n    \n    return newUserId;\n  },\n  'editMyProfileData':function(formValues, id) {\n     Meteor.users.update(\n      {'_id': id },\n      {\n        $set:{\n          \"profile.firstname\" :  formValues.firstname,\n          \"profile.lastname\"  :  formValues.lastname,\n          \"profile.mobNumber\" : formValues.mobNumber,\n        } //End of set\n      }\n    );\n  },\n  'addOTP' : function(newID,mobileotp,emailotp) {\n    Meteor.users.update(\n      {'_id': newID },\n      {\n        $set:{\n          \"profile.sentMobileOTP\" :  mobileotp,\n          \"profile.sentEmailOTP\"  :  emailotp,\n        } //End of set\n      }\n    );\n  },\n\n  'updateOTP' : function(newID,mobotp,mailotp) {\n    Meteor.users.update(\n      {'_id': newID },\n      {\n        $set:{\n          \"profile.sentMobileOTP\"        :  0,\n          \"profile.sentEmailOTP\"         :  0,\n          \"profile.receivedMobileOTP\"    :  mobotp,\n          \"profile.receivedEmailOTP\"     :  mailotp,\n          \"profile.status\"               : 'Active',\n        } //End of set\n      }\n    );\n  },\n\n\n  'userMobileNumberExist' : function(mobNumber) {\n    var userFound = Meteor.users.findOne({ 'profile.mobNumber' : mobNumber });\n    if(userFound){\n      return true;\n    }else{\n      return false;\n    }\n  },\n\n  'sendVerificationLinkToUser' : function(newID) {\n    \n     this.unblock();\n     // console.log('sendVerificationLink'+ newID);\n     let userId = newID;\n    // console.log('sendVerificationLink userId :' + userId);\n\n    if ( userId ) {\n      var user = Meteor.users.findOne({'_id' : userId});\n      if(user){\n        // console.log(user._id);\n        return Accounts.sendVerificationEmail( userId ,user.emails[0].address);\n      }   \n    }else{\n      throw new Meteor.Error(402, 'no user login');\n    }\n  },\n\n\n  'createUserByAdminSetEmailToTrue' : function(newID) {\n      Meteor.users.update(\n        {'_id': newID },\n        {\n          $set:{\n              \"emails.0.verified\" : true,\n        } //End of set\n      }\n      ); //end of update\n  },\n\n  'createUserByAdmin' : function(formValues) {\n    // console.log(formValues.email);\n    var users = Meteor.users.findOne({'emails.0.address' : formValues.email});\n    // console.log(users);\n    if(users){\n      // console.log( \"Email Address already taken\");\n      return 'emailIdExist';\n    }else{\n      // console.log('in else');\n      var newUser = Accounts.createUser(formValues);\n      return newUser;\n    }\n     \n  },\n\n  checkEmailVerification: function(email) {\n    found_user = Meteor.users.findOne({ 'emails.address' : email })\n    if(found_user){\n        if(found_user.emails[0].verified == true){\n            return \"verified\";\n        }else{\n            return \"unverified\";\n        }\n    }else{\n        return \"notfound\";\n    }\n  },\n\n  checkBlockedUser: function(email) {\n    found_user = Meteor.users.findOne({ 'emails.address' : email })\n    if(found_user){\n        if(found_user.profile.status == \"Active\"){\n            return \"Active\";\n        }else{\n            return \"Blocked\";\n        }\n    }else{\n        return \"notfound\";\n    }\n  },\n\n  checkcurrentPassword: function(digest, urlUID) {\n    check(digest, String);\n\n    if (urlUID) {\n      var user = Meteor.user();\n      var password = {digest: digest, algorithm: 'sha-256'};\n      var result = Accounts._checkPassword(user, password);\n      return result.error == null;\n    } else {\n      return false;\n    }\n  },\n\n  currentPassword: function(digest) {\n    check(digest, String);\n      var user = Meteor.user();\n      var password = {digest: digest, algorithm: 'sha-256'};\n      var result = Accounts._checkPassword(user, password);\n      return result.error == null;\n  },\n\n\n  updateUserByAdmin: function (urlUID, doc , passwordVar1) {\n      Meteor.users.update(\n        {'_id': urlUID },\n        {\n          $set:{\n              \"emails.0.address\"            : doc.emailVar1,\n              \"profile.firstName\"           : doc.firstNameVar1 ,\n              \"username\"                    : doc.userNameVar1,\n              \"profile.signGender\"          : doc.signGenderVar1,\n              \"profile.homeAdd\"             : doc.homeAddVar1,\n              \"profile.city\"                : doc.cityVar1,\n              \"profile.state\"               : doc.stateVar1,\n              \"profile.zip\"                 : doc.zipVar1,\n              \"profile.country\"             : doc.countryVar1, \n              \"profile.mobNumber\"           : doc.mobNumberVar1,\n              \"profile.alterNumber\"         : doc.alterNumberVar1,\n              \"profile.salutation\"          : doc.salutationVar1,\n              \"profile.lastName\"            : doc.lastNameVar1,\n              \"profile.displayPicture\"      :  doc.displayPicture1,\n              \"profile.status\"              :  'Active',\n              \"profile.createdOn\"           :  new Date(),\n              \"driverAddressOne\"            : \"\",\n              \"driverAddressTwo\"            : \"\",\n              \"driverAddressCity\"           : \"\",\n              \"driverAddressState\"          : \"\",\n              \"driverAddressZip\"            : \"\",\n              \"driverLicenseNumber\"         : \"\",\n              \"driverLicenseState\"          : \"\",\n              \"driverLicenseNumberExpiryMM\" : \"\",\n              \"driverLicenseNumberExpiryYY\" : \"\",\n              \"driverAutoInsuranceIssueBy\"  : \"\",\n              \"driverAutoInsurancePolicy\"   : \"\",\n              \"driverAutoInsuranceExpiryMM\" : \"\",\n              \"driverAutoInsuranceExpiryYY\" : \"\",\n\n        } //End of set\n      }\n      );\n\n    Accounts.setPassword(urlUID, passwordVar1);\n  },\n\n  updateUserByUser: function (urlUID, doc , userFormValues) {\n      Meteor.users.update(\n        {'_id': urlUID },\n        {\n          $set:{\n              \"emails.0.address\" : doc.emailVar1,\n              \"profile.firstName\": doc.firstNameVar1 ,\n              \"profile.userName\": doc.userNameVar1,\n              \"profile.signGender\": doc.signGenderVar1,\n              \"profile.homeAdd\": doc.homeAddVar1,\n              \"profile.city\": doc.cityVar1,\n              \"profile.state\": doc.stateVar1,\n              \"profile.zip\": doc.zipVar1,\n              \"profile.country\": doc.countryVar1, \n              \"profile.mobNumber\": doc.mobNumberVar1,\n              \"profile.alterNumber\": doc.alterNumberVar1,\n              \"profile.salutation\": doc.salutationVar1,\n              \"profile.lastName\": doc.lastNameVar1,\n              \"profile.displayPicture\":  doc.displayPicture1,\n              \"profile.signupConfirmPassword\":  userFormValues.signupConfirmPasswordVar1,\n                      \"profile.status\"      :  'Active',\n                      \"profile.createdOn\" :  new Date(),\n\n        } //End of set\n      }\n      );\n\n    Accounts.setPassword(urlUID, userFormValues.passwordVar1);\n  },\n\n  updaterole: function (roleId, roleName) {\n    // console.log(roleId);\n    // console.log(roleName);\n      Meteor.roles.update({'_id': roleId },\n                          {\n                            $set:{\n                                    \"name\": roleName,\n                          } //End of set\n                        });\n  },\n\n  addrole: function (roleName) {\n      Roles.createRole(roleName);\n  },\n\n  deleteUser: function(userId){\n        Meteor.users.remove({'_id': userId});\n  },\n\n    deleteRole: function(roleID){\n      // Roles.deleteRole('super-admin');\n        Meteor.roles.remove({'_id': roleID});\n  },\n\n    addRoles: function(newID , defaultRoleconfig){\n    // console.log('addRoles'+ newID);\n    Roles.addUsersToRoles(newID, defaultRoleconfig);\n\n  },\n\n    'addRoleToUser': function(role, checkedUsersList){\n    // console.log('role : ' + role);\n    var addRoles = [role];\n    // console.log(checkedUsersList.length);\n    for (var i=0; i<checkedUsersList.length; i++) {\n      // console.log(checkedUsersList[i]);\n      var userId = checkedUsersList[i];\n      if(checkedUsersList[i] != null){\n        Roles.addUsersToRoles(userId, addRoles);\n      }\n      \n    }\n  },\n\n    removeRoleFromUser: function(role, checkedUsersList){\n    var rmRoles = [role];\n    for (var i=0; i<checkedUsersList.length; i++) {\n      Roles.removeUsersFromRoles(checkedUsersList[i], rmRoles);\n    }\n\n  },\n\n    blockSelectedUser: function(checkedUsersList){\n    // console.log('Serverside-Checked checkboxes:'+ array);\n    for (var i=0; i<checkedUsersList.length; i++) {\n        // console.log('value: ' + checkedUsersList[i]);\n\n      Meteor.users.update(\n        {'_id': checkedUsersList[i] },\n        {\n          $set:{\n              \"profile.status\": 'Blocked' ,\n        } //End of set\n      }\n      ); //end of update\n    } //End of for loop\n\n  }, //end of blockuser function\n\n    activeSelectedUser: function(checkedUsersList){\n    // console.log('Serverside-Checked checkboxes:'+ array);\n    for (var i=0; i<checkedUsersList.length; i++) {\n        // console.log('value: ' + checkedUsersList[i]);\n\n      Meteor.users.update(\n        {'_id': checkedUsersList[i] },\n        {\n          $set:{\n              \"profile.status\": 'Active' ,\n        } //End of set\n      }\n      ); //end of update\n    } //End of for loop\n\n  }, //end of Active function\n\n    deleteSelectedUser: function(checkedUsersList){\n    // console.log('Serverside-Checked checkboxes:'+ array);\n    for (var i=0; i<checkedUsersList.length; i++) {\n        // console.log('value: ' + array[i]);\n      Meteor.users.remove({'_id': checkedUsersList[i]}); //end of update\n    } //End of for loop\n\n  }, //end of Deleteuser function\n\n\n  sendEmail1: function (to , from, subject ,body) {\n    check([to, from, subject, body], [String]);\n    // console.log('to : '+ to);\n    // console.log('from : ' + from);\n    // console.log('subject : ' + subject);\n    // console.log('body : ' + body);\n    // Let other method calls from the same client start running,\n    // without waiting for the email sending to complete.\n    this.unblock();\n    Email.send({\n      to: to,\n      from: from,\n      subject: subject,\n      text: body\n    });\n  }, //End of Send Email Function\n\n  'sendEmailnNotification': function (to , from, subject ,body) {\n      Email.send({\n        to: to,\n        from: from,\n        subject: subject,\n        html: body\n      });\n  }, //End of Send Email Function\n\n  'resetPasswordUsingotp': function(id, password){\n    Accounts.setPassword(id, password);\n  }\n\n\n});\n\nMeteor.startup(() => {\n  \n    if ( !Meteor.users.findOne({username : 'superAdmin'})) {\n    \n    superUserId = Accounts.createUser({\n              username : 'superAdmin',\n              email    : 'superAdmin@gmail.com',\n              password : 'superAdmin',\n              profile  : { 'status' : 'Active','vehicles':[] },\n          });\n\n    Roles.addUsersToRoles(superUserId, \"superAdmin\");\n\n    Meteor.call('createUserByAdminSetEmailToTrue', superUserId,\n                function(error, result) { \n                    if (error) {\n                        console.log ( error ); \n                    } //info about what went wrong \n                    else {\n                        console.log ( \"Admin email verified by default\");\n                    }//the _id of new object if successful\n                });\n    } // Create super admin\n    \n  process.env.MAIL_URL = \"smtp://rashmimhatre1000:rashmimhatre1000@smtp.googlemail.com:587\";\n\n  Accounts.emailTemplates.siteName = \"ASSUREiD\";\n  Accounts.emailTemplates.from = 'ASSUREiD Admin<karishma.kottarwar@gmail.com>';\n\n  Accounts.urls.resetPassword = function(token) {\n    return Meteor.absoluteUrl('reset-password/' + token);\n  }\n\n  // Configures \"verify email\" email link\n  Accounts.urls.verifyEmail = function(token){\n      return Meteor.absoluteUrl(\"verify-email/\" + token);\n  };\n\n  // Welcome and Email Verification\n\n  Accounts.emailTemplates.verifyEmail.subject = function(user) {\n    return 'Verify Account with ASSUREiD';\n  };\n\n  Accounts.emailTemplates.verifyEmail.html = function(user, url) {\n    return 'Hello,<br><br>Thank You for Signing up on ASSUREiD. Please verify your email address to continue the site use.<br><br>To verify your account, enter the <b>OTP : '+ user.profile.sentEmailOTP + ' </b><br><br>Regards,<br>Team ASSUREiD';\n  };\n\n  // Accounts.emailTemplates.verifyEmail.html = function (user, url) {\n  //   // return html string\n  //   return Handlebars.templates.verifyEmail_html({\n  //     emailAddress: user.email(),\n  //     url: url,\n  //   });\n  // };\n\n});"]},"hash":"b49201c4f99009a8d34e859e30777678d0f04dd0"}
