{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["Portfolios","TempPortfolioImages","TempPortfolioLogoImages"],"specifiers":[{"kind":"local","local":"Portfolios","exported":"Portfolios"},{"kind":"local","local":"TempPortfolioImages","exported":"TempPortfolioImages"},{"kind":"local","local":"TempPortfolioLogoImages","exported":"TempPortfolioLogoImages"}]}}},"options":{"filename":"imports/dashboard/reactCMS/api/Portfolios.js","filenameRelative":"imports/dashboard/reactCMS/api/Portfolios.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/reactCMS/api/Portfolios.js.map","sourceFileName":"imports/dashboard/reactCMS/api/Portfolios.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Portfolios"},"ignored":false,"code":"module.export({\n  Portfolios: () => Portfolios,\n  TempPortfolioImages: () => TempPortfolioImages,\n  TempPortfolioLogoImages: () => TempPortfolioLogoImages\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Portfolios = new Mongo.Collection(\"portfolios\");\nconst TempPortfolioImages = new Mongo.Collection(\"tempPortfolioImages\");\nconst TempPortfolioLogoImages = new Mongo.Collection(\"tempPortfolioLogoImages\");\n\nif (Meteor.isServer) {\n  Meteor.publish('portfolios', () => {\n    return Portfolios.find({});\n  });\n  Meteor.publish('tempPortfolioImages', () => {\n    return TempPortfolioImages.find({});\n  });\n  Meteor.publish('tempPortfolioLogoImages', () => {\n    return TempPortfolioLogoImages.find({});\n  });\n  Meteor.methods({\n    'uploadTempPortfolioImages': function (id, amazonUrl, uploadTime) {\n      TempPortfolioImages.insert({\n        'id': id,\n        'amazonUrl': amazonUrl,\n        'uploadTime': new Date(),\n        'authorUserId': id,\n        'submitted': false\n      });\n    },\n    'uploadTempPortfolioLogoImages': function (id, amazonUrl, uploadTime) {\n      TempPortfolioLogoImages.insert({\n        'id': id,\n        'logoAmazonUrl': amazonUrl,\n        'uploadTime': new Date(),\n        'authorUserId': id,\n        'submitted': false\n      });\n    },\n    'updateTempPortfolioImages': function (_id, boolean) {\n      TempPortfolioImages.update({\n        '_id': _id\n      }, {\n        $set: {\n          'submitted': boolean\n        }\n      });\n    },\n    'updateTempPortfolioLogoImages': function (_id, boolean) {\n      TempPortfolioLogoImages.update({\n        '_id': _id\n      }, {\n        $set: {\n          'submitted': boolean\n        }\n      });\n    },\n    'removeTempPortfolioImages': function (id) {\n      TempPortfolioImages.remove({\n        'id': id,\n        'submitted': true\n      });\n    },\n    'removeTempPortfolioLogoImages': function (id) {\n      TempPortfolioLogoImages.remove({\n        'id': id,\n        'submitted': true\n      });\n    },\n    'removePortfolioUnsubmitImages': function (id) {\n      TempPortfolioImages.remove({\n        'id': id,\n        'submitted': false\n      });\n    },\n    'removePortfolioLogoUnsubmitImages': function (id) {\n      TempPortfolioLogoImages.remove({\n        'id': id,\n        'submitted': false\n      });\n    },\n    'removePortfolioLogoUrlImages': function (url) {\n      TempPortfolioLogoImages.remove({\n        'logoAmazonUrl': url\n      });\n    },\n    'createPortfolioPage': function (portfolioPageTitle, portfolioPageName, portfolioVideoLink, portfolioPageBody, s3, logoS3, userId, updateTimestamp) {\n      console.log(s3);\n      Portfolios.insert({\n        'portfolioPageTitle': portfolioPageTitle,\n        'portfolioPageName': portfolioPageName,\n        'portfolioPageBody': portfolioPageBody,\n        'portfolioVideoLink': portfolioVideoLink,\n        's3': s3,\n        'logoS3': logoS3,\n        'createdAt': new Date(),\n        'authorUserId': userId,\n        'lastModified': updateTimestamp\n      });\n    },\n    'updatePortfolioPage': function (id, portfolioPageTitle, portfolioPageName, portfolioVideoLink, portfolioPageBody, userId, updateTimestamp) {\n      Portfolios.update({\n        '_id': id\n      }, {\n        $set: {\n          'portfolioPageTitle': portfolioPageTitle,\n          'portfolioPageName': portfolioPageName,\n          'portfolioPageBody': portfolioPageBody,\n          'portfolioVideoLink': portfolioVideoLink,\n          'authorUserId': userId,\n          'lastModified': updateTimestamp //End of set\n\n        }\n      });\n    },\n    'updateEditPortfolioPage': function (amazonUrl) {\n      Portfolios.update({\n        \"s3.amazonUrl\": amazonUrl\n      }, {\n        $set: {\n          's3.$.amazonUrl': \"\",\n          's3.$.uploadTime': \"\"\n        }\n      });\n    },\n    'updateEditPortfolioLogoPage': function (amazonUrl) {\n      Portfolios.update({\n        \"logoS3.logoAmazonUrl\": amazonUrl\n      }, {\n        $set: {\n          'logoS3.$.logoAmazonUrl': \"\",\n          'logoS3.$.uploadTime': \"\"\n        }\n      });\n    },\n    'updatePortfolioAmazonUrl': function (amazonUrl, uploadTime, id) {\n      Portfolios.update({\n        '_id': id\n      }, {\n        $push: {\n          's3': {\n            'amazonUrl': amazonUrl,\n            'uploadTime': uploadTime\n          }\n        }\n      });\n    },\n    'updatePortfolioLogoAmazonUrl': function (amazonUrl, uploadTime, id) {\n      Portfolios.update({\n        '_id': id\n      }, {\n        $push: {\n          'logoS3': {\n            'logoAmazonUrl': amazonUrl,\n            'uploadTime': uploadTime\n          }\n        }\n      });\n    },\n    'deletePortfolioPage': function (id) {\n      Portfolios.remove({\n        '_id': id\n      });\n    }\n  });\n}","map":{"version":3,"sources":["imports/dashboard/reactCMS/api/Portfolios.js"],"names":["module","export","Portfolios","TempPortfolioImages","TempPortfolioLogoImages","Mongo","watch","require","v","Meteor","Collection","isServer","publish","find","methods","id","amazonUrl","uploadTime","insert","Date","_id","boolean","update","$set","remove","url","portfolioPageTitle","portfolioPageName","portfolioVideoLink","portfolioPageBody","s3","logoS3","userId","updateTimestamp","console","log","$push"],"mappings":"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","file":"imports/dashboard/reactCMS/api/Portfolios.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const Portfolios = new Mongo.Collection(\"portfolios\");\nexport const TempPortfolioImages = new Mongo.Collection(\"tempPortfolioImages\");\nexport const TempPortfolioLogoImages = new Mongo.Collection(\"tempPortfolioLogoImages\");\n\nif(Meteor.isServer){\n    Meteor.publish('portfolios',()=>{\n        return Portfolios.find({});\n    });\n    Meteor.publish('tempPortfolioImages',()=>{\n        return TempPortfolioImages.find({});\n    });\n    Meteor.publish('tempPortfolioLogoImages',()=>{\n        return TempPortfolioLogoImages.find({});\n    });\n\n    Meteor.methods({\n      'uploadTempPortfolioImages':function(id,amazonUrl,uploadTime){\n    \t\tTempPortfolioImages.insert({\n    \t\t\t'id'             : id,\n    \t\t\t'amazonUrl'      : amazonUrl,\n    \t\t\t'uploadTime'     : new Date(),\n          'authorUserId'   : id,\n          'submitted'       : false,\n    \t\t});\n    \t},\n      'uploadTempPortfolioLogoImages':function(id,amazonUrl,uploadTime){\n    \t\tTempPortfolioLogoImages.insert({\n    \t\t\t'id'             : id,\n    \t\t\t'logoAmazonUrl'  : amazonUrl,\n    \t\t\t'uploadTime'     : new Date(),\n          'authorUserId'   : id,\n          'submitted'      : false,\n    \t\t});\n    \t},\n      'updateTempPortfolioImages':function(_id,boolean){\n    \t\tTempPortfolioImages.update({\n    \t\t\t'_id'           : _id},\n          {$set:{\n    \t\t\t'submitted'      : boolean,\n    \t\t}});\n    \t},\n      'updateTempPortfolioLogoImages':function(_id,boolean){\n        TempPortfolioLogoImages.update({\n          '_id'           : _id},\n          {$set:{\n          'submitted'      : boolean,\n        }});\n      },\n      'removeTempPortfolioImages':function(id){\n        TempPortfolioImages.remove({'id':id,'submitted':true});\n      },\n      'removeTempPortfolioLogoImages':function(id){\n        TempPortfolioLogoImages.remove({'id':id,'submitted':true});\n      },\n      'removePortfolioUnsubmitImages':function(id){\n        TempPortfolioImages.remove({'id':id,'submitted':false});\n      },\n      'removePortfolioLogoUnsubmitImages':function(id){\n        TempPortfolioLogoImages.remove({'id':id,'submitted':false});\n      },\n      'removePortfolioLogoUrlImages':function(url){\n        TempPortfolioLogoImages.remove({'logoAmazonUrl':url});\n      },\n    \t'createPortfolioPage':function(portfolioPageTitle,portfolioPageName,portfolioVideoLink,portfolioPageBody,s3,logoS3,userId,updateTimestamp){\n        console.log(s3);\n    \t\tPortfolios.insert({\n    \t\t\t'portfolioPageTitle'  : portfolioPageTitle,\n    \t\t\t'portfolioPageName'   : portfolioPageName,\n    \t\t\t'portfolioPageBody'   : portfolioPageBody,\n          'portfolioVideoLink'  : portfolioVideoLink,\n          's3'                  : s3,\n          'logoS3'              : logoS3,\n    \t\t\t'createdAt'           : new Date(),\n          'authorUserId'        : userId,\n          'lastModified'        : updateTimestamp,\n    \t\t});\n    \t},\n      'updatePortfolioPage':function(id,portfolioPageTitle,portfolioPageName,portfolioVideoLink,portfolioPageBody,userId,updateTimestamp){\n    \t\tPortfolios.update(\n    \t\t\t{ '_id': id },\n    \t        {\n    \t          $set:{\n                  'portfolioPageTitle'  : portfolioPageTitle,\n            \t\t\t'portfolioPageName'   : portfolioPageName,\n            \t\t\t'portfolioPageBody'   : portfolioPageBody,\n                  'portfolioVideoLink'  : portfolioVideoLink,\n                  'authorUserId'        : userId,\n                  'lastModified'        : updateTimestamp,\n    \t        } //End of set\n    \t      }\n    \t\t);\n    \t},\n      'updateEditPortfolioPage':function(amazonUrl){\n    \t\tPortfolios.update(\n    \t\t\t{ \"s3.amazonUrl\": amazonUrl },\n    \t        {\n    \t          $set:{\n\n                  's3.$.amazonUrl'   : \"\",\n                  's3.$.uploadTime'  : \"\",\n    \t        }\n    \t      }\n    \t\t);\n    \t},\n      'updateEditPortfolioLogoPage':function(amazonUrl){\n    \t\tPortfolios.update(\n    \t\t\t{ \"logoS3.logoAmazonUrl\": amazonUrl },\n    \t        {\n    \t          $set:{\n\n                  'logoS3.$.logoAmazonUrl'   : \"\",\n                  'logoS3.$.uploadTime'      : \"\",\n    \t        }\n    \t      }\n    \t\t);\n    \t},\n      'updatePortfolioAmazonUrl':function(amazonUrl,uploadTime,id){\n    \t\tPortfolios.update(\n    \t\t\t   { '_id': id },\n    \t        {\n    \t          $push:{\n                    's3':\n                    {\n                      'amazonUrl': amazonUrl,\n                      'uploadTime':uploadTime,\n                    }\n    \t        }\n    \t      }\n    \t\t);\n    \t},\n      'updatePortfolioLogoAmazonUrl':function(amazonUrl,uploadTime,id){\n    \t\tPortfolios.update(\n    \t\t\t   { '_id': id },\n    \t        {\n    \t          $push:{\n                    'logoS3':\n                    {\n                      'logoAmazonUrl': amazonUrl,\n                      'uploadTime':uploadTime,\n                    }\n    \t        }\n    \t      }\n    \t\t);\n    \t},\n      'deletePortfolioPage':function(id){\n     \t\t Portfolios.remove({'_id': id});\n\n    \t},\n    });\n}\n"]},"hash":"1302914f6b0f604f13a52304299361d462f0a371"}
