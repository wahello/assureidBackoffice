{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../UploadToServer/UploadBlogImgsServer.js","imported":["BlogImage"],"specifiers":[{"kind":"named","imported":"BlogImage","local":"BlogImage"}]}],"exports":{"exported":["BlogPages","TempBlogImages"],"specifiers":[{"kind":"local","local":"BlogPages","exported":"BlogPages"},{"kind":"local","local":"TempBlogImages","exported":"TempBlogImages"}]}}},"options":{"filename":"imports/dashboard/reactCMS/api/BlogPages.js","filenameRelative":"imports/dashboard/reactCMS/api/BlogPages.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/reactCMS/api/BlogPages.js.map","sourceFileName":"imports/dashboard/reactCMS/api/BlogPages.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"BlogPages"},"ignored":false,"code":"module.export({\n  BlogPages: function () {\n    return BlogPages;\n  },\n  TempBlogImages: function () {\n    return TempBlogImages;\n  }\n});\nvar Mongo = void 0;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar BlogImage = void 0;\nmodule.watch(require(\"../UploadToServer/UploadBlogImgsServer.js\"), {\n  BlogImage: function (v) {\n    BlogImage = v;\n  }\n}, 2);\nvar BlogPages = new Mongo.Collection(\"blogPages\");\nvar TempBlogImages = new Mongo.Collection(\"tempBlogImages\");\n\nif (Meteor.isServer) {\n  Meteor.publish('blogPages', function () {\n    return BlogPages.find({});\n  });\n  Meteor.publish('tempBlogImages', function () {\n    return TempBlogImages.find({});\n  });\n  Meteor.publish('singleBlog', function (_id) {\n    return TempBlogImages.find({\n      \"_id\": _id\n    });\n  });\n  Meteor.methods({\n    \"addNewTemporaryBlogImage\": function (id) {\n      var data = BlogImage.findOne({\n        \"_id\": id\n      });\n      var link = data.link();\n      TempBlogImages.insert({\n        \"_id\": \"1\",\n        \"userId\": Meteor.userId(),\n        \"link\": link,\n        \"createdAt\": new Date()\n      }, function (error, result) {});\n    },\n    \"addNewTemporaryBlogVideo\": function (id) {\n      var data = BlogImage.findOne({\n        \"_id\": id\n      });\n      var link = data.link();\n      TempBlogImages.insert({\n        \"_id\": \"2\",\n        \"userId\": Meteor.userId(),\n        \"link\": link,\n        \"createdAt\": new Date()\n      }, function (error, result) {});\n    },\n    //  'uploadTempImages':function(id,amazonUrl,uploadTime){\n    // \tTempImages.insert({\n    // \t\t'id'             : id,\n    // \t\t'amazonUrl'      : amazonUrl,\n    // \t\t'uploadTime'     : new Date(),\n    //      'authorUserId'   : id,\n    //      'submitted'       : false, \n    // \t});\n    // },\n    //  'updateTempImages':function(_id,boolean){\n    // \tTempImages.update({\n    // \t\t'_id'           : _id},\n    //      {$set:{\n    // \t\t'submitted'      : boolean,\n    // \t}});\n    // },\n    //  'removeTempImages':function(id){\n    //    TempImages.remove({'id':id,'submitted':true});\n    //  },\n    //  'removeUnsubmitImages':function(id){\n    //    TempImages.remove({'id':id,'submitted':false});\n    //  },\n    //  'removeUrlImages':function(url){\n    //    TempImages.remove({'amazonUrl':url});\n    //  },\n    'createBlogPage': function (blogPageName, blogMediaType, youTubeVideoLink, blogPageBody, userId, updateTimestamp) {\n      var getImage = TempBlogImages.findOne({\n        \"_id\": \"1\"\n      }, {\n        sort: {\n          createdAt: -1,\n          limit: 1\n        }\n      });\n\n      if (getImage) {\n        var localImage = getImage.link;\n      } else {\n        var localImage = \"/images/assureid/noImage.png\";\n      }\n\n      var getVideo = TempBlogImages.findOne({\n        \"_id\": \"2\"\n      }, {\n        sort: {\n          createdAt: -1,\n          limit: 1\n        }\n      });\n      console.log(\"getVideo\", getVideo);\n\n      if (getVideo) {\n        var localVideo = getVideo.link;\n      } else {\n        var localVideo = \"/images/assureid/noImage.png\";\n      }\n\n      BlogPages.insert({\n        'blogPageName': blogPageName,\n        'blogPageBody': blogPageBody,\n        'blogMediaType': blogMediaType,\n        'youTubeVideoLink': youTubeVideoLink,\n        'blogImageFile': localImage,\n        'blogLocalVideo': localVideo,\n        'authorUserId': userId,\n        'lastModified': updateTimestamp,\n        'createdAt': new Date()\n      });\n      TempBlogImages.remove({});\n    },\n    'updateBlogPage': function (id, blogPageName, blogMediaType, youTubeVideoLink, blogPageBody, userId, lastModified) {\n      var data = TempBlogImages.findOne({\n        \"userId\": Meteor.userId(),\n        \"_id\": \"1\"\n      });\n\n      if (data) {\n        var imageLink = data.link;\n      } else {\n        var oldImgData = BlogPages.findOne({\n          \"_id\": id\n        }, {\n          sort: {\n            \"createdAt\": -1\n          }\n        });\n\n        if (oldImgData) {\n          var imageLink = oldImgData.blogImage;\n        }\n      }\n\n      var data = TempBlogImages.findOne({\n        \"userId\": Meteor.userId(),\n        \"_id\": \"2\"\n      });\n\n      if (data) {\n        var localvideoLink = data.link;\n      } else {\n        var oldVideoData = BlogPages.findOne({\n          \"_id\": id\n        }, {\n          sort: {\n            \"createdAt\": -1\n          }\n        });\n\n        if (oldVideoData) {\n          var localvideoLink = oldVideoData.blogLocalVideo;\n        }\n      }\n\n      BlogPages.update({\n        '_id': id\n      }, {\n        $set: {\n          'blogPageName': blogPageName,\n          'blogPageBody': blogPageBody,\n          'blogMediaType': blogMediaType,\n          'youTubeVideoLink': youTubeVideoLink,\n          'blogImageFile': imageLink,\n          'blogLocalVideo': localvideoLink,\n          'authorUserId': userId,\n          'lastModified': lastModified //End of set\n\n        }\n      });\n      TempBlogImages.remove({});\n    },\n    //  'updateEditBlogPage':function(amazonUrl){\n    // \tBlogPages.update(\n    // \t\t{ \"s3.amazonUrl\": amazonUrl },\n    //         {\n    //           $set:{\n    //              's3.$.amazonUrl'   : \"\",\n    //              's3.$.uploadTime'  : \"\",\n    //         } //End of set\n    //       }\n    // \t);\n    // },\n    //  'updateAmazonUrl':function(amazonUrl,uploadTime,id){\n    // \tBlogPages.update(\n    // \t\t   { '_id': id },\n    //         {\n    //           $push:{\n    //                's3':\n    //                {\n    //                  'amazonUrl': amazonUrl,\n    //                  'uploadTime':uploadTime,\n    //                }\n    //         }\n    //       }\n    // \t);\n    // },\n    'deleteBlogPage': function (id) {\n      BlogPages.remove({\n        '_id': id\n      }); // var BlogImages = BlogImage.findOne({\"getblogImage\" : getblogImage});\n    }\n  });\n}","map":{"version":3,"sources":["imports/dashboard/reactCMS/api/BlogPages.js"],"names":["module","export","BlogPages","TempBlogImages","Mongo","watch","require","v","Meteor","BlogImage","Collection","isServer","publish","find","_id","methods","id","data","findOne","link","insert","userId","Date","error","result","blogPageName","blogMediaType","youTubeVideoLink","blogPageBody","updateTimestamp","getImage","sort","createdAt","limit","localImage","getVideo","console","log","localVideo","remove","lastModified","imageLink","oldImgData","blogImage","localvideoLink","oldVideoData","blogLocalVideo","update","$set"],"mappings":"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","file":"imports/dashboard/reactCMS/api/BlogPages.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const BlogPages = new Mongo.Collection(\"blogPages\");\nexport const TempBlogImages = new Mongo.Collection(\"tempBlogImages\");\nimport { BlogImage } from \"../UploadToServer/UploadBlogImgsServer.js\";\n\n\nif(Meteor.isServer){\n    Meteor.publish('blogPages',()=>{\n        return BlogPages.find({});\n    });\n    Meteor.publish('tempBlogImages',()=>{\n        return TempBlogImages.find({});\n    });\n    Meteor.publish('singleBlog',(_id)=>{\n        return TempBlogImages.find({\"_id\":_id});   \n    });\n\n    Meteor.methods({\n     \"addNewTemporaryBlogImage\": function (id) {\n        var data      = BlogImage.findOne({\"_id\" : id});\n        var link = data.link();\n        TempBlogImages.insert({\n          \"_id\": \"1\",\n          \"userId\": Meteor.userId(),\n          \"link\": link,\n          \"createdAt\":new Date(),\n          },(error, result)=>{\n        });\n      }, \n      \"addNewTemporaryBlogVideo\": function (id) {\n        var data      = BlogImage.findOne({\"_id\" : id});\n        var link = data.link();\n        TempBlogImages.insert({\n          \"_id\": \"2\",\n          \"userId\": Meteor.userId(), \n          \"link\": link,\n          \"createdAt\":new Date(),\n          },(error, result)=>{\n        });\n      }, \n\n     //  'uploadTempImages':function(id,amazonUrl,uploadTime){\n    \t// \tTempImages.insert({\n    \t// \t\t'id'             : id,\n    \t// \t\t'amazonUrl'      : amazonUrl,\n    \t// \t\t'uploadTime'     : new Date(),\n     //      'authorUserId'   : id,\n     //      'submitted'       : false, \n    \t// \t});\n    \t// },\n     //  'updateTempImages':function(_id,boolean){\n    \t// \tTempImages.update({\n    \t// \t\t'_id'           : _id},\n     //      {$set:{\n    \t// \t\t'submitted'      : boolean,\n    \t// \t}});\n    \t// },\n     //  'removeTempImages':function(id){\n     //    TempImages.remove({'id':id,'submitted':true});\n     //  },\n     //  'removeUnsubmitImages':function(id){\n     //    TempImages.remove({'id':id,'submitted':false});\n     //  },\n     //  'removeUrlImages':function(url){\n     //    TempImages.remove({'amazonUrl':url});\n     //  },\n\n    'createBlogPage':function(blogPageName,blogMediaType,youTubeVideoLink,blogPageBody,userId,updateTimestamp){\n        var getImage              = TempBlogImages.findOne({\"_id\" : \"1\"}, {sort: {createdAt: -1, limit: 1}});\n        if(getImage){\n          var localImage          = getImage.link;\n        }else{\n          var localImage          = \"/images/assureid/noImage.png\";\n        }\n\n        var getVideo              = TempBlogImages.findOne({\"_id\" : \"2\"}, {sort: {createdAt: -1, limit: 1}});\n        console.log(\"getVideo\",getVideo);\n        if(getVideo){\n          var localVideo          = getVideo.link;\n        }else{\n          var localVideo          = \"/images/assureid/noImage.png\";\n        }\n\n    \tBlogPages.insert({\n    \t  'blogPageName'     : blogPageName,\n    \t  'blogPageBody'     : blogPageBody,\n          'blogMediaType'    : blogMediaType,\n          'youTubeVideoLink' : youTubeVideoLink,\n          'blogImageFile'    : localImage,\n          'blogLocalVideo'   : localVideo,\n          'authorUserId'     : userId,\n          'lastModified'     : updateTimestamp, \n          'createdAt'        : new Date(),\n    \t});\n        TempBlogImages.remove({});\n    },\n    'updateBlogPage':function(id,blogPageName,blogMediaType,youTubeVideoLink,blogPageBody,userId,lastModified){\n        var data = TempBlogImages.findOne({\"userId\":Meteor.userId(),\"_id\" : \"1\"});\n        if(data){\n            var imageLink     = data.link;\n        }else{\n            var oldImgData    = BlogPages.findOne({\"_id\":id},{sort:{\"createdAt\":-1}});\n            if(oldImgData){\n              var imageLink   = oldImgData.blogImage;\n            }\n        }\n\n        var data = TempBlogImages.findOne({\"userId\":Meteor.userId(),\"_id\" : \"2\"});\n          if(data){\n              var localvideoLink       = data.link;\n          }else{\n              var oldVideoData         = BlogPages.findOne({\"_id\":id},{sort:{\"createdAt\":-1}});\n              if(oldVideoData){\n                var localvideoLink     = oldVideoData.blogLocalVideo;\n              }\n          }\n\n\t\tBlogPages.update(\n\t\t\t{ '_id': id },\n\t        {\n\t          $set:{\n              'blogPageName'     : blogPageName,\n    \t\t  'blogPageBody'     : blogPageBody,\n              'blogMediaType'    : blogMediaType,\n              'youTubeVideoLink' : youTubeVideoLink,\n              'blogImageFile'    : imageLink,\n              'blogLocalVideo'   : localvideoLink,\n              'authorUserId'     : userId,\n              'lastModified'     : lastModified,\n\t        } //End of set\n\t      });\n        TempBlogImages.remove({});\n    },\n     //  'updateEditBlogPage':function(amazonUrl){\n    \t// \tBlogPages.update(\n    \t// \t\t{ \"s3.amazonUrl\": amazonUrl },\n    \t//         {\n    \t//           $set:{\n\n     //              's3.$.amazonUrl'   : \"\",\n     //              's3.$.uploadTime'  : \"\",\n    \t//         } //End of set\n    \t//       }\n    \t// \t);\n    \t// },\n     //  'updateAmazonUrl':function(amazonUrl,uploadTime,id){\n    \t// \tBlogPages.update(\n    \t// \t\t   { '_id': id },\n    \t//         {\n    \t//           $push:{\n     //                's3':\n     //                {\n     //                  'amazonUrl': amazonUrl,\n     //                  'uploadTime':uploadTime,\n     //                }\n    \t//         }\n    \t//       }\n    \t// \t);\n    \t// },\n      'deleteBlogPage':function(id){\n     \t  BlogPages.remove({'_id': id});\n          // var BlogImages = BlogImage.findOne({\"getblogImage\" : getblogImage});\n    \t},\n    });\n}\n"]},"hash":"40a02081ef220d45ec083fed6637917889175777"}
