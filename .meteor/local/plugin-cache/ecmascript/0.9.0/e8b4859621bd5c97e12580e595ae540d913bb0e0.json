{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["Blocks","TempBlockImages"],"specifiers":[{"kind":"local","local":"Blocks","exported":"Blocks"},{"kind":"local","local":"TempBlockImages","exported":"TempBlockImages"}]}}},"options":{"filename":"imports/dashboard/reactCMS/api/Blocks.js","filenameRelative":"imports/dashboard/reactCMS/api/Blocks.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/reactCMS/api/Blocks.js.map","sourceFileName":"imports/dashboard/reactCMS/api/Blocks.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Blocks"},"ignored":false,"code":"module.export({\n  Blocks: function () {\n    return Blocks;\n  },\n  TempBlockImages: function () {\n    return TempBlockImages;\n  }\n});\nvar Mongo = void 0;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Blocks = new Mongo.Collection(\"blocks\");\nvar TempBlockImages = new Mongo.Collection(\"tempBlockImages\");\n\nif (Meteor.isServer) {\n  Meteor.publish('blocks', function () {\n    return Blocks.find({});\n  });\n  Meteor.publish('tempBlockImages', function () {\n    return TempBlockImages.find({});\n  });\n  Meteor.methods({\n    'uploadTempBlockImages': function (id, amazonUrl, uploadTime) {\n      TempBlockImages.insert({\n        'id': id,\n        'amazonUrl': amazonUrl,\n        'uploadTime': new Date(),\n        'authorUserId': id,\n        'submitted': false\n      });\n    },\n    'updateTempBlockImages': function (_id, boolean) {\n      TempBlockImages.update({\n        '_id': _id\n      }, {\n        $set: {\n          'submitted': boolean\n        }\n      });\n    },\n    'removeTempBlockImages': function (id) {\n      TempBlockImages.remove({\n        'id': id,\n        'submitted': true\n      });\n    },\n    'removeBlockUnsubmitImages': function (id) {\n      TempBlockImages.remove({\n        'id': id,\n        'submitted': false\n      });\n    },\n    'removeBlockUrlImages': function (url) {\n      TempBlockImages.remove({\n        'amazonUrl': url\n      });\n    },\n    'createBlock': function (blockName, blockBody, s3, userId, updateTimestamp) {\n      console.log(s3);\n      Blocks.insert({\n        'blockName': blockName,\n        'blockBody': blockBody,\n        's3': s3,\n        'createdAt': new Date(),\n        'authorUserId': userId,\n        'lastModified': updateTimestamp\n      });\n    },\n    'updateBlock': function (id, blockName, blockBody, userId, updateTimestamp) {\n      Blocks.update({\n        '_id': id\n      }, {\n        $set: {\n          'blockName': blockName,\n          'blockBody': blockBody,\n          'authorUserId': userId,\n          'lastModified': updateTimestamp //End of set\n\n        }\n      });\n    },\n    'updateEditBlock': function (amazonUrl) {\n      Blocks.update({\n        \"s3.amazonUrl\": amazonUrl\n      }, {\n        $set: {\n          's3.$.amazonUrl': \"\",\n          's3.$.uploadTime': \"\" //End of set\n\n        }\n      });\n    },\n    'updateBlockAmazonUrl': function (amazonUrl, uploadTime, id) {\n      Blocks.update({\n        '_id': id\n      }, {\n        $push: {\n          's3': {\n            'amazonUrl': amazonUrl,\n            'uploadTime': uploadTime\n          }\n        }\n      });\n    },\n    'deleteBlock': function (id) {\n      Blocks.remove({\n        '_id': id\n      });\n    }\n  });\n}","map":{"version":3,"sources":["imports/dashboard/reactCMS/api/Blocks.js"],"names":["module","export","Blocks","TempBlockImages","Mongo","watch","require","v","Meteor","Collection","isServer","publish","find","methods","id","amazonUrl","uploadTime","insert","Date","_id","boolean","update","$set","remove","url","blockName","blockBody","s3","userId","updateTimestamp","console","log","$push"],"mappings":"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","file":"imports/dashboard/reactCMS/api/Blocks.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const Blocks = new Mongo.Collection(\"blocks\");\nexport const TempBlockImages = new Mongo.Collection(\"tempBlockImages\");\nif(Meteor.isServer){\n    Meteor.publish('blocks',()=>{\n        return Blocks.find({});\n    });\n    Meteor.publish('tempBlockImages',()=>{\n        return TempBlockImages.find({});\n    });\n\n    Meteor.methods({\n      'uploadTempBlockImages':function(id,amazonUrl,uploadTime){\n    \t\tTempBlockImages.insert({\n    \t\t\t'id'             : id,\n    \t\t\t'amazonUrl'      : amazonUrl,\n    \t\t\t'uploadTime'     : new Date(),\n          'authorUserId'   : id,\n          'submitted'       : false,\n    \t\t});\n    \t},\n      'updateTempBlockImages':function(_id,boolean){\n    \t\tTempBlockImages.update({\n    \t\t\t'_id'           : _id},\n          {$set:{\n    \t\t\t'submitted'      : boolean,\n    \t\t}});\n    \t},\n      'removeTempBlockImages':function(id){\n        TempBlockImages.remove({'id':id,'submitted':true});\n      },\n      'removeBlockUnsubmitImages':function(id){\n        TempBlockImages.remove({'id':id,'submitted':false});\n      },\n      'removeBlockUrlImages':function(url){\n        TempBlockImages.remove({'amazonUrl':url});\n      },\n    \t'createBlock':function(blockName,blockBody,s3,userId,updateTimestamp){\n        console.log(s3);\n    \t\tBlocks.insert({\n    \t\t\t'blockName'  : blockName,\n    \t\t\t'blockBody'  : blockBody,\n          's3'            : s3,\n    \t\t\t'createdAt'     : new Date(),\n          'authorUserId'  : userId,\n          'lastModified'  : updateTimestamp,\n    \t\t});\n    \t},\n      'updateBlock':function(id,blockName,blockBody,userId,updateTimestamp){\n    \t\tBlocks.update(\n    \t\t\t{ '_id': id },\n    \t        {\n    \t          $set:{\n                  'blockName'  : blockName,\n            \t\t\t'blockBody'  : blockBody,\n                  'authorUserId'  : userId,\n                  'lastModified'  : updateTimestamp,\n    \t        } //End of set\n    \t      }\n    \t\t);\n    \t},\n      'updateEditBlock':function(amazonUrl){\n    \t\tBlocks.update(\n    \t\t\t{ \"s3.amazonUrl\": amazonUrl },\n    \t        {\n    \t          $set:{\n\n                  's3.$.amazonUrl'   : \"\",\n                  's3.$.uploadTime'  : \"\",\n    \t        } //End of set\n    \t      }\n    \t\t);\n    \t},\n      'updateBlockAmazonUrl':function(amazonUrl,uploadTime,id){\n    \t\tBlocks.update(\n    \t\t\t   { '_id': id },\n    \t        {\n    \t          $push:{\n                    's3':\n                    {\n                      'amazonUrl': amazonUrl,\n                      'uploadTime':uploadTime,\n                    }\n    \t        }\n    \t      }\n    \t\t);\n    \t},\n      'deleteBlock':function(id){\n     \t\t Blocks.remove({'_id': id});\n\n    \t},\n    });\n}\n"]},"hash":"e8b4859621bd5c97e12580e595ae540d913bb0e0"}
