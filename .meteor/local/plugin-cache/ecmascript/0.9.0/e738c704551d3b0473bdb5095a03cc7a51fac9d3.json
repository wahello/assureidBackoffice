{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/ostrio:cookies","imported":["Cookies"],"specifiers":[{"kind":"named","imported":"Cookies","local":"Cookies"}]},{"source":"./lib.js","imported":["formatFleURL"],"specifiers":[{"kind":"named","imported":"formatFleURL","local":"formatFleURL"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"./upload.js","imported":["UploadInstance"],"specifiers":[{"kind":"named","imported":"UploadInstance","local":"UploadInstance"}]},{"source":"./core.js","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"FilesCollectionCore"}]}],"exports":{"exported":["FilesCollection"],"specifiers":[{"kind":"local","local":"FilesCollection","exported":"FilesCollection"}]}}},"options":{"filename":"packages/ostrio:files/client.js","filenameRelative":"packages/ostrio:files/client.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ostrio:files/client.js.map","sourceFileName":"packages/ostrio:files/client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"client"},"ignored":false,"code":"module.export({\n  FilesCollection: () => FilesCollection\n});\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nlet Cookies;\nmodule.watch(require(\"meteor/ostrio:cookies\"), {\n  Cookies(v) {\n    Cookies = v;\n  }\n\n}, 3);\nlet formatFleURL;\nmodule.watch(require(\"./lib.js\"), {\n  formatFleURL(v) {\n    formatFleURL = v;\n  }\n\n}, 4);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 5);\nlet UploadInstance;\nmodule.watch(require(\"./upload.js\"), {\n  UploadInstance(v) {\n    UploadInstance = v;\n  }\n\n}, 6);\nlet FilesCollectionCore;\nmodule.watch(require(\"./core.js\"), {\n  default(v) {\n    FilesCollectionCore = v;\n  }\n\n}, 7);\n\nconst NOOP = () => {}; /*\n                        * @locus Anywhere\n                        * @class FilesCollection\n                        * @param config           {Object}   - [Both]   Configuration object with next properties:\n                        * @param config.debug     {Boolean}  - [Both]   Turn on/of debugging and extra logging\n                        * @param config.ddp       {Object}   - [Client] Custom DDP connection. Object returned form `DDP.connect()`\n                        * @param config.schema    {Object}   - [Both]   Collection Schema\n                        * @param config.public    {Boolean}  - [Both]   Store files in folder accessible for proxy servers, for limits, and more - read docs`\n                        * @param config.chunkSize      {Number}  - [Both] Upload chunk size, default: 524288 bytes (0,5 Mb)\n                        * @param config.downloadRoute  {String}  - [Both]   Server Route used to retrieve files\n                        * @param config.collection     {Mongo.Collection} - [Both] Mongo Collection Instance\n                        * @param config.collectionName {String}  - [Both]   Collection name\n                        * @param config.namingFunction {Function}- [Both]   Function which returns `String`\n                        * @param config.onBeforeUpload {Function}- [Both]   Function which executes on server after receiving each chunk and on client right before beginning upload. Function context is `File` - so you are able to check for extension, mime-type, size and etc.\n                        * return `true` to continue\n                        * return `false` or `String` to abort upload\n                        * @param config.allowClientCode  {Boolean}  - [Both]   Allow to run `remove` from client\n                        * @param config.onbeforeunloadMessage {String|Function} - [Client] Message shown to user when closing browser's window or tab while upload process is running\n                        * @param config.disableUpload {Boolean} - Disable file upload, useful for server only solutions\n                        * @summary Create new instance of FilesCollection\n                        */\n\nclass FilesCollection extends FilesCollectionCore {\n  constructor(config) {\n    super();\n\n    if (config) {\n      ({\n        ddp: this.ddp,\n        debug: this.debug,\n        schema: this.schema,\n        public: this.public,\n        chunkSize: this.chunkSize,\n        collection: this.collection,\n        downloadRoute: this.downloadRoute,\n        disableUpload: this.disableUpload,\n        namingFunction: this.namingFunction,\n        collectionName: this.collectionName,\n        onBeforeUpload: this.onBeforeUpload,\n        allowClientCode: this.allowClientCode,\n        onbeforeunloadMessage: this.onbeforeunloadMessage\n      } = config);\n    }\n\n    const self = this;\n    const cookie = new Cookies();\n\n    if (!_.isBoolean(this.debug)) {\n      this.debug = false;\n    }\n\n    if (!_.isBoolean(this.public)) {\n      this.public = false;\n    }\n\n    if (!this.chunkSize) {\n      this.chunkSize = 1024 * 512;\n    }\n\n    this.chunkSize = Math.floor(this.chunkSize / 8) * 8;\n\n    if (!_.isString(this.collectionName) && !this.collection) {\n      this.collectionName = 'MeteorUploadFiles';\n    }\n\n    if (!this.collection) {\n      this.collection = new Mongo.Collection(this.collectionName);\n    } else {\n      this.collectionName = this.collection._name;\n    }\n\n    this.collection.filesCollection = this;\n    check(this.collectionName, String);\n\n    if (this.public && !this.downloadRoute) {\n      throw new Meteor.Error(500, `[FilesCollection.${this.collectionName}]: \\\"downloadRoute\\\" must be precisely provided on \\\"public\\\" collections! Note: \\\"downloadRoute\\\" must be equal or be inside of your web/proxy-server (relative) root.`);\n    }\n\n    if (!_.isBoolean(this.disableUpload)) {\n      this.disableUpload = false;\n    }\n\n    if (!_.isString(this.downloadRoute)) {\n      this.downloadRoute = '/cdn/storage';\n    }\n\n    this.downloadRoute = this.downloadRoute.replace(/\\/$/, '');\n\n    if (!_.isFunction(this.namingFunction)) {\n      this.namingFunction = false;\n    }\n\n    if (!_.isFunction(this.onBeforeUpload)) {\n      this.onBeforeUpload = false;\n    }\n\n    if (!_.isBoolean(this.allowClientCode)) {\n      this.allowClientCode = true;\n    }\n\n    if (!this.ddp) {\n      this.ddp = Meteor;\n    }\n\n    if (!this.onbeforeunloadMessage) {\n      this.onbeforeunloadMessage = 'Upload in a progress... Do you want to abort?';\n    }\n\n    const setTokenCookie = () => {\n      if (!cookie.has('x_mtok') && Meteor.connection._lastSessionId || cookie.has('x_mtok') && cookie.get('x_mtok') !== Meteor.connection._lastSessionId) {\n        cookie.set('x_mtok', Meteor.connection._lastSessionId, {\n          path: '/'\n        });\n      }\n    };\n\n    const unsetTokenCookie = () => {\n      if (cookie.has('x_mtok')) {\n        cookie.remove('x_mtok', '/');\n      }\n    };\n\n    if (typeof Accounts !== 'undefined' && Accounts !== null) {\n      Meteor.startup(() => {\n        setTokenCookie();\n      });\n      Accounts.onLogin(() => {\n        setTokenCookie();\n      });\n      Accounts.onLogout(() => {\n        unsetTokenCookie();\n      });\n    }\n\n    check(this.onbeforeunloadMessage, Match.OneOf(String, Function));\n\n    try {\n      const _URL = window.URL || window.webkitURL || window.mozURL || window.msURL || window.oURL || false;\n\n      if (window.Worker && window.Blob && _URL) {\n        this._supportWebWorker = true;\n        this._webWorkerUrl = _URL.createObjectURL(new Blob(['!function(a){\"use strict\";a.onmessage=function(b){var c=b.data.f.slice(b.data.cs*(b.data.cc-1),b.data.cs*b.data.cc);if(b.data.ib===!0)postMessage({bin:c,chunkId:b.data.cc});else{var d;a.FileReader?(d=new FileReader,d.onloadend=function(a){postMessage({bin:(d.result||a.srcElement||a.target).split(\",\")[1],chunkId:b.data.cc,s:b.data.s})},d.onerror=function(a){throw(a.target||a.srcElement).error},d.readAsDataURL(c)):a.FileReaderSync?(d=new FileReaderSync,postMessage({bin:d.readAsDataURL(c).split(\",\")[1],chunkId:b.data.cc})):postMessage({bin:null,chunkId:b.data.cc,error:\"File API is not supported in WebWorker!\"})}}}(this);'], {\n          type: 'application/javascript'\n        }));\n      } else if (window.Worker) {\n        this._supportWebWorker = true;\n        this._webWorkerUrl = Meteor.absoluteUrl('packages/ostrio_files/worker.min.js');\n      } else {\n        this._supportWebWorker = false;\n      }\n    } catch (e) {\n      self._debug('[FilesCollection] [Check WebWorker Availability] Error:', e);\n\n      this._supportWebWorker = false;\n    }\n\n    if (!this.schema) {\n      this.schema = FilesCollectionCore.schema;\n    }\n\n    check(this.debug, Boolean);\n    check(this.schema, Object);\n    check(this.public, Boolean);\n    check(this.chunkSize, Number);\n    check(this.downloadRoute, String);\n    check(this.disableUpload, Boolean);\n    check(this.namingFunction, Match.OneOf(false, Function));\n    check(this.onBeforeUpload, Match.OneOf(false, Function));\n    check(this.allowClientCode, Boolean);\n    check(this.ddp, Match.Any);\n    this._methodNames = {\n      _Abort: `_FilesCollectionAbort_${this.collectionName}`,\n      _Write: `_FilesCollectionWrite_${this.collectionName}`,\n      _Start: `_FilesCollectionStart_${this.collectionName}`,\n      _Remove: `_FilesCollectionRemove_${this.collectionName}`\n    };\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollection\n     * @name _getMimeType\n     * @param {Object} fileData - File Object\n     * @summary Returns file's mime-type\n     * @returns {String}\n     */\n\n  _getMimeType(fileData) {\n    let mime;\n    check(fileData, Object);\n\n    if (_.isObject(fileData)) {\n      mime = fileData.type;\n    }\n\n    if (!mime || !_.isString(mime)) {\n      mime = 'application/octet-stream';\n    }\n\n    return mime;\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollection\n     * @name _getUser\n     * @summary Returns object with `userId` and `user()` method which return user's object\n     * @returns {Object}\n     */\n\n  _getUser() {\n    const result = {\n      user() {\n        return null;\n      },\n\n      userId: null\n    };\n\n    if (_.isFunction(Meteor.userId)) {\n      result.user = () => Meteor.user();\n\n      result.userId = Meteor.userId();\n    }\n\n    return result;\n  } /*\n     * @locus Client\n     * @memberOf FilesCollection\n     * @name insert\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n     * @param {Object} config - Configuration object with next properties:\n     *   {File|Object} file           - HTML5 `files` item, like in change event: `e.currentTarget.files[0]`\n     *   {Object}      meta           - Additional data as object, use later for search\n     *   {Boolean}     allowWebWorkers- Allow/Deny WebWorkers usage\n     *   {Number|dynamic} streams     - Quantity of parallel upload streams, default: 2\n     *   {Number|dynamic} chunkSize   - Chunk size for upload\n     *   {String}      transport      - Upload transport `http` or `ddp`\n     *   {Object}      ddp            - Custom DDP connection. Object returned form `DDP.connect()`\n     *   {Function}    onUploaded     - Callback triggered when upload is finished, with two arguments `error` and `fileRef`\n     *   {Function}    onStart        - Callback triggered when upload is started after all successful validations, with two arguments `error` (always null) and `fileRef`\n     *   {Function}    onError        - Callback triggered on error in upload and/or FileReader, with two arguments `error` and `fileData`\n     *   {Function}    onProgress     - Callback triggered when chunk is sent, with only argument `progress`\n     *   {Function}    onBeforeUpload - Callback triggered right before upload is started:\n     *       return true to continue\n     *       return false to abort upload\n     * @param {Boolean} autoStart     - Start upload immediately. If set to false, you need manually call .start() method on returned class. Useful to set EventListeners.\n     * @summary Upload file to server over DDP or HTTP\n     * @returns {UploadInstance} Instance. UploadInstance has next properties:\n     *   {ReactiveVar} onPause  - Is upload process on the pause?\n     *   {ReactiveVar} state    - active|paused|aborted|completed\n     *   {ReactiveVar} progress - Current progress in percentage\n     *   {Function}    pause    - Pause upload process\n     *   {Function}    continue - Continue paused upload process\n     *   {Function}    toggle   - Toggle continue/pause if upload process\n     *   {Function}    abort    - Abort upload\n     *   {Function}    readAsDataURL - Current file as data URL, use to create image preview and etc. Be aware of big files, may lead to browser crash\n     */\n\n  insert(config, autoStart = true) {\n    if (this.disableUpload) {\n      console.warn('[FilesCollection] [insert()] Upload is disabled with [disableUpload]!');\n      return {};\n    }\n\n    return new UploadInstance(config, this)[autoStart ? 'start' : 'manual']();\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollection\n     * @name remove\n     * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n     * @param {Function} callback - Callback with one `error` argument\n     * @summary Remove documents from the collection\n     * @returns {FilesCollection} Instance\n     */\n\n  remove(selector = {}, callback) {\n    this._debug(`[FilesCollection] [remove(${JSON.stringify(selector)})]`);\n\n    check(selector, Match.OneOf(Object, String));\n    check(callback, Match.Optional(Function));\n\n    if (this.allowClientCode) {\n      this.ddp.call(this._methodNames._Remove, selector, callback || NOOP);\n    } else {\n      callback && callback(new Meteor.Error(401, '[FilesCollection] [remove] Run code from client is not allowed!'));\n\n      this._debug('[FilesCollection] [remove] Run code from client is not allowed!');\n    }\n\n    return this;\n  }\n\n}\n\n/*\n * @locus Client\n * @TemplateHelper\n * @name fileURL\n * @param {Object} fileRef - File reference object\n * @param {String} version - [Optional] Version of file you would like to request\n * @summary Get download URL for file by fileRef, even without subscription\n * @example {{fileURL fileRef}}\n * @returns {String}\n */Meteor.startup(() => {\n  if (typeof Template !== 'undefined' && Template !== null) {\n    Template.registerHelper('fileURL', (fileRef, version = 'original') => {\n      if (!_.isObject(fileRef)) {\n        return '';\n      }\n\n      version = !_.isString(version) ? 'original' : version;\n      return formatFleURL(fileRef, version);\n    });\n  }\n});","map":{"version":3,"sources":["packages/ostrio:files/client.js"],"names":["module","export","FilesCollection","_","watch","require","v","Mongo","Meteor","Cookies","formatFleURL","check","Match","UploadInstance","FilesCollectionCore","default","NOOP","constructor","config","ddp","debug","schema","public","chunkSize","collection","downloadRoute","disableUpload","namingFunction","collectionName","onBeforeUpload","allowClientCode","onbeforeunloadMessage","self","cookie","isBoolean","Math","floor","isString","Collection","_name","filesCollection","String","Error","replace","isFunction","setTokenCookie","has","connection","_lastSessionId","get","set","path","unsetTokenCookie","remove","Accounts","startup","onLogin","onLogout","OneOf","Function","_URL","window","URL","webkitURL","mozURL","msURL","oURL","Worker","Blob","_supportWebWorker","_webWorkerUrl","createObjectURL","type","absoluteUrl","e","_debug","Boolean","Object","Number","Any","_methodNames","_Abort","_Write","_Start","_Remove","_getMimeType","fileData","mime","isObject","_getUser","result","user","userId","insert","autoStart","console","warn","selector","callback","JSON","stringify","Optional","call","Template","registerHelper","fileRef","version"],"mappings":"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","file":"packages/ostrio:files/client.js.map","sourcesContent":["import { _ }               from 'meteor/underscore';\nimport { Mongo }           from 'meteor/mongo';\nimport { Meteor }          from 'meteor/meteor';\nimport { Cookies }         from 'meteor/ostrio:cookies';\nimport { formatFleURL }    from './lib.js';\nimport { check, Match }    from 'meteor/check';\nimport { UploadInstance }  from './upload.js';\nimport FilesCollectionCore from './core.js';\n\nconst NOOP = () => { };\n\n/*\n * @locus Anywhere\n * @class FilesCollection\n * @param config           {Object}   - [Both]   Configuration object with next properties:\n * @param config.debug     {Boolean}  - [Both]   Turn on/of debugging and extra logging\n * @param config.ddp       {Object}   - [Client] Custom DDP connection. Object returned form `DDP.connect()`\n * @param config.schema    {Object}   - [Both]   Collection Schema\n * @param config.public    {Boolean}  - [Both]   Store files in folder accessible for proxy servers, for limits, and more - read docs`\n * @param config.chunkSize      {Number}  - [Both] Upload chunk size, default: 524288 bytes (0,5 Mb)\n * @param config.downloadRoute  {String}  - [Both]   Server Route used to retrieve files\n * @param config.collection     {Mongo.Collection} - [Both] Mongo Collection Instance\n * @param config.collectionName {String}  - [Both]   Collection name\n * @param config.namingFunction {Function}- [Both]   Function which returns `String`\n * @param config.onBeforeUpload {Function}- [Both]   Function which executes on server after receiving each chunk and on client right before beginning upload. Function context is `File` - so you are able to check for extension, mime-type, size and etc.\n * return `true` to continue\n * return `false` or `String` to abort upload\n * @param config.allowClientCode  {Boolean}  - [Both]   Allow to run `remove` from client\n * @param config.onbeforeunloadMessage {String|Function} - [Client] Message shown to user when closing browser's window or tab while upload process is running\n * @param config.disableUpload {Boolean} - Disable file upload, useful for server only solutions\n * @summary Create new instance of FilesCollection\n */\nexport class FilesCollection extends FilesCollectionCore {\n  constructor(config) {\n    super();\n    if (config) {\n      ({\n        ddp: this.ddp,\n        debug: this.debug,\n        schema: this.schema,\n        public: this.public,\n        chunkSize: this.chunkSize,\n        collection: this.collection,\n        downloadRoute: this.downloadRoute,\n        disableUpload: this.disableUpload,\n        namingFunction: this.namingFunction,\n        collectionName: this.collectionName,\n        onBeforeUpload: this.onBeforeUpload,\n        allowClientCode: this.allowClientCode,\n        onbeforeunloadMessage: this.onbeforeunloadMessage,\n      } = config);\n    }\n\n    const self = this;\n    const cookie = new Cookies();\n    if (!_.isBoolean(this.debug)) {\n      this.debug = false;\n    }\n\n    if (!_.isBoolean(this.public)) {\n      this.public = false;\n    }\n\n    if (!this.chunkSize) {\n      this.chunkSize = 1024 * 512;\n    }\n    this.chunkSize = Math.floor(this.chunkSize / 8) * 8;\n\n    if (!_.isString(this.collectionName) && !this.collection) {\n      this.collectionName = 'MeteorUploadFiles';\n    }\n\n    if (!this.collection) {\n      this.collection = new Mongo.Collection(this.collectionName);\n    } else {\n      this.collectionName = this.collection._name;\n    }\n\n    this.collection.filesCollection = this;\n    check(this.collectionName, String);\n\n    if (this.public && !this.downloadRoute) {\n      throw new Meteor.Error(500, `[FilesCollection.${this.collectionName}]: \\\"downloadRoute\\\" must be precisely provided on \\\"public\\\" collections! Note: \\\"downloadRoute\\\" must be equal or be inside of your web/proxy-server (relative) root.`);\n    }\n\n    if (!_.isBoolean(this.disableUpload)) {\n      this.disableUpload = false;\n    }\n\n    if (!_.isString(this.downloadRoute)) {\n      this.downloadRoute = '/cdn/storage';\n    }\n\n    this.downloadRoute = this.downloadRoute.replace(/\\/$/, '');\n\n    if (!_.isFunction(this.namingFunction)) {\n      this.namingFunction = false;\n    }\n\n    if (!_.isFunction(this.onBeforeUpload)) {\n      this.onBeforeUpload = false;\n    }\n\n    if (!_.isBoolean(this.allowClientCode)) {\n      this.allowClientCode = true;\n    }\n\n    if (!this.ddp) {\n      this.ddp = Meteor;\n    }\n\n    if (!this.onbeforeunloadMessage) {\n      this.onbeforeunloadMessage = 'Upload in a progress... Do you want to abort?';\n    }\n\n    const setTokenCookie = () => {\n      if ((!cookie.has('x_mtok') && Meteor.connection._lastSessionId) || (cookie.has('x_mtok') && (cookie.get('x_mtok') !== Meteor.connection._lastSessionId))) {\n        cookie.set('x_mtok', Meteor.connection._lastSessionId, {\n          path: '/'\n        });\n      }\n    };\n\n    const unsetTokenCookie = () => {\n      if (cookie.has('x_mtok')) {\n        cookie.remove('x_mtok', '/');\n      }\n    };\n\n    if (typeof Accounts !== 'undefined' && Accounts !== null) {\n      Meteor.startup(() => {\n        setTokenCookie();\n      });\n      Accounts.onLogin(() => {\n        setTokenCookie();\n      });\n      Accounts.onLogout(() => {\n        unsetTokenCookie();\n      });\n    }\n\n    check(this.onbeforeunloadMessage, Match.OneOf(String, Function));\n\n    try {\n      const _URL = window.URL || window.webkitURL || window.mozURL || window.msURL || window.oURL || false;\n      if (window.Worker && window.Blob && _URL) {\n        this._supportWebWorker = true;\n        this._webWorkerUrl     = _URL.createObjectURL(new Blob(['!function(a){\"use strict\";a.onmessage=function(b){var c=b.data.f.slice(b.data.cs*(b.data.cc-1),b.data.cs*b.data.cc);if(b.data.ib===!0)postMessage({bin:c,chunkId:b.data.cc});else{var d;a.FileReader?(d=new FileReader,d.onloadend=function(a){postMessage({bin:(d.result||a.srcElement||a.target).split(\",\")[1],chunkId:b.data.cc,s:b.data.s})},d.onerror=function(a){throw(a.target||a.srcElement).error},d.readAsDataURL(c)):a.FileReaderSync?(d=new FileReaderSync,postMessage({bin:d.readAsDataURL(c).split(\",\")[1],chunkId:b.data.cc})):postMessage({bin:null,chunkId:b.data.cc,error:\"File API is not supported in WebWorker!\"})}}}(this);'], {type: 'application/javascript'}));\n      } else if (window.Worker) {\n        this._supportWebWorker = true;\n        this._webWorkerUrl     = Meteor.absoluteUrl('packages/ostrio_files/worker.min.js');\n      } else {\n        this._supportWebWorker = false;\n      }\n    } catch (e) {\n      self._debug('[FilesCollection] [Check WebWorker Availability] Error:', e);\n      this._supportWebWorker = false;\n    }\n\n    if (!this.schema) {\n      this.schema = FilesCollectionCore.schema;\n    }\n\n    check(this.debug, Boolean);\n    check(this.schema, Object);\n    check(this.public, Boolean);\n    check(this.chunkSize, Number);\n    check(this.downloadRoute, String);\n    check(this.disableUpload, Boolean);\n    check(this.namingFunction, Match.OneOf(false, Function));\n    check(this.onBeforeUpload, Match.OneOf(false, Function));\n    check(this.allowClientCode, Boolean);\n    check(this.ddp, Match.Any);\n\n    this._methodNames = {\n      _Abort: `_FilesCollectionAbort_${this.collectionName}`,\n      _Write: `_FilesCollectionWrite_${this.collectionName}`,\n      _Start: `_FilesCollectionStart_${this.collectionName}`,\n      _Remove: `_FilesCollectionRemove_${this.collectionName}`\n    };\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollection\n   * @name _getMimeType\n   * @param {Object} fileData - File Object\n   * @summary Returns file's mime-type\n   * @returns {String}\n   */\n  _getMimeType(fileData) {\n    let mime;\n    check(fileData, Object);\n    if (_.isObject(fileData)) {\n      mime = fileData.type;\n    }\n\n    if (!mime || !_.isString(mime)) {\n      mime = 'application/octet-stream';\n    }\n    return mime;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollection\n   * @name _getUser\n   * @summary Returns object with `userId` and `user()` method which return user's object\n   * @returns {Object}\n   */\n  _getUser() {\n    const result = {\n      user() {\n        return null;\n      },\n      userId: null\n    };\n\n    if (_.isFunction(Meteor.userId)) {\n      result.user = () => Meteor.user();\n      result.userId = Meteor.userId();\n    }\n\n    return result;\n  }\n\n  /*\n   * @locus Client\n   * @memberOf FilesCollection\n   * @name insert\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n   * @param {Object} config - Configuration object with next properties:\n   *   {File|Object} file           - HTML5 `files` item, like in change event: `e.currentTarget.files[0]`\n   *   {Object}      meta           - Additional data as object, use later for search\n   *   {Boolean}     allowWebWorkers- Allow/Deny WebWorkers usage\n   *   {Number|dynamic} streams     - Quantity of parallel upload streams, default: 2\n   *   {Number|dynamic} chunkSize   - Chunk size for upload\n   *   {String}      transport      - Upload transport `http` or `ddp`\n   *   {Object}      ddp            - Custom DDP connection. Object returned form `DDP.connect()`\n   *   {Function}    onUploaded     - Callback triggered when upload is finished, with two arguments `error` and `fileRef`\n   *   {Function}    onStart        - Callback triggered when upload is started after all successful validations, with two arguments `error` (always null) and `fileRef`\n   *   {Function}    onError        - Callback triggered on error in upload and/or FileReader, with two arguments `error` and `fileData`\n   *   {Function}    onProgress     - Callback triggered when chunk is sent, with only argument `progress`\n   *   {Function}    onBeforeUpload - Callback triggered right before upload is started:\n   *       return true to continue\n   *       return false to abort upload\n   * @param {Boolean} autoStart     - Start upload immediately. If set to false, you need manually call .start() method on returned class. Useful to set EventListeners.\n   * @summary Upload file to server over DDP or HTTP\n   * @returns {UploadInstance} Instance. UploadInstance has next properties:\n   *   {ReactiveVar} onPause  - Is upload process on the pause?\n   *   {ReactiveVar} state    - active|paused|aborted|completed\n   *   {ReactiveVar} progress - Current progress in percentage\n   *   {Function}    pause    - Pause upload process\n   *   {Function}    continue - Continue paused upload process\n   *   {Function}    toggle   - Toggle continue/pause if upload process\n   *   {Function}    abort    - Abort upload\n   *   {Function}    readAsDataURL - Current file as data URL, use to create image preview and etc. Be aware of big files, may lead to browser crash\n   */\n  insert(config, autoStart = true) {\n    if (this.disableUpload) {\n      console.warn('[FilesCollection] [insert()] Upload is disabled with [disableUpload]!');\n      return {};\n    }\n    return (new UploadInstance(config, this))[autoStart ? 'start' : 'manual']();\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollection\n   * @name remove\n   * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n   * @param {Function} callback - Callback with one `error` argument\n   * @summary Remove documents from the collection\n   * @returns {FilesCollection} Instance\n   */\n  remove(selector = {}, callback) {\n    this._debug(`[FilesCollection] [remove(${JSON.stringify(selector)})]`);\n    check(selector, Match.OneOf(Object, String));\n    check(callback, Match.Optional(Function));\n\n    if (this.allowClientCode) {\n      this.ddp.call(this._methodNames._Remove, selector, (callback || NOOP));\n    } else {\n      callback && callback(new Meteor.Error(401, '[FilesCollection] [remove] Run code from client is not allowed!'));\n      this._debug('[FilesCollection] [remove] Run code from client is not allowed!');\n    }\n\n    return this;\n  }\n}\n\n/*\n * @locus Client\n * @TemplateHelper\n * @name fileURL\n * @param {Object} fileRef - File reference object\n * @param {String} version - [Optional] Version of file you would like to request\n * @summary Get download URL for file by fileRef, even without subscription\n * @example {{fileURL fileRef}}\n * @returns {String}\n */\nMeteor.startup(() => {\n  if (typeof Template !== 'undefined' && Template !== null) {\n    Template.registerHelper('fileURL', (fileRef, version = 'original') => {\n      if (!_.isObject(fileRef)) {\n        return '';\n      }\n\n      version = (!_.isString(version)) ? 'original' : version;\n      return formatFleURL(fileRef, version);\n    });\n  }\n});\n"]},"hash":"e738c704551d3b0473bdb5095a03cc7a51fac9d3"}
