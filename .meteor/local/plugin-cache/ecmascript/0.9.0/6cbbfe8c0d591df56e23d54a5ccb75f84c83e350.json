{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["UserProfile","TempProofDocs"],"specifiers":[{"kind":"local","local":"UserProfile","exported":"UserProfile"},{"kind":"local","local":"TempProofDocs","exported":"TempProofDocs"}]}}},"options":{"filename":"imports/website/forms/api/userProfile.js","filenameRelative":"imports/website/forms/api/userProfile.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/website/forms/api/userProfile.js.map","sourceFileName":"imports/website/forms/api/userProfile.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"userProfile"},"ignored":false,"code":"module.export({\n  UserProfile: () => UserProfile,\n  TempProofDocs: () => TempProofDocs\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst UserProfile = new Mongo.Collection(\"userProfile\");\nconst TempProofDocs = new Mongo.Collection(\"tempProofDocs\");\n\nif (Meteor.isServer) {\n  let ProofDocuments;\n  module.watch(require(\"../UploadToServer/ProofUploadServer.js\"), {\n    ProofDocuments(v) {\n      ProofDocuments = v;\n    }\n\n  }, 2);\n  Meteor.publish('userProfileData', () => {\n    return UserProfile.find({});\n  });\n  Meteor.publish('TempProofDocs', () => {\n    return TempProofDocs.find({});\n  });\n  Meteor.publish('LatestTempProofDocs', () => {\n    return TempProofDocs.find({}, {\n      sort: {\n        createdAt: -1,\n        limit: 1\n      }\n    });\n  });\n  Meteor.publish('userprofile', _id => {\n    return UserProfile.find({\n      \"userId\": _id\n    });\n  });\n  Meteor.methods({\n    \"addNewTempProofDocs\": function (id, userId, prooftype, proofSubtype) {\n      var data = ProofDocuments.findOne({\n        \"_id\": id\n      }); // console.log('data:',data);\n      // console.log('prooftype:',prooftype);\n\n      var imageLink = data.link();\n      var proofObj = TempProofDocs.findOne({}, {\n        sort: {\n          createdAt: -1,\n          limit: 1\n        }\n      }); // console.log('proofObj: ',proofObj);\n\n      if (proofSubtype == '') {\n        TempProofDocs.insert({\n          \"userId\": userId,\n          \"imageLink\": imageLink,\n          \"ext\": data.ext,\n          \"name\": data.name,\n          \"prooftype\": prooftype,\n          \"proofSubtype\": proofSubtype,\n          \"createdAt\": new Date()\n        }, (error, result) => {});\n      } else {\n        if (proofObj) {\n          // console.log(proofObj.proofSubtype);\n          if (proofObj.proofSubtype == '') {\n            // console.log('true');\n            TempProofDocs.insert({\n              \"userId\": userId,\n              [proofSubtype]: imageLink,\n              \"ext\": data.ext,\n              \"name\": data.name,\n              \"prooftype\": prooftype,\n              \"proofSubtype\": proofSubtype,\n              \"createdAt\": new Date()\n            }, (error, result) => {});\n          } else {\n            // console.log('falseelse');\n            TempProofDocs.update({\n              \"_id\": proofObj._id\n            }, {\n              $set: {\n                [proofSubtype]: imageLink //End of set\n\n              }\n            }, (error, result) => {});\n          }\n        } else {\n          // console.log('trueelse');\n          TempProofDocs.insert({\n            \"userId\": userId,\n            [proofSubtype]: imageLink,\n            \"ext\": data.ext,\n            \"name\": data.name,\n            \"prooftype\": prooftype,\n            \"proofSubtype\": proofSubtype,\n            \"createdAt\": new Date()\n          }, (error, result) => {});\n        }\n      }\n    },\n    \"insertBasicData\": function (formValues) {\n      // console.log(\"formValues: \",formValues);\n      var getImage = TempProofDocs.findOne({\n        \"userId\": Meteor.userId(),\n        'prooftype': 'basic'\n      }, {\n        sort: {\n          createdAt: -1,\n          limit: 1\n        }\n      });\n\n      if (getImage) {\n        var image = getImage.imageLink;\n      }\n\n      UserProfile.insert({\n        \"userId\": Meteor.userId(),\n        \"firstName\": formValues.firstName,\n        \"lastName\": formValues.lastName,\n        \"fatherFirstName\": formValues.fatherFirstName,\n        \"fatherLastName\": formValues.fatherLastName,\n        \"motherFirstName\": formValues.motherFirstName,\n        \"motherLastName\": formValues.motherLastName,\n        \"spouseFirstName\": formValues.spouseFirstName,\n        \"spouseLastName\": formValues.spouseLastName,\n        \"gender\": formValues.gender,\n        \"dateOfBirth\": formValues.dateOfBirth,\n        \"mobileNo\": formValues.mobileNo,\n        \"altMobileNo\": formValues.altMobileNo,\n        \"emailId\": formValues.emailId,\n        \"altEmailId\": formValues.altEmailId,\n        \"proofOfDOB\": image,\n        \"createdAt\": new Date()\n      }, (error, result) => {});\n      TempProofDocs.remove({\n        'prooftype': 'basic'\n      });\n    },\n    \"updateBasicData\": function (getuserId, formValues) {\n      var getImage = TempProofDocs.findOne({\n        \"userId\": Meteor.userId(),\n        'prooftype': 'basic'\n      }, {\n        sort: {\n          createdAt: -1,\n          limit: 1\n        }\n      });\n\n      if (getImage) {\n        var image = getImage.imageLink;\n      }\n\n      UserProfile.update({\n        \"userId\": getuserId\n      }, {\n        $set: {\n          \"firstName\": formValues.firstName,\n          \"lastName\": formValues.lastName,\n          \"fatherFirstName\": formValues.fatherFirstName,\n          \"fatherLastName\": formValues.fatherLastName,\n          \"motherFirstName\": formValues.motherFirstName,\n          \"motherLastName\": formValues.motherLastName,\n          \"spouseFirstName\": formValues.spouseFirstName,\n          \"spouseLastName\": formValues.spouseLastName,\n          \"gender\": formValues.gender,\n          \"dateOfBirth\": formValues.dateOfBirth,\n          \"mobileNo\": formValues.mobileNo,\n          \"altMobileNo\": formValues.altMobileNo,\n          \"emailId\": formValues.emailId,\n          \"altEmailId\": formValues.altEmailId,\n          \"proofOfDOB\": image\n        }\n      });\n      TempProofDocs.remove({\n        'prooftype': 'basic'\n      });\n    },\n    'insertStatutory': function (id, adharCardNo, panCardNo, drivingCardNo, votingCardNo, rationCardNo, passportNo) {\n      var getImage = TempProofDocs.findOne({\n        \"userId\": Meteor.userId(),\n        'prooftype': 'identity'\n      }, {\n        sort: {\n          createdAt: -1,\n          limit: 1\n        }\n      });\n      ;\n\n      if (getImage) {\n        var adharCardProof1 = getImage.aadhar1;\n        var adharCardProof2 = getImage.aadhar2;\n        var panCardProof1 = getImage.pan1;\n        var panCardProof2 = getImage.pan2;\n        var drivingCardProof1 = getImage.driving1;\n        var drivingCardProof2 = getImage.driving2;\n        var votingCardProof1 = getImage.voting1;\n        var votingCardProof2 = getImage.voting2;\n        var rationCardProof1 = getImage.ration1;\n        var rationCardProof2 = getImage.ration2;\n        var passportProof1 = getImage.passport1;\n        var passportProof2 = getImage.passport2;\n      }\n\n      UserProfile.update({\n        \"userId\": id\n      }, {\n        $set: {\n          identity: {\n            \"adharCardNo\": adharCardNo,\n            \"panCardNo\": panCardNo,\n            \"drivingCardNo\": drivingCardNo,\n            \"votingCardNo\": votingCardNo,\n            \"rationCardNo\": rationCardNo,\n            \"passportNo\": passportNo,\n            \"adharCardProof1\": adharCardProof1,\n            \"panCardProof1\": panCardProof1,\n            \"drivingCardProof1\": drivingCardProof1,\n            \"votingCardProof1\": votingCardProof1,\n            \"rationCardProof1\": rationCardProof1,\n            \"passportProof1\": passportProof1,\n            \"adharCardProof2\": adharCardProof2,\n            \"panCardProof2\": panCardProof2,\n            \"drivingCardProof2\": drivingCardProof2,\n            \"votingCardProof2\": votingCardProof2,\n            \"rationCardProof2\": rationCardProof2,\n            \"passportProof2\": passportProof2\n          }\n        }\n      });\n      TempProofDocs.remove({\n        'prooftype': 'identity'\n      });\n    },\n    'insertPermanantAddress': function (id, permanentAddress) {\n      UserProfile.update({\n        \"userId\": id\n      }, {\n        $push: {\n          \"permanentAddress\": permanentAddress\n        }\n      });\n    },\n    'insertTemporaryAddress': function (id, temporaryAddress) {\n      UserProfile.update({\n        \"userId\": id\n      }, {\n        $push: {\n          \"temporaryAddress\": temporaryAddress\n        }\n      });\n    },\n    'insertEducation': function (id, education) {\n      UserProfile.update({\n        \"userId\": id\n      }, {\n        $push: {\n          \"education\": education\n        }\n      });\n    },\n    'insertProfessionalEducation': function (id, education) {\n      UserProfile.update({\n        \"userId\": id\n      }, {\n        $push: {\n          \"professionalEducation\": education\n        }\n      });\n    },\n    'insertEmployement': function (id, employement) {\n      UserProfile.update({\n        \"userId\": id\n      }, {\n        $push: {\n          \"employement\": employement\n        }\n      });\n    },\n    'insertOtherInformation': function (id, otherInformation) {\n      UserProfile.update({\n        \"userId\": id\n      }, {\n        $set: {\n          \"otherBusinessInvolving\": otherInformation.otherBusinessInvolving,\n          \"dismissedFromService\": otherInformation.dismissedFromService,\n          \"criminalOffence\": otherInformation.criminalOffence,\n          \"civilJudgments\": otherInformation.civilJudgments\n        }\n      });\n    },\n    'removeTempProofDocs': function (imgLink) {\n      TempProofDocs.remove({\n        'imageLink': imgLink\n      });\n    },\n    'removeTempIdentyDocs': function (imgLink, subtype) {\n      // console.log('trueserver');\n      TempProofDocs.update({\n        \"userId\": Meteor.userId()\n      }, {\n        $unset: {\n          [subtype]: imgLink //End of set\n\n        }\n      }, (error, result) => {});\n      TempProofDocs.update({\n        \"userId\": Meteor.userId()\n      }, {\n        $pull: {\n          [subtype]: imgLink //End of set\n\n        }\n      }, (error, result) => {});\n    },\n    'addCurrentDocuments': function (userId, documents, currentAddressId) {\n      UserProfile.update({\n        \"userId\": userId,\n        \"currentAddress.currentAddressId\": parseInt(currentAddressId)\n      }, {\n        $set: {\n          \"currentAddress.$.documents\": documents\n        }\n      });\n    },\n    'addPermanentDocuments': function (userId, documents, permanentAddressId) {\n      console.log(\"userId\", userId);\n      console.log(\"documents\", documents);\n      console.log(\"permanentAddressId\", permanentAddressId); // UserProfile.update({\"userId\" : userId, \"permanentAddress.permanentAddressId\" : parseInt(permanentAddressId)},\n      //     {$set : { \n      //       \"permanentAddress.$.documents\":  documents,\n      //     }\n      //   }\n      // );\n    }\n  });\n}","map":{"version":3,"sources":["imports/website/forms/api/userProfile.js"],"names":["module","export","UserProfile","TempProofDocs","Mongo","watch","require","v","Meteor","Collection","isServer","ProofDocuments","publish","find","sort","createdAt","limit","_id","methods","id","userId","prooftype","proofSubtype","data","findOne","imageLink","link","proofObj","insert","ext","name","Date","error","result","update","$set","formValues","getImage","image","firstName","lastName","fatherFirstName","fatherLastName","motherFirstName","motherLastName","spouseFirstName","spouseLastName","gender","dateOfBirth","mobileNo","altMobileNo","emailId","altEmailId","remove","getuserId","adharCardNo","panCardNo","drivingCardNo","votingCardNo","rationCardNo","passportNo","adharCardProof1","aadhar1","adharCardProof2","aadhar2","panCardProof1","pan1","panCardProof2","pan2","drivingCardProof1","driving1","drivingCardProof2","driving2","votingCardProof1","voting1","votingCardProof2","voting2","rationCardProof1","ration1","rationCardProof2","ration2","passportProof1","passport1","passportProof2","passport2","identity","permanentAddress","$push","temporaryAddress","education","employement","otherInformation","otherBusinessInvolving","dismissedFromService","criminalOffence","civilJudgments","imgLink","subtype","$unset","$pull","documents","currentAddressId","parseInt","permanentAddressId","console","log"],"mappings":"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","file":"imports/website/forms/api/userProfile.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const UserProfile = new Mongo.Collection(\"userProfile\");\nexport const TempProofDocs = new Mongo.Collection(\"tempProofDocs\");\n\nif(Meteor.isServer){\n  import { ProofDocuments } from \"../UploadToServer/ProofUploadServer.js\";\n    Meteor.publish('userProfileData',()=>{\n        return UserProfile.find({});\n    });\n    Meteor.publish('TempProofDocs',()=>{\n        return TempProofDocs.find({});\n    });\n    Meteor.publish('LatestTempProofDocs',()=>{\n        return TempProofDocs.find({}, {sort: {createdAt: -1, limit: 1}});\n    });\n    Meteor.publish('userprofile',(_id)=>{\n        return UserProfile.find({\"userId\" : _id});\n    });\n    Meteor.methods({\n        \"addNewTempProofDocs\": function (id,userId,prooftype,proofSubtype) {\n          var data = ProofDocuments.findOne({\"_id\" : id});\n          // console.log('data:',data);\n          // console.log('prooftype:',prooftype);\n          var imageLink = data.link();\n          var proofObj = TempProofDocs.findOne({}, {sort: {createdAt: -1, limit: 1}});\n          // console.log('proofObj: ',proofObj);\n          if(proofSubtype == ''){\n            TempProofDocs.insert({\n              \"userId\": userId,\n              \"imageLink\":imageLink,\n              \"ext\":data.ext,\n              \"name\":data.name,\n              \"prooftype\": prooftype,\n              \"proofSubtype\":proofSubtype,\n              \"createdAt\":new Date(),\n              },(error, result)=>{\n            });\n          }else{\n            if(proofObj){\n              // console.log(proofObj.proofSubtype);\n              if(proofObj.proofSubtype == ''){\n                // console.log('true');\n                TempProofDocs.insert({\n                  \"userId\": userId,\n                  [proofSubtype]:imageLink,\n                  \"ext\":data.ext,\n                  \"name\":data.name,\n                  \"prooftype\": prooftype,\n                  \"proofSubtype\":proofSubtype,\n                  \"createdAt\":new Date(),\n                  },(error, result)=>{\n                });\n              }else{\n                // console.log('falseelse');\n                TempProofDocs.update({\"_id\" : proofObj._id},\n                  {\n                    $set:{\n                      [proofSubtype] :  imageLink,\n                    } //End of set\n                  },(error, result)=>{\n                });\n              }\n            }else{\n              // console.log('trueelse');\n              TempProofDocs.insert({\n                \"userId\": userId,\n                [proofSubtype] : imageLink ,\n                \"ext\":data.ext,\n                \"name\":data.name,\n                \"prooftype\": prooftype,\n                \"proofSubtype\":proofSubtype,\n                \"createdAt\":new Date(),\n                },(error, result)=>{\n              });\n            }\n          }\n        }, \n        \"insertBasicData\": function (formValues) {\n            // console.log(\"formValues: \",formValues);\n            var getImage = TempProofDocs.findOne({\"userId\":Meteor.userId(),'prooftype':'basic'}, {sort: {createdAt: -1, limit: 1}});\n            if(getImage){\n              var image = getImage.imageLink;\n            }\n            UserProfile.insert({\n              \"userId\"          : Meteor.userId(),\n              \"firstName\"       : formValues.firstName,\n              \"lastName\"        : formValues.lastName,\n              \"fatherFirstName\" : formValues.fatherFirstName,\n              \"fatherLastName\"  : formValues.fatherLastName,\n              \"motherFirstName\" : formValues.motherFirstName,\n              \"motherLastName\"  : formValues.motherLastName,\n              \"spouseFirstName\" : formValues.spouseFirstName,\n              \"spouseLastName\"  : formValues.spouseLastName,\n              \"gender\"          : formValues.gender,\n              \"dateOfBirth\"     : formValues.dateOfBirth,\n              \"mobileNo\"        : formValues.mobileNo,\n              \"altMobileNo\"     : formValues.altMobileNo,\n              \"emailId\"         : formValues.emailId,\n              \"altEmailId\"      : formValues.altEmailId,\n              \"proofOfDOB\"      : image,\n              \"createdAt\"       : new Date(),\n            },(error, result)=>{\n            \n            });\n            TempProofDocs.remove({'prooftype':'basic'});\n        }, \n        \"updateBasicData\" : function(getuserId,formValues) {\n            var getImage = TempProofDocs.findOne({\"userId\":Meteor.userId(),'prooftype':'basic'}, {sort: {createdAt: -1, limit: 1}});\n            if(getImage){\n              var image = getImage.imageLink;\n            }\n            UserProfile.update({\"userId\":getuserId},{\n            $set : {\n              \"firstName\"       : formValues.firstName,\n              \"lastName\"        : formValues.lastName,\n              \"fatherFirstName\" : formValues.fatherFirstName,\n              \"fatherLastName\"  : formValues.fatherLastName,\n              \"motherFirstName\" : formValues.motherFirstName,\n              \"motherLastName\"  : formValues.motherLastName,\n              \"spouseFirstName\" : formValues.spouseFirstName,\n              \"spouseLastName\"  : formValues.spouseLastName,\n              \"gender\"          : formValues.gender,\n              \"dateOfBirth\"     : formValues.dateOfBirth,\n              \"mobileNo\"        : formValues.mobileNo,\n              \"altMobileNo\"     : formValues.altMobileNo,\n              \"emailId\"         : formValues.emailId,\n              \"altEmailId\"      : formValues.altEmailId,\n              \"proofOfDOB\"      : image,\n            }\n           });\n           TempProofDocs.remove({'prooftype':'basic'});\n        },\n        'insertStatutory':function(id,adharCardNo,panCardNo,drivingCardNo,votingCardNo,rationCardNo,passportNo) {\n          var getImage = TempProofDocs.findOne({\"userId\":Meteor.userId(),'prooftype':'identity'}, {sort: {createdAt: -1, limit: 1}});;\n          if(getImage){\n            var adharCardProof1 = getImage.aadhar1;\n            var adharCardProof2 = getImage.aadhar2;\n            var panCardProof1 = getImage.pan1;\n            var panCardProof2 = getImage.pan2;\n            var drivingCardProof1 = getImage.driving1;\n            var drivingCardProof2 = getImage.driving2;\n            var votingCardProof1 = getImage.voting1;\n            var votingCardProof2 = getImage.voting2;\n            var rationCardProof1 = getImage.ration1;\n            var rationCardProof2 = getImage.ration2;\n            var passportProof1 = getImage.passport1;\n            var passportProof2 = getImage.passport2;\n          }\n          UserProfile.update({\"userId\" : id},\n            {$set : { identity:{\n              \"adharCardNo\"        :  adharCardNo,\n              \"panCardNo\"          :  panCardNo,\n              \"drivingCardNo\"      :  drivingCardNo,\n              \"votingCardNo\"       :  votingCardNo,\n              \"rationCardNo\"       :  rationCardNo,\n              \"passportNo\"         :  passportNo,\n              \"adharCardProof1\"        :  adharCardProof1,\n              \"panCardProof1\"          :  panCardProof1,\n              \"drivingCardProof1\"      :  drivingCardProof1,\n              \"votingCardProof1\"       :  votingCardProof1,\n              \"rationCardProof1\"       :  rationCardProof1,\n              \"passportProof1\"         :  passportProof1,\n              \"adharCardProof2\"        :  adharCardProof2,\n              \"panCardProof2\"          :  panCardProof2,\n              \"drivingCardProof2\"      :  drivingCardProof2,\n              \"votingCardProof2\"       :  votingCardProof2,\n              \"rationCardProof2\"       :  rationCardProof2,\n              \"passportProof2\"         :  passportProof2,\n            }\n            }\n          });\n          TempProofDocs.remove({'prooftype':'identity'});\n        },\n        'insertPermanantAddress':function(id,permanentAddress) {\n          UserProfile.update({\"userId\" : id},\n          {$push : {\n                      \"permanentAddress\" : permanentAddress,\n                    }\n          });\n        },\n       'insertTemporaryAddress':function(id,temporaryAddress) {\n          UserProfile.update({\"userId\" : id},\n          {$push : {\n                      \"temporaryAddress\" : temporaryAddress,\n                    }\n          });\n        },\n       'insertEducation':function(id,education) {\n          UserProfile.update({\"userId\" : id},\n          {$push : {\n                      \"education\" : education,\n                    }\n          });\n        },\n        'insertProfessionalEducation':function(id,education) {\n          UserProfile.update({\"userId\" : id},\n          {$push : {\n                      \"professionalEducation\" : education,\n                    }\n          });\n        },\n       'insertEmployement':function(id,employement) {\n          UserProfile.update({\"userId\" : id},\n          {$push : {\n                      \"employement\" : employement,\n                    }\n          });\n        },\n        'insertOtherInformation':function(id,otherInformation) {\n          UserProfile.update({\"userId\" : id},\n            {$set : {\n              \"otherBusinessInvolving\" :  otherInformation.otherBusinessInvolving,\n              \"dismissedFromService\"   :  otherInformation.dismissedFromService,\n              \"criminalOffence\"        :  otherInformation.criminalOffence,\n              \"civilJudgments\"         :  otherInformation.civilJudgments,\n            }\n          });\n        },\n        'removeTempProofDocs':function(imgLink){\n          TempProofDocs.remove({'imageLink':imgLink});\n        },\n        'removeTempIdentyDocs':function(imgLink,subtype){\n          // console.log('trueserver');\n          TempProofDocs.update({\"userId\" : Meteor.userId()},\n            {\n              $unset:{\n                [subtype] :  imgLink,\n              } //End of set\n            },(error, result)=>{\n          });     \n          TempProofDocs.update({\"userId\" : Meteor.userId()},\n            {\n              $pull:{\n                [subtype] :  imgLink,\n              } //End of set\n            },(error, result)=>{\n          });        \n        },\n        'addCurrentDocuments':function(userId,documents,currentAddressId) {\n          UserProfile.update({\"userId\" : userId, \"currentAddress.currentAddressId\" : parseInt(currentAddressId)},\n              {$set : { \n                \"currentAddress.$.documents\":  documents,\n              }\n            }\n          );\n\n        },\n        'addPermanentDocuments':function(userId,documents,permanentAddressId) {\n          console.log(\"userId\",userId);\n          console.log(\"documents\",documents);\n          console.log(\"permanentAddressId\",permanentAddressId);\n\n          // UserProfile.update({\"userId\" : userId, \"permanentAddress.permanentAddressId\" : parseInt(permanentAddressId)},\n          //     {$set : { \n          //       \"permanentAddress.$.documents\":  documents,\n          //     }\n          //   }\n          // );\n\n        },\n    });\n}\n"]},"hash":"6cbbfe8c0d591df56e23d54a5ccb75f84c83e350"}
