{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"react-router","imported":["Router","Route","browserHistory"],"specifiers":[{"kind":"named","imported":"Router","local":"Router"},{"kind":"named","imported":"Route","local":"Route"},{"kind":"named","imported":"browserHistory","local":"browserHistory"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"react-dom","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ReactDOM"}]},{"source":"meteor/tracker","imported":["Tracker"],"specifiers":[{"kind":"named","imported":"Tracker","local":"Tracker"}]},{"source":"../lib/routes/routes","imported":["routes","onAuthChange"],"specifiers":[{"kind":"named","imported":"routes","local":"routes"},{"kind":"named","imported":"onAuthChange","local":"onAuthChange"}]},{"source":"/imports/dashboard/product/addNewProduct/imageUploadClient/ProductImage.js","imported":["ProductImage"],"specifiers":[{"kind":"named","imported":"ProductImage","local":"ProductImage"}]},{"source":"/imports/dashboard/reactCMS/UploadToClient/UploadServiceImgsClient.js","imported":["ServiceImage"],"specifiers":[{"kind":"named","imported":"ServiceImage","local":"ServiceImage"}]},{"source":"/imports/dashboard/reactCMS/UploadToClient/UploadBlogImgsClient.js","imported":["BlogImage"],"specifiers":[{"kind":"named","imported":"BlogImage","local":"BlogImage"}]},{"source":"/imports/dashboard/userManagement/UserPicUploadClient/UserPicUploadClient.js","imported":["UserImage"],"specifiers":[{"kind":"named","imported":"UserImage","local":"UserImage"}]},{"source":"/imports/dashboard/forms/uploadToClient/uploadNewsVideoClient.js","imported":["NewsVideo"],"specifiers":[{"kind":"named","imported":"NewsVideo","local":"NewsVideo"}]},{"source":"/imports/dashboard/ticketManagement/uploadToClient/uploadImagesToClient.js","imported":["TicketImages"],"specifiers":[{"kind":"named","imported":"TicketImages","local":"TicketImages"}]},{"source":"/imports/dashboard/ticketManagement/uploadToClient/uploadVideoToClient.js","imported":["TicketVideo"],"specifiers":[{"kind":"named","imported":"TicketVideo","local":"TicketVideo"}]},{"source":"/imports/dashboard/product/addNewProduct/css/AddNewProduct.css","imported":[],"specifiers":[]},{"source":"/imports/dashboard/product/productList/css/productList.css","imported":[],"specifiers":[]},{"source":"/imports/dashboard/product/addNewProduct/api/ProductMaster.js","imported":[],"specifiers":[]},{"source":"/imports/website/forms/css/forms.css","imported":[],"specifiers":[]},{"source":"/public/css/dashboard.css","imported":[],"specifiers":[]},{"source":"./js-image-slider.css","imported":[],"specifiers":[]},{"source":"./sliderman.css","imported":[],"specifiers":[]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"client/main.js","filenameRelative":"client/main.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"client/main.js.map","sourceFileName":"client/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"main"},"ignored":false,"code":"var Router = void 0,\n    Route = void 0,\n    browserHistory = void 0;\nmodule.watch(require(\"react-router\"), {\n    Router: function (v) {\n        Router = v;\n    },\n    Route: function (v) {\n        Route = v;\n    },\n    browserHistory: function (v) {\n        browserHistory = v;\n    }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor: function (v) {\n        Meteor = v;\n    }\n}, 1);\nvar ReactDOM = void 0;\nmodule.watch(require(\"react-dom\"), {\n    \"default\": function (v) {\n        ReactDOM = v;\n    }\n}, 2);\nvar Tracker = void 0;\nmodule.watch(require(\"meteor/tracker\"), {\n    Tracker: function (v) {\n        Tracker = v;\n    }\n}, 3);\nvar routes = void 0,\n    onAuthChange = void 0;\nmodule.watch(require(\"../lib/routes/routes\"), {\n    routes: function (v) {\n        routes = v;\n    },\n    onAuthChange: function (v) {\n        onAuthChange = v;\n    }\n}, 4);\nvar ProductImage = void 0;\nmodule.watch(require(\"/imports/dashboard/product/addNewProduct/imageUploadClient/ProductImage.js\"), {\n    ProductImage: function (v) {\n        ProductImage = v;\n    }\n}, 5);\nvar ServiceImage = void 0;\nmodule.watch(require(\"/imports/dashboard/reactCMS/UploadToClient/UploadServiceImgsClient.js\"), {\n    ServiceImage: function (v) {\n        ServiceImage = v;\n    }\n}, 6);\nvar BlogImage = void 0;\nmodule.watch(require(\"/imports/dashboard/reactCMS/UploadToClient/UploadBlogImgsClient.js\"), {\n    BlogImage: function (v) {\n        BlogImage = v;\n    }\n}, 7);\nvar UserImage = void 0;\nmodule.watch(require(\"/imports/dashboard/userManagement/UserPicUploadClient/UserPicUploadClient.js\"), {\n    UserImage: function (v) {\n        UserImage = v;\n    }\n}, 8);\nvar NewsVideo = void 0;\nmodule.watch(require(\"/imports/dashboard/forms/uploadToClient/uploadNewsVideoClient.js\"), {\n    NewsVideo: function (v) {\n        NewsVideo = v;\n    }\n}, 9);\nvar TicketImages = void 0;\nmodule.watch(require(\"/imports/dashboard/ticketManagement/uploadToClient/uploadImagesToClient.js\"), {\n    TicketImages: function (v) {\n        TicketImages = v;\n    }\n}, 10);\nvar TicketVideo = void 0;\nmodule.watch(require(\"/imports/dashboard/ticketManagement/uploadToClient/uploadVideoToClient.js\"), {\n    TicketVideo: function (v) {\n        TicketVideo = v;\n    }\n}, 11);\nmodule.watch(require(\"/imports/dashboard/product/addNewProduct/css/AddNewProduct.css\"));\nmodule.watch(require(\"/imports/dashboard/product/productList/css/productList.css\"));\nmodule.watch(require(\"/imports/dashboard/product/addNewProduct/api/ProductMaster.js\"));\nmodule.watch(require(\"/imports/website/forms/css/forms.css\"));\nmodule.watch(require(\"/public/css/dashboard.css\"));\nmodule.watch(require(\"./js-image-slider.css\"));\nmodule.watch(require(\"./sliderman.css\"));\nTracker.autorun(function () {\n    var isAuthenticated = !!Meteor.userId();\n    onAuthChange(isAuthenticated);\n});\nMeteor.startup(function () {\n    ReactDOM.render(routes, document.getElementById('app-root'));\n});\n\naddCategoryImgsToS3Function = function (file, self, productId) {\n    // console.log(file);\n    uploadInstance = ProductImage.insert({\n        file: file,\n        meta: {\n            locator: self.props.fileLocator,\n            userId: Meteor.userId() // Optional, used to check on server for file tampering\n\n        },\n        streams: 'dynamic',\n        chunkSize: 'dynamic',\n        allowWebWorkers: true // If you see issues with uploads, change this to false\n\n    }, false);\n    self.setState({\n        uploading: uploadInstance,\n        // Keep track of this instance to use below\n        inProgress: true // Show the progress bar now\n\n    }); // These are the event functions, don't need most of them, it shows where we are in the process\n\n    uploadInstance.on('start', function () {// console.log('Starting');\n    });\n    uploadInstance.on('end', function (error, fileObj) {// console.log('On end File Object: ', fileObj);\n    });\n    uploadInstance.on('uploaded', function (error, fileObj) {\n        // Reset our state for the next file\n        //   console.log(\"fileObj: \",JSON.stringify(fileObj));\n        //   console.log('https://spotyl.s3.amazonaws.com/'+fileObj.path);\n        if (fileObj) {\n            //   Session.set(\"temporaryImageId\",fileObj._id);\n            // Meteor.call(\"temporaryImageId\",fileObj._id);\n            Meteor.call(\"addProductImages\", fileObj._id, productId);\n        }\n\n        self.setState({\n            uploading: [],\n            progress: 0,\n            inProgress: false\n        });\n    });\n    uploadInstance.on('error', function (error, fileObj) {\n        console.log('Error during upload: ' + error); //   console.log('Error during upload: ' + error.reason);\n    });\n    uploadInstance.on('progress', function (progress, fileObj) {\n        // console.log('Upload Percentage: ' + progress);\n        // Update our progress bar\n        self.setState({\n            progress: progress\n        });\n    });\n    uploadInstance.start(); // Must manually start the uploaded\n}; // add service image function\n\n\naddServicesImgsToS3Function = function (file, self) {\n    uploadInstance = ServiceImage.insert({\n        file: file,\n        meta: {\n            locator: self.props.fileLocator,\n            userId: Meteor.userId() // Optional, used to check on server for file tampering\n\n        },\n        streams: 'dynamic',\n        chunkSize: 'dynamic',\n        allowWebWorkers: true // If you see issues with uploads, change this to false\n\n    }, false);\n    self.setState({\n        uploading: uploadInstance,\n        // Keep track of this instance to use below\n        inProgress: true // Show the progress bar now\n\n    }); // These are the event functions, don't need most of them, it shows where we are in the process\n\n    uploadInstance.on('start', function () {});\n    uploadInstance.on('end', function (error, fileObj) {});\n    uploadInstance.on('uploaded', function (error, fileObj) {\n        if (fileObj) {\n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"addNewTemporaryServiceImage\", fileObj._id, function (error, result) {\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            });\n        }\n\n        self.setState({\n            uploading: [],\n            progress: 0,\n            inProgress: false\n        });\n    });\n    uploadInstance.on('error', function (error, fileObj) {});\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\", progress);\n        self.setState({\n            progress: progress\n        });\n    });\n    uploadInstance.start(); // Must manually start the uploaded\n}; // add user image function\n\n\naddUserToS3Function = function (userId, file, self) {\n    console.log(\"file\", file); // console.log(\"self\",self);\n\n    uploadInstance = UserImage.insert({\n        file: file,\n        meta: {\n            locator: self.props.fileLocator,\n            userId: Meteor.userId() // Optional, used to check on server for file tampering\n\n        },\n        streams: 'dynamic',\n        chunkSize: 'dynamic',\n        allowWebWorkers: true // If you see issues with uploads, change this to false\n\n    }, false);\n    self.setState({\n        uploading: uploadInstance,\n        // Keep track of this instance to use below\n        inProgress: true // Show the progress bar now\n\n    }); // These are the event functions, don't need most of them, it shows where we are in the process\n\n    uploadInstance.on('start', function () {});\n    uploadInstance.on('end', function (error, fileObj) {});\n    uploadInstance.on('uploaded', function (error, fileObj) {\n        if (fileObj) {\n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"addUserImage\", fileObj._id, userId, function (error, result) {\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            });\n        }\n\n        self.setState({\n            uploading: [],\n            progress: 0,\n            inProgress: false\n        });\n    });\n    uploadInstance.on('error', function (error, fileObj) {});\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\", progress);\n        self.setState({\n            progress: progress\n        });\n    });\n    uploadInstance.start(); // Must manually start the uploaded\n}; // add video of news feed function\n\n\naddNewsVideoS3Function = function (file, self, uploadType) {\n    // console.log(\"self\",self);\n    uploadInstance = NewsVideo.insert({\n        file: file,\n        meta: {\n            locator: self.props.fileLocator,\n            userId: Meteor.userId() // Optional, used to check on server for file tampering\n\n        },\n        streams: 'dynamic',\n        chunkSize: 'dynamic',\n        allowWebWorkers: true // If you see issues with uploads, change this to false\n\n    }, false);\n    self.setState({\n        uploading: uploadInstance,\n        // Keep track of this instance to use below\n        inProgress: true // Show the progress bar now\n\n    }); // These are the event functions, don't need most of them, it shows where we are in the process\n\n    uploadInstance.on('start', function () {});\n    uploadInstance.on('end', function (error, fileObj) {});\n    uploadInstance.on('uploaded', function (error, fileObj) {\n        if (fileObj) {\n            // console.log(\"fileObj._id: \",fileObj._id);\n            if (uploadType == \"video\") {\n                Meteor.call(\"TempAddVideoToS3function\", fileObj._id, function (error, result) {\n                    swal({\n                        position: 'top-right',\n                        type: 'success',\n                        title: 'Uploaded Successfully',\n                        showConfirmButton: false,\n                        timer: 1500\n                    });\n                });\n            } else if (uploadType == \"image\") {\n                Meteor.call(\"TempAddImagetoNewsFeed\", fileObj._id, function (error, result) {\n                    swal({\n                        position: 'top-right',\n                        type: 'success',\n                        title: 'Uploaded Successfully',\n                        showConfirmButton: false,\n                        timer: 1500\n                    });\n                });\n            }\n        }\n\n        self.setState({\n            uploading: [],\n            progress: 0,\n            inProgress: false\n        });\n    });\n    uploadInstance.on('error', function (error, fileObj) {});\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\", progress);\n        self.setState({\n            progress: progress\n        });\n    });\n    uploadInstance.start(); // Must manually start the uploaded\n}; // add Blog image function\n\n\naddBlogImagesToS3Function = function (file, self, mediaType) {\n    uploadInstance = BlogImage.insert({\n        file: file,\n        meta: {\n            locator: self.props.fileLocator,\n            userId: Meteor.userId() // Optional, used to check on server for file tampering\n\n        },\n        streams: 'dynamic',\n        chunkSize: 'dynamic',\n        allowWebWorkers: true // If you see issues with uploads, change this to false\n\n    }, false);\n    self.setState({\n        uploading: uploadInstance,\n        // Keep track of this instance to use below\n        inProgress: true // Show the progress bar now\n\n    }); // These are the event functions, don't need most of them, it shows where we are in the process\n\n    uploadInstance.on('start', function () {});\n    uploadInstance.on('end', function (error, fileObj) {});\n    uploadInstance.on('uploaded', function (error, fileObj) {\n        if (fileObj) {\n            // console.log(\"fileObj._id: \",fileObj._id);\n            if (mediaType == \"image\") {\n                Meteor.call(\"addNewTemporaryBlogImage\", fileObj._id, function (error, result) {\n                    swal({\n                        position: 'top-right',\n                        type: 'success',\n                        title: 'Uploaded Successfully',\n                        showConfirmButton: false,\n                        timer: 1500\n                    });\n                });\n            } else if (mediaType == \"video\") {\n                Meteor.call(\"addNewTemporaryBlogVideo\", fileObj._id, function (error, result) {\n                    swal({\n                        position: 'top-right',\n                        type: 'success',\n                        title: 'Uploaded Successfully',\n                        showConfirmButton: false,\n                        timer: 1500\n                    });\n                });\n            }\n        }\n\n        self.setState({\n            uploading: [],\n            progress: 0,\n            inProgress: false\n        });\n    });\n    uploadInstance.on('error', function (error, fileObj) {});\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadBlogImageProgressPercent\", progress);\n        self.setState({\n            progress: progress\n        });\n    });\n    uploadInstance.start(); // Must manually start the uploaded\n}; // add Proof image function\n\n\naddProofToS3Function = function (userId, file, prooftype, proofSubtype, self) {\n    // console.log(\"file\",file);\n    // console.log(\"prooftype\",prooftype);\n    // console.log(\"self\",self);\n    uploadInstance = ProofDocuments.insert({\n        file: file,\n        meta: {\n            locator: self.props.fileLocator,\n            userId: Meteor.userId() // Optional, used to check on server for file tampering\n\n        },\n        streams: 'dynamic',\n        chunkSize: 'dynamic',\n        allowWebWorkers: true // If you see issues with uploads, change this to false\n\n    }, false);\n    self.setState({\n        uploading: uploadInstance,\n        // Keep track of this instance to use below\n        inProgress: true // Show the progress bar now\n\n    }); // These are the event functions, don't need most of them, it shows where we are in the process\n\n    uploadInstance.on('start', function () {});\n    uploadInstance.on('end', function (error, fileObj) {});\n    uploadInstance.on('uploaded', function (error, fileObj) {\n        if (fileObj) {\n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"addNewTempProofDocs\", fileObj._id, userId, prooftype, proofSubtype, function (error, result) {\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            });\n        }\n\n        self.setState({\n            uploading: [],\n            progress: 0,\n            inProgress: false\n        });\n    });\n    uploadInstance.on('error', function (error, fileObj) {});\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadProofDocProgressPercent\", progress);\n        self.setState({\n            progress: progress\n        });\n    });\n    uploadInstance.start(); // Must manually start the uploaded\n}; // add ticket image function\n\n\naddImgsToS3Function = function (file, self) {\n    uploadInstance = TicketImages.insert({\n        file: file,\n        meta: {\n            locator: self.props.fileLocator,\n            userId: Meteor.userId() // Optional, used to check on server for file tampering\n\n        },\n        streams: 'dynamic',\n        chunkSize: 'dynamic',\n        allowWebWorkers: true // If you see issues with uploads, change this to false\n\n    }, false);\n    self.setState({\n        uploading: uploadInstance,\n        // Keep track of this instance to use below\n        inProgress: true // Show the progress bar now\n\n    }); // These are the event functions, don't need most of them, it shows where we are in the process\n\n    uploadInstance.on('start', function () {});\n    uploadInstance.on('end', function (error, fileObj) {});\n    uploadInstance.on('uploaded', function (error, fileObj) {\n        if (fileObj) {\n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"addNewTemporaryTicketImages\", fileObj._id, function (error, result) {\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            });\n        }\n\n        self.setState({\n            uploading: [],\n            progress: 0,\n            inProgress: false\n        });\n    });\n    uploadInstance.on('error', function (error, fileObj) {});\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\", progress);\n        self.setState({\n            progress: progress\n        });\n    });\n    uploadInstance.start(); // Must manually start the uploaded\n}; // add video of ticket function\n\n\naddTicketVideoS3Function = function (file, self) {\n    // console.log(\"self\",self);\n    uploadInstance = TicketVideo.insert({\n        file: file,\n        meta: {\n            locator: self.props.fileLocator,\n            userId: Meteor.userId() // Optional, used to check on server for file tampering\n\n        },\n        streams: 'dynamic',\n        chunkSize: 'dynamic',\n        allowWebWorkers: true // If you see issues with uploads, change this to false\n\n    }, false);\n    self.setState({\n        uploading: uploadInstance,\n        // Keep track of this instance to use below\n        inProgress: true // Show the progress bar now\n\n    }); // These are the event functions, don't need most of them, it shows where we are in the process\n\n    uploadInstance.on('start', function () {});\n    uploadInstance.on('end', function (error, fileObj) {});\n    uploadInstance.on('uploaded', function (error, fileObj) {\n        if (fileObj) {\n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"TempAddVideoToS3function\", fileObj._id, function (error, result) {\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            });\n        }\n\n        self.setState({\n            uploading: [],\n            progress: 0,\n            inProgress: false\n        });\n    });\n    uploadInstance.on('error', function (error, fileObj) {});\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\", progress);\n        self.setState({\n            progress: progress\n        });\n    });\n    uploadInstance.start(); // Must manually start the uploaded\n};","map":{"version":3,"sources":["client/main.js"],"names":["Router","Route","browserHistory","module","watch","require","v","Meteor","ReactDOM","Tracker","routes","onAuthChange","ProductImage","ServiceImage","BlogImage","UserImage","NewsVideo","TicketImages","TicketVideo","autorun","isAuthenticated","userId","startup","render","document","getElementById","addCategoryImgsToS3Function","file","self","productId","uploadInstance","insert","meta","locator","props","fileLocator","streams","chunkSize","allowWebWorkers","setState","uploading","inProgress","on","error","fileObj","call","_id","progress","console","log","start","addServicesImgsToS3Function","result","swal","position","type","title","showConfirmButton","timer","Session","set","addUserToS3Function","addNewsVideoS3Function","uploadType","addBlogImagesToS3Function","mediaType","addProofToS3Function","prooftype","proofSubtype","ProofDocuments","addImgsToS3Function","addTicketVideoS3Function"],"mappings":"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","file":"client/main.js.map","sourcesContent":["import { Router, Route, browserHistory } from 'react-router';\nimport {Meteor} from 'meteor/meteor';\nimport ReactDOM from 'react-dom';\nimport { Tracker } from 'meteor/tracker';\nimport {routes, onAuthChange}  from '../lib/routes/routes';\n\nimport { ProductImage } from '/imports/dashboard/product/addNewProduct/imageUploadClient/ProductImage.js';\nimport { ServiceImage } from '/imports/dashboard/reactCMS/UploadToClient/UploadServiceImgsClient.js';\nimport { BlogImage } from '/imports/dashboard/reactCMS/UploadToClient/UploadBlogImgsClient.js';\nimport { UserImage } from '/imports/dashboard/userManagement/UserPicUploadClient/UserPicUploadClient.js';\n// import { ProofDocuments } from '/imports/website/forms/UploadToClient/ProofUploadClient.js';\nimport { NewsVideo } from '/imports/dashboard/forms/uploadToClient/uploadNewsVideoClient.js';\nimport { TicketImages } from '/imports/dashboard/ticketManagement/uploadToClient/uploadImagesToClient.js';\nimport { TicketVideo } from '/imports/dashboard/ticketManagement/uploadToClient/uploadVideoToClient.js'\nimport '/imports/dashboard/product/addNewProduct/css/AddNewProduct.css';\nimport '/imports/dashboard/product/productList/css/productList.css';\nimport '/imports/dashboard/product/addNewProduct/api/ProductMaster.js';\n// import '/imports/website/header/css/secHeader.css';\n// import '/imports/website/footer/css/secFooter.css';\n// import '/imports/website/contactUs/css/contactus.css';\n// import '/imports/website/aboutUs/css/aboutus.css';\n// import '/imports/website/howItWorks/css/HowItWorks.css';\n// import '/imports/website/howItWorks/css/welcomeToCompany.css';\n// import '/imports/dashboard/product/productBulkUpload/css/productBulkUpload.css';\n// import '/imports/website/aboutUs/css/aboutus.css';\n// import '/imports/website/whyChooseUs/css/chooseUs.css';\n// import '/imports/website/feature/css/feature.css';\n// import '/imports/website/testimonial/css/testimonial.css';\n// import '/imports/website/clients/css/clients.css';\n// import '/imports/website/blog/css/blog.css';\n// import '/imports/website/carousel/css/carousel.css';\nimport '/imports/website/forms/css/forms.css';\n// import '/imports/website/permissionModals/css/permissionModals.css';\n// import '/imports/website/profile/css/profile.css';\n// import '/imports/website/news/css/news.css';\n// import '/imports/website/ServiceProcess/css/ServiceProcess.css';\n// import '/imports/website/views/css/views.css';\nimport '/public/css/dashboard.css';\n// import './component.css';\n// import './demo.css';\n// import './normalize.css';\nimport './js-image-slider.css';\nimport './sliderman.css';\n\n\nTracker.autorun(() => {\n  const isAuthenticated = !!Meteor.userId();\n  onAuthChange(isAuthenticated);\n});\n\n\nMeteor.startup(() => {\n  ReactDOM.render(routes, document.getElementById('app-root'));\n});\n\n\naddCategoryImgsToS3Function = function(file,self,productId) {\n        // console.log(file);\n\t\t    uploadInstance = ProductImage.insert({\n\t\t      file: file,\n\t\t      meta: {\n\t\t        locator : self.props.fileLocator,\n\t\t        userId  : Meteor.userId() // Optional, used to check on server for file tampering\n\t\t      },\n\t\t      streams         : 'dynamic',\n\t\t      chunkSize       : 'dynamic',\n\t\t      allowWebWorkers : true // If you see issues with uploads, change this to false\n\t\t    }, false);\n\n\n\t    self.setState({\n\t      uploading  : uploadInstance, // Keep track of this instance to use below\n\t      inProgress : true // Show the progress bar now\n\t    });\n\n\t    // These are the event functions, don't need most of them, it shows where we are in the process\n\t    uploadInstance.on('start', function () {\n\t      // console.log('Starting');\n\t    });\n\n\t    uploadInstance.on('end', function (error, fileObj) {\n\t      // console.log('On end File Object: ', fileObj);\n\t    });\n\n\t    uploadInstance.on('uploaded',  (error, fileObj) => {\n\n\t      // Reset our state for the next file\n        //   console.log(\"fileObj: \",JSON.stringify(fileObj));\n        //   console.log('https://spotyl.s3.amazonaws.com/'+fileObj.path);\n          if(fileObj){\n            //   Session.set(\"temporaryImageId\",fileObj._id);\n            // Meteor.call(\"temporaryImageId\",fileObj._id);\n            Meteor.call(\"addProductImages\",fileObj._id, productId);\n          }\n\n\t      self.setState({\n\t        uploading  : [],\n\t        progress   : 0,\n\t        inProgress : false\n\t      });\n\t    });\n\n\t    uploadInstance.on('error', function (error, fileObj) {\n            console.log('Error during upload: ' + error);\n\t    //   console.log('Error during upload: ' + error.reason);\n\t    });\n\n\t    uploadInstance.on('progress', function (progress, fileObj) {\n\t      // console.log('Upload Percentage: ' + progress);\n\t      // Update our progress bar\n\t      self.setState({\n\t        progress : progress\n\t      })\n\t    });\n\n\t    uploadInstance.start(); // Must manually start the uploaded\n}\n\n// add service image function\naddServicesImgsToS3Function = function(file,self) {\n    uploadInstance = ServiceImage.insert({\n                                        file: file,\n                                        meta: {\n                                                        locator : self.props.fileLocator,\n                                                        userId  : Meteor.userId() // Optional, used to check on server for file tampering\n                                        },\n                                        streams         : 'dynamic',\n                                        chunkSize       : 'dynamic',\n                                        allowWebWorkers : true // If you see issues with uploads, change this to false\n    }, false);\n\n    self.setState({\n        uploading  : uploadInstance, // Keep track of this instance to use below\n        inProgress : true // Show the progress bar now\n    });\n\n    // These are the event functions, don't need most of them, it shows where we are in the process\n    uploadInstance.on('start', function () {\n    });\n \n    uploadInstance.on('end', function (error, fileObj) {\n    });\n\n    uploadInstance.on('uploaded',  (error, fileObj) => {\n        if(fileObj){\n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"addNewTemporaryServiceImage\",fileObj._id,(error, result)=>{\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            });\n        }\n\n        self.setState({\n            uploading  : [],\n            progress   : 0,\n            inProgress : false\n        });\n    });\n\n    uploadInstance.on('error', function (error, fileObj) {\n    });\n\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\",progress);\n        \n        self.setState({\n            progress : progress\n        })\n    });\n\n    uploadInstance.start(); // Must manually start the uploaded\n}\n// add user image function\naddUserToS3Function = function(userId,file,self) {\n    console.log(\"file\",file);\n    // console.log(\"self\",self);\n    uploadInstance = UserImage.insert({\n                                        file: file,\n                                        meta: {\n                                                        locator : self.props.fileLocator,\n                                                        userId  : Meteor.userId() // Optional, used to check on server for file tampering\n                                        },\n                                        streams         : 'dynamic',\n                                        chunkSize       : 'dynamic',\n                                        allowWebWorkers : true // If you see issues with uploads, change this to false\n    }, false);\n\n    self.setState({\n        uploading  : uploadInstance, // Keep track of this instance to use below\n        inProgress : true // Show the progress bar now\n    });\n\n    // These are the event functions, don't need most of them, it shows where we are in the process\n    uploadInstance.on('start', function () { \n    });\n \n    uploadInstance.on('end', function (error, fileObj) {\n    });\n\n    uploadInstance.on('uploaded',  (error, fileObj) => {\n        if(fileObj){ \n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"addUserImage\",fileObj._id,userId,(error, result)=>{\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            });\n        }\n\n        self.setState({\n            uploading  : [],\n            progress   : 0,\n            inProgress : false\n        });\n    });\n\n    uploadInstance.on('error', function (error, fileObj) {\n    });\n\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\",progress);\n        \n        self.setState({\n            progress : progress\n        })\n    });\n\n    uploadInstance.start(); // Must manually start the uploaded\n}\n// add video of news feed function\naddNewsVideoS3Function = function(file,self,uploadType) {\n    // console.log(\"self\",self);\n    uploadInstance = NewsVideo.insert({\n                                        file: file,\n                                        meta: {\n                                                        locator : self.props.fileLocator,\n                                                        userId  : Meteor.userId() // Optional, used to check on server for file tampering\n                                        },\n                                        streams         : 'dynamic',\n                                        chunkSize       : 'dynamic',\n                                        allowWebWorkers : true // If you see issues with uploads, change this to false\n    }, false);\n\n    self.setState({\n        uploading  : uploadInstance, // Keep track of this instance to use below\n        inProgress : true // Show the progress bar now\n    });\n\n    // These are the event functions, don't need most of them, it shows where we are in the process\n    uploadInstance.on('start', function () {\n    });\n \n    uploadInstance.on('end', function (error, fileObj) {\n    });\n\n    uploadInstance.on('uploaded',  (error, fileObj) => {\n        if(fileObj){\n            // console.log(\"fileObj._id: \",fileObj._id);\n            if (uploadType == \"video\") {\n                Meteor.call(\"TempAddVideoToS3function\",fileObj._id,(error, result)=>{\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n              }); \n            }else if (uploadType == \"image\") {\n                 Meteor.call(\"TempAddImagetoNewsFeed\",fileObj._id,(error, result)=>{\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n              }); \n                \n            }\n        }\n\n        self.setState({\n            uploading  : [],\n            progress   : 0,\n            inProgress : false\n        });\n    });\n\n    uploadInstance.on('error', function (error, fileObj) {\n    });\n\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\",progress);\n        \n        self.setState({\n            progress : progress\n        })\n    });\n\n    uploadInstance.start(); // Must manually start the uploaded\n}\n// add Blog image function\naddBlogImagesToS3Function = function(file,self,mediaType) {\n    uploadInstance = BlogImage.insert({\n                                        file: file,\n                                        meta: {\n                                                        locator : self.props.fileLocator,\n                                                        userId  : Meteor.userId() // Optional, used to check on server for file tampering\n                                        },\n                                        streams         : 'dynamic',\n                                        chunkSize       : 'dynamic',\n                                        allowWebWorkers : true // If you see issues with uploads, change this to false\n    }, false);\n\n    self.setState({\n        uploading  : uploadInstance, // Keep track of this instance to use below\n        inProgress : true // Show the progress bar now\n    });\n\n    // These are the event functions, don't need most of them, it shows where we are in the process\n    uploadInstance.on('start', function () {\n    });\n \n    uploadInstance.on('end', function (error, fileObj) {\n    });\n\n    uploadInstance.on('uploaded',  (error, fileObj) => {\n        if(fileObj){\n            // console.log(\"fileObj._id: \",fileObj._id);\n            if (mediaType == \"image\") {\n               Meteor.call(\"addNewTemporaryBlogImage\",fileObj._id,(error, result)=>{\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n              }); \n            }else if (mediaType == \"video\") {\n             Meteor.call(\"addNewTemporaryBlogVideo\",fileObj._id,(error, result)=>{\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n              }); \n            }\n        } \n\n        self.setState({\n            uploading  : [],\n            progress   : 0,\n            inProgress : false\n        });\n    });\n\n    uploadInstance.on('error', function (error, fileObj) {\n    });\n\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadBlogImageProgressPercent\",progress);\n        \n        self.setState({\n            progress : progress\n        })\n    });\n\n    uploadInstance.start(); // Must manually start the uploaded\n}\n// add Proof image function\naddProofToS3Function = function(userId,file,prooftype,proofSubtype,self) {\n    // console.log(\"file\",file);\n    // console.log(\"prooftype\",prooftype);\n    // console.log(\"self\",self);\n    uploadInstance = ProofDocuments.insert({\n                                        file: file,\n                                        meta: {\n                                                        locator : self.props.fileLocator,\n                                                        userId  : Meteor.userId() // Optional, used to check on server for file tampering\n                                        },\n                                        streams         : 'dynamic',\n                                        chunkSize       : 'dynamic',\n                                        allowWebWorkers : true // If you see issues with uploads, change this to false\n    }, false);\n\n    self.setState({\n        uploading  : uploadInstance, // Keep track of this instance to use below\n        inProgress : true // Show the progress bar now\n    });\n\n    // These are the event functions, don't need most of them, it shows where we are in the process\n    uploadInstance.on('start', function () {\n    });\n \n    uploadInstance.on('end', function (error, fileObj) {\n    });\n\n    uploadInstance.on('uploaded',  (error, fileObj) => {\n        if(fileObj){ \n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"addNewTempProofDocs\",fileObj._id,userId,prooftype,proofSubtype,(error, result)=>{\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            });\n        }\n\n        self.setState({\n            uploading  : [],\n            progress   : 0,\n            inProgress : false\n        });\n    });\n\n    uploadInstance.on('error', function (error, fileObj) {\n    });\n\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadProofDocProgressPercent\",progress);\n        \n        self.setState({\n            progress : progress\n        })\n    });\n\n    uploadInstance.start(); // Must manually start the uploaded\n}\n// add ticket image function\naddImgsToS3Function = function(file,self) {\n    uploadInstance = TicketImages.insert({\n                                        file: file,\n                                        meta: {\n                                        locator : self.props.fileLocator,\n                                        userId  : Meteor.userId() // Optional, used to check on server for file tampering\n                                        },\n                                        streams         : 'dynamic',\n                                        chunkSize       : 'dynamic',\n                                        allowWebWorkers : true // If you see issues with uploads, change this to false\n    }, false);\n\n    self.setState({\n        uploading  : uploadInstance, // Keep track of this instance to use below\n        inProgress : true // Show the progress bar now\n    }); \n\n    // These are the event functions, don't need most of them, it shows where we are in the process\n    uploadInstance.on('start', function () {\n    });\n \n    uploadInstance.on('end', function (error, fileObj) {\n    });\n\n    uploadInstance.on('uploaded',  (error, fileObj) => {\n        if(fileObj){\n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"addNewTemporaryTicketImages\",fileObj._id,(error, result)=>{\n                swal({\n                    position: 'top-right',\n                    type: 'success',\n                    title: 'Uploaded Successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            });\n        }\n\n        self.setState({\n            uploading  : [],\n            progress   : 0,\n            inProgress : false\n        });\n    });\n\n    uploadInstance.on('error', function (error, fileObj) {\n    });\n\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\",progress);\n        \n        self.setState({\n            progress : progress\n        })\n    });\n\n    uploadInstance.start(); // Must manually start the uploaded\n}\n// add video of ticket function\naddTicketVideoS3Function = function(file,self) {\n    // console.log(\"self\",self);\n    uploadInstance = TicketVideo.insert({\n                                        file: file,\n                                        meta: {\n                                                        locator : self.props.fileLocator,\n                                                        userId  : Meteor.userId() // Optional, used to check on server for file tampering\n                                        },\n                                        streams         : 'dynamic',\n                                        chunkSize       : 'dynamic',\n                                        allowWebWorkers : true // If you see issues with uploads, change this to false\n    }, false);\n\n    self.setState({\n        uploading  : uploadInstance, // Keep track of this instance to use below\n        inProgress : true // Show the progress bar now\n    });\n\n    // These are the event functions, don't need most of them, it shows where we are in the process\n    uploadInstance.on('start', function () {\n    });\n \n    uploadInstance.on('end', function (error, fileObj) {\n    });\n\n    uploadInstance.on('uploaded',  (error, fileObj) => {\n        if(fileObj){\n            // console.log(\"fileObj._id: \",fileObj._id);\n            Meteor.call(\"TempAddVideoToS3function\",fileObj._id,(error, result)=>{\n            swal({\n                position: 'top-right',\n                type: 'success',\n                title: 'Uploaded Successfully',\n                showConfirmButton: false,\n                timer: 1500\n            });\n          }); \n        }\n\n        self.setState({\n            uploading  : [],\n            progress   : 0,\n            inProgress : false\n        });\n    });\n\n    uploadInstance.on('error', function (error, fileObj) {\n    });\n\n    uploadInstance.on('progress', function (progress, fileObj) {\n        Session.set(\"uploadServiceImgProgressPercent\",progress);\n        \n        self.setState({\n            progress : progress\n        })\n    });\n\n    uploadInstance.start(); // Must manually start the uploaded\n}"]},"hash":"f47135066b3724fe2fc7f1a29eb07607e8b82325"}
