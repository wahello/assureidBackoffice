{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["Invoice"],"specifiers":[{"kind":"local","local":"Invoice","exported":"Invoice"}]}}},"options":{"filename":"imports/website/ServiceProcess/api/Invoice.js","filenameRelative":"imports/website/ServiceProcess/api/Invoice.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/website/ServiceProcess/api/Invoice.js.map","sourceFileName":"imports/website/ServiceProcess/api/Invoice.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Invoice"},"ignored":false,"code":"module.export({\n    Invoice: () => Invoice\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n    Mongo(v) {\n        Mongo = v;\n    }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor(v) {\n        Meteor = v;\n    }\n\n}, 1);\nconst Invoice = new Mongo.Collection(\"invoice\");\n\nif (Meteor.isServer) {\n    Meteor.publish('invoiceData', () => {\n        return Invoice.find({});\n    });\n    Meteor.publish('singleInvoice', _id => {\n        return Invoice.find({\n            \"_id\": _id\n        });\n    });\n    Meteor.methods({\n        'insertInvoice': function (companyName, serviceId, serviceName, serviceRate, serviceDuration, userId, userName, companyAddress, companyCity, companyState, companyCountry, companyPincode, tax) {\n            var invoiceObj = Invoice.findOne({}, {\n                sort: {\n                    invoiceNo: -1\n                }\n            });\n\n            if (invoiceObj) {\n                invoiceNo = invoiceObj.invoiceNo + 1;\n            } else {\n                invoiceNo = 1;\n            }\n\n            var id = Invoice.insert({\n                \"invoiceNo\": invoiceNo,\n                \"serviceId\": serviceId,\n                \"serviceName\": serviceName,\n                \"serviceRate\": serviceRate,\n                \"serviceDuration\": serviceDuration,\n                \"userId\": userId,\n                \"userName\": userName,\n                \"companyName\": companyName,\n                \"companyAddress\": companyAddress,\n                \"companyCity\": companyCity,\n                \"companyState\": companyState,\n                \"companyCountry\": companyCountry,\n                \"companyPincode\": companyPincode,\n                \"tax\": tax,\n                \"createdAt\": new Date()\n            }, (error, result) => {\n                if (error) {\n                    return error;\n                } else {\n                    return result;\n                }\n            });\n            return id;\n        }\n    });\n}","map":{"version":3,"sources":["imports/website/ServiceProcess/api/Invoice.js"],"names":["module","export","Invoice","Mongo","watch","require","v","Meteor","Collection","isServer","publish","find","_id","methods","companyName","serviceId","serviceName","serviceRate","serviceDuration","userId","userName","companyAddress","companyCity","companyState","companyCountry","companyPincode","tax","invoiceObj","findOne","sort","invoiceNo","id","insert","Date","error","result"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,aAAQ,MAAIA;AAAb,CAAd;AAAqC,IAAIC,KAAJ;AAAUH,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACF,UAAMG,CAAN,EAAQ;AAACH,gBAAMG,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,MAAJ;AAAWP,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,WAAOD,CAAP,EAAS;AAACC,iBAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAG/G,MAAMJ,UAAU,IAAIC,MAAMK,UAAV,CAAqB,SAArB,CAAhB;;AAEP,IAAGD,OAAOE,QAAV,EAAmB;AACfF,WAAOG,OAAP,CAAe,aAAf,EAA6B,MAAI;AAC7B,eAAOR,QAAQS,IAAR,CAAa,EAAb,CAAP;AACH,KAFD;AAGAJ,WAAOG,OAAP,CAAe,eAAf,EAAgCE,GAAD,IAAO;AAClC,eAAOV,QAAQS,IAAR,CAAa;AAAC,mBAAQC;AAAT,SAAb,CAAP;AACH,KAFD;AAGDL,WAAOM,OAAP,CAAe;AACb,yBAAgB,UAASC,WAAT,EAAqBC,SAArB,EAA+BC,WAA/B,EAA2CC,WAA3C,EAAuDC,eAAvD,EAAuEC,MAAvE,EAA8EC,QAA9E,EAAuFC,cAAvF,EAAsGC,WAAtG,EAAkHC,YAAlH,EAA+HC,cAA/H,EAA8IC,cAA9I,EAA6JC,GAA7J,EAAkK;AAC9K,gBAAIC,aAAazB,QAAQ0B,OAAR,CAAgB,EAAhB,EAAoB;AAACC,sBAAM;AAAEC,+BAAY,CAAC;AAAf;AAAP,aAApB,CAAjB;;AACF,gBAAGH,UAAH,EAAc;AACZG,4BAAYH,WAAWG,SAAX,GAAuB,CAAnC;AACD,aAFD,MAEK;AACHA,4BAAY,CAAZ;AACD;;AACE,gBAAIC,KAAM7B,QAAQ8B,MAAR,CAAe;AACtB,6BAAuBF,SADD;AAErB,6BAAuBf,SAFF;AAGrB,+BAAuBC,WAHF;AAIrB,+BAAuBC,WAJF;AAKrB,mCAAuBC,eALF;AAMrB,0BAAuBC,MANF;AAOrB,4BAAuBC,QAPF;AAQrB,+BAAuBN,WARF;AASrB,kCAAuBO,cATF;AAUrB,+BAAuBC,WAVF;AAWrB,gCAAuBC,YAXF;AAYrB,kCAAuBC,cAZF;AAarB,kCAAuBC,cAbF;AAcrB,uBAAuBC,GAdF;AAerB,6BAAuB,IAAIO,IAAJ;AAfF,aAAf,EAgBR,CAACC,KAAD,EAAQC,MAAR,KAAiB;AAChB,oBAAID,KAAJ,EAAW;AACR,2BAAOA,KAAP;AACF,iBAFD,MAEK;AACH,2BAAOC,MAAP;AACD;AACH,aAtBS,CAAV;AAwBJ,mBAAOJ,EAAP;AACA;AAjCY,KAAf;AAoCF","file":"imports/website/ServiceProcess/api/Invoice.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const Invoice = new Mongo.Collection(\"invoice\");\n\nif(Meteor.isServer){\n    Meteor.publish('invoiceData',()=>{\n        return Invoice.find({});\n    });\n    Meteor.publish('singleInvoice',(_id)=>{\n        return Invoice.find({\"_id\" : _id});\n    });\n   Meteor.methods({\n   \t 'insertInvoice':function(companyName,serviceId,serviceName,serviceRate,serviceDuration,userId,userName,companyAddress,companyCity,companyState,companyCountry,companyPincode,tax) {\n   \t     var invoiceObj = Invoice.findOne({}, {sort: { invoiceNo : -1}});\n\t\t\t    if(invoiceObj){\n\t\t\t      invoiceNo = invoiceObj.invoiceNo + 1;\n\t\t\t    }else{\n\t\t\t      invoiceNo = 1;\n\t\t\t    }\n   \t      var id  = Invoice.insert({\n   \t      \t  \"invoiceNo\"        :   invoiceNo,\n              \"serviceId\"        :   serviceId,\n              \"serviceName\"      :   serviceName,\n              \"serviceRate\"      :   serviceRate,\n              \"serviceDuration\"  :   serviceDuration,\n              \"userId\"           :   userId,\n              \"userName\"         :   userName,\n              \"companyName\"      :   companyName,\n              \"companyAddress\"   :   companyAddress,\n              \"companyCity\"      :   companyCity,\n              \"companyState\"     :   companyState,\n              \"companyCountry\"   :   companyCountry,\n              \"companyPincode\"   :   companyPincode,\n              \"tax\"              :   tax,\n              \"createdAt\"        :   new Date(),\n   \t      },(error, result)=>{\n             if (error) {\n                return error;\n             }else{\n             \t return result;\n             }\n          });\n\n      return id;\n   \t }\n   });\n\n}\n"]},"hash":"de3ae2cebfb107c7c61ca75a904cbf6457ac94b0"}
