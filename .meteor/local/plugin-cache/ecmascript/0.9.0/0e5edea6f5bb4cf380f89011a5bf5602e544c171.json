{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["Notification","SMS"],"specifiers":[{"kind":"local","local":"Notification","exported":"Notification"},{"kind":"local","local":"SMS","exported":"SMS"}]}}},"options":{"filename":"imports/dashboard/notification/api/Notification.js","filenameRelative":"imports/dashboard/notification/api/Notification.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/notification/api/Notification.js.map","sourceFileName":"imports/dashboard/notification/api/Notification.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Notification"},"ignored":false,"code":"module.export({\n  Notification: () => Notification,\n  SMS: () => SMS\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nconst Notification = new Mongo.Collection('notification');\nconst SMS = new Mongo.Collection('sms');\n\nif (Meteor.isServer) {\n  Meteor.startup(() => {\n    Notification._ensureIndex({\n      \"toUserId\": 1\n    });\n  });\n  Meteor.publish('notification', function notification() {\n    return Notification.find({});\n  });\n  Meteor.publish('sms', function sms() {\n    return SMS.find({});\n  });\n}\n\nMeteor.methods({\n  'insertNotification': function (eventName, toMailId, toUserId, notifBody) {\n    var notifData = Notification.findOne({}, {\n      sort: {\n        notificationId: -1\n      }\n    });\n\n    if (notifData) {\n      notificationId = notifData.notificationId + 1;\n    } else {\n      notificationId = 1;\n    }\n\n    Notification.insert({\n      'notificationId': notificationId,\n      'event': eventName,\n      'toMailId': toMailId,\n      'toUserId': toUserId,\n      'notifBody': notifBody,\n      'status': 'unread',\n      'date': new Date()\n    });\n  },\n  'insertSMS': function (toUserId, smsBody, toNumber) {\n    var smsData = SMS.findOne({}, {\n      sort: {\n        smsId: -1\n      }\n    });\n\n    if (smsData) {\n      smsId = smsData.smsId + 1;\n    } else {\n      smsId = 1;\n    }\n\n    Notification.insert({\n      'smsId': smsId,\n      'toUserId': toUserId,\n      'smsBody': smsBody,\n      'status': 'unread',\n      'date': new Date()\n    });\n  },\n  'updateNotification': function (id) {\n    Notification.update({\n      \"_id\": id\n    }, {\n      $set: {\n        \"status\": 'Read'\n      }\n    }); //end update \n  },\n  'deleteNotification': function (id) {\n    Notification.remove({\n      \"_id\": id\n    });\n  },\n  'updateSMS': function (id) {\n    SMS.update({\n      \"_id\": id\n    }, {\n      $set: {\n        \"status\": 'Read'\n      }\n    }); //end update \n  },\n  'deleteSMS': function (id) {\n    SMS.remove({\n      \"_id\": id\n    });\n  }\n});","map":{"version":3,"sources":["imports/dashboard/notification/api/Notification.js"],"names":["module","export","Notification","SMS","Mongo","watch","require","v","Meteor","Collection","isServer","startup","_ensureIndex","publish","notification","find","sms","methods","eventName","toMailId","toUserId","notifBody","notifData","findOne","sort","notificationId","insert","Date","smsBody","toNumber","smsData","smsId","id","update","$set","remove"],"mappings":"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","file":"imports/dashboard/notification/api/Notification.js.map","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\n\nexport const Notification = new Mongo.Collection('notification');\nexport const SMS = new Mongo.Collection('sms');\n\nif(Meteor.isServer){\n\n  Meteor.startup(() => {\n    Notification._ensureIndex({ \"toUserId\": 1});\n  });\n  \n  Meteor.publish('notification',function notification(){\n      return Notification.find({});\n  });\n\n   Meteor.publish('sms',function sms(){\n      return SMS.find({});\n  });\n  \n}\n\nMeteor.methods({\n 'insertNotification' : function(eventName,toMailId,toUserId,notifBody){\n        \n        var notifData = Notification.findOne({}, {sort: {notificationId: -1}});\n\n        if(notifData){\n        notificationId = notifData.notificationId + 1;\n        }else{\n          notificationId = 1;\n        }\n\n            Notification.insert({\n              'notificationId' :notificationId,\n              'event'          : eventName,\n              'toMailId'       : toMailId,\n              'toUserId'       : toUserId,\n              'notifBody'      : notifBody,\n              'status'         : 'unread',\n              'date'           : new Date(),\n          });\n\n       \n        \n      },\n\n      'insertSMS' : function(toUserId,smsBody,toNumber){\n        \n        var smsData = SMS.findOne({}, {sort: {smsId: -1}});\n\n        if(smsData){\n        smsId = smsData.smsId + 1;\n        }else{\n          smsId = 1;\n        }\n\n            Notification.insert({\n              'smsId'      :smsId,\n              'toUserId'   : toUserId,\n              'smsBody'    : smsBody,\n              'status'     : 'unread',\n              'date'       : new Date(),\n          });\n\n       \n        \n      },\n\n  'updateNotification' : function(id){\n    Notification.update(\n              { \"_id\" : id },\n              { $set: { \"status\"         : 'Read',  \n                                \n                       }  \n              },\n        );//end update \n\n  },\n\n  'deleteNotification' : function(id){\n    Notification.remove({\"_id\": id});\n\n  },\n\n  'updateSMS' : function(id){\n    SMS.update(\n              { \"_id\" : id },\n              { $set: { \"status\"         : 'Read',  \n                                \n                       }  \n              },\n        );//end update \n\n  },\n\n  'deleteSMS' : function(id){\n    SMS.remove({\"_id\": id});\n\n  }\n\n});"]},"hash":"0e5edea6f5bb4cf380f89011a5bf5602e544c171"}
