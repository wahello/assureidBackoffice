{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"meteor/random","imported":["Random"],"specifiers":[{"kind":"named","imported":"Random","local":"Random"}]},{"source":"meteor/ostrio:files","imported":["FilesCollection"],"specifiers":[{"kind":"named","imported":"FilesCollection","local":"FilesCollection"}]},{"source":"stream","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"stream"}]},{"source":"meteor/session","imported":["Session"],"specifiers":[{"kind":"named","imported":"Session","local":"Session"}]},{"source":"aws-sdk/clients/s3","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"S3"}]},{"source":"fs","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"fs"}]},{"source":"/imports/dashboard/product/addNewProduct/api/projectSettings.js","imported":["ProjectSettings"],"specifiers":[{"kind":"named","imported":"ProjectSettings","local":"ProjectSettings"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/dashboard/ticketManagement/uploadToServer/uploadVideoToServer.js","filenameRelative":"imports/dashboard/ticketManagement/uploadToServer/uploadVideoToServer.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/ticketManagement/uploadToServer/uploadVideoToServer.js.map","sourceFileName":"imports/dashboard/ticketManagement/uploadToServer/uploadVideoToServer.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"uploadVideoToServer"},"ignored":false,"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor(v) {\n        Meteor = v;\n    }\n\n}, 0);\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n    _(v) {\n        _ = v;\n    }\n\n}, 1);\nlet Random;\nmodule.watch(require(\"meteor/random\"), {\n    Random(v) {\n        Random = v;\n    }\n\n}, 2);\nlet FilesCollection;\nmodule.watch(require(\"meteor/ostrio:files\"), {\n    FilesCollection(v) {\n        FilesCollection = v;\n    }\n\n}, 3);\nlet stream;\nmodule.watch(require(\"stream\"), {\n    default(v) {\n        stream = v;\n    }\n\n}, 4);\nlet Session;\nmodule.watch(require(\"meteor/session\"), {\n    Session(v) {\n        Session = v;\n    }\n\n}, 5);\nlet S3;\nmodule.watch(require(\"aws-sdk/clients/s3\"), {\n    default(v) {\n        S3 = v;\n    }\n\n}, 6);\nlet fs;\nmodule.watch(require(\"fs\"), {\n    default(v) {\n        fs = v;\n    }\n\n}, 7);\nlet ProjectSettings;\nmodule.watch(require(\"/imports/dashboard/product/addNewProduct/api/projectSettings.js\"), {\n    ProjectSettings(v) {\n        ProjectSettings = v;\n    }\n\n}, 8);\nvar s3Data = ProjectSettings.findOne({\n    \"_id\": \"1\"\n});\n\nif (s3Data) {\n    process.env.S3 = '{\"s3\":{\"key\": \"' + s3Data.key + '\", \"secret\": \"' + s3Data.secret + '\", \"bucket\": \"' + s3Data.bucket + '\", \"region\": \"' + s3Data.region + '\"}}';\n\n    if (process.env.S3) {\n        Meteor.settings.s3 = JSON.parse(process.env.S3).s3;\n        const s3Conf = Meteor.settings.s3 || {};\n        const bound = Meteor.bindEnvironment(callback => {\n            return callback();\n        });\n\n        if (s3Conf && s3Conf.key && s3Conf.secret && s3Conf.bucket && s3Conf.region) {\n            module.export({\n                TicketImages: () => TicketImages\n            });\n            const s3 = new S3({\n                secretAccessKey: s3Conf.secret,\n                accessKeyId: s3Conf.key,\n                region: s3Conf.region,\n                httpOptions: {\n                    timeout: 60000,\n                    agent: false\n                }\n            });\n            const TicketImages = new FilesCollection({\n                debug: false,\n                // Change to `true` for debugging\n                storagePath: 'TicketImages',\n                collectionName: 'TicketImages',\n                allowClientCode: false,\n                chunkSize: 1024 * 1024,\n\n                onAfterUpload(fileRef) {\n                    _.each(fileRef.versions, (vRef, version) => {\n                        const filePath = 'TicketImages/' + fileRef._id + '.' + fileRef.extension;\n                        s3.putObject({\n                            StorageClass: 'STANDARD',\n                            Bucket: s3Conf.bucket,\n                            //s3Conf.bucket,\n                            Key: filePath,\n                            Body: fs.createReadStream(vRef.path),\n                            ContentType: vRef.type\n                        }, error => {\n                            bound(() => {\n                                if (error) {\n                                    console.error(error);\n                                } else {\n                                    const upd = {\n                                        $set: {}\n                                    };\n                                    upd['$set']['versions.' + version + '.meta.pipePath'] = filePath;\n                                    this.collection.update({\n                                        _id: fileRef._id\n                                    }, upd, updError => {\n                                        if (updError) {\n                                            console.error(updError);\n                                        } else {\n                                            this.unlink(this.collection.findOne(fileRef._id), version);\n                                        }\n                                    });\n                                }\n                            });\n                        });\n                    });\n                },\n\n                interceptDownload(http, fileRef, version) {\n                    let path;\n\n                    if (fileRef && fileRef.versions && fileRef.versions[version] && fileRef.versions[version].meta && fileRef.versions[version].meta.pipePath) {\n                        path = fileRef.versions[version].meta.pipePath;\n                    }\n\n                    if (path) {\n                        const opts = {\n                            Bucket: s3Conf.bucket,\n                            Key: path\n                        };\n\n                        if (http.request.headers.range) {\n                            const vRef = fileRef.versions[version];\n\n                            let range = _.clone(http.request.headers.range);\n\n                            const array = range.split(/bytes=([0-9]*)-([0-9]*)/);\n                            const start = parseInt(array[1]);\n                            let end = parseInt(array[2]);\n\n                            if (isNaN(end)) {\n                                end = start + this.chunkSize - 1;\n\n                                if (end >= vRef.size) {\n                                    end = vRef.size - 1;\n                                }\n                            }\n\n                            opts.Range = `bytes=${start}-${end}`;\n                            http.request.headers.range = `bytes=${start}-${end}`;\n                        }\n\n                        const fileColl = this;\n                        s3.getObject(opts, function (error) {\n                            if (error) {\n                                console.error(error);\n\n                                if (!http.response.finished) {\n                                    http.response.end();\n                                }\n                            } else {\n                                if (http.request.headers.range && this.httpResponse.headers['content-range']) {\n                                    http.request.headers.range = this.httpResponse.headers['content-range'].split('/')[0].replace('bytes ', 'bytes=');\n                                }\n\n                                const dataStream = new stream.PassThrough();\n                                fileColl.serve(http, fileRef, fileRef.versions[version], version, dataStream);\n                                dataStream.end(this.data.Body);\n                            }\n                        });\n                        return true;\n                    }\n\n                    return false;\n                }\n\n            });\n            // Intercept FilesCollection's remove method to remove file from AWS:S3\n            const _origRemove = TicketImages.remove;\n\n            TicketImages.remove = function (search) {\n                const cursor = this.collection.find(search);\n                cursor.forEach(fileRef => {\n                    _.each(fileRef.versions, vRef => {\n                        if (vRef && vRef.meta && vRef.meta.pipePath) {\n                            // Remove the object from AWS:S3 first, then we will call the original FilesCollection remove\n                            s3.deleteObject({\n                                Bucket: s3Conf.bucket,\n                                Key: vRef.meta.pipePath\n                            }, error => {\n                                bound(() => {\n                                    if (error) {\n                                        console.error(error);\n                                    }\n                                });\n                            });\n                        }\n                    });\n                }); //remove original file from database\n\n                _origRemove.call(this, search);\n            };\n        } else {\n            throw new Meteor.Error(401, 'Missing Meteor file settings');\n        }\n    }\n}","map":{"version":3,"sources":["imports/dashboard/ticketManagement/uploadToServer/uploadVideoToServer.js"],"names":["Meteor","module","watch","require","v","_","Random","FilesCollection","stream","default","Session","S3","fs","ProjectSettings","s3Data","findOne","process","env","key","secret","bucket","region","settings","s3","JSON","parse","s3Conf","bound","bindEnvironment","callback","export","TicketImages","secretAccessKey","accessKeyId","httpOptions","timeout","agent","debug","storagePath","collectionName","allowClientCode","chunkSize","onAfterUpload","fileRef","each","versions","vRef","version","filePath","_id","extension","putObject","StorageClass","Bucket","Key","Body","createReadStream","path","ContentType","type","error","console","upd","$set","collection","update","updError","unlink","interceptDownload","http","meta","pipePath","opts","request","headers","range","clone","array","split","start","parseInt","end","isNaN","size","Range","fileColl","getObject","response","finished","httpResponse","replace","dataStream","PassThrough","serve","data","_origRemove","remove","search","cursor","find","forEach","deleteObject","call","Error"],"mappings":"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","file":"imports/dashboard/ticketManagement/uploadToServer/uploadVideoToServer.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { _ } from 'meteor/underscore';\nimport { Random } from 'meteor/random';\nimport { FilesCollection } from 'meteor/ostrio:files';\nimport stream from 'stream';\nimport { Session } from 'meteor/session';\n\nimport S3 from 'aws-sdk/clients/s3'; // http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html\n// See fs-extra and graceful-fs NPM packages\n// For better i/o performance\nimport fs from 'fs';\n\nimport { ProjectSettings } from '/imports/dashboard/product/addNewProduct/api/projectSettings.js';\n \n\n\nvar s3Data = ProjectSettings.findOne({\"_id\":\"1\"});\nif(s3Data){\n    process.env.S3='{\"s3\":{\"key\": \"'+ s3Data.key+'\", \"secret\": \"'+ s3Data.secret+'\", \"bucket\": \"'+ s3Data.bucket +'\", \"region\": \"'+s3Data.region+'\"}}' ;\n    \n\n    if (process.env.S3) {\n        Meteor.settings.s3 = JSON.parse(process.env.S3).s3;\n        const s3Conf = Meteor.settings.s3 || {};\n        const bound  = Meteor.bindEnvironment((callback) => {\n            return callback();\n        });\n\n        if (s3Conf && s3Conf.key && s3Conf.secret && s3Conf.bucket && s3Conf.region) {\n            const s3 = new S3({\n                secretAccessKey     : s3Conf.secret,\n                accessKeyId         : s3Conf.key,\n                region              : s3Conf.region,\n                httpOptions: {\n                    timeout : 60000,\n                    agent   : false\n                }\n            });\n\n            export const TicketImages = new FilesCollection({\n                debug          : false, // Change to `true` for debugging\n                storagePath    : 'TicketImages',\n                collectionName : 'TicketImages',\n                allowClientCode: false,\n                chunkSize      : 1024 * 1024,\n\n                onAfterUpload(fileRef) {\n                   \n                    _.each(fileRef.versions, (vRef, version) => {\n                       \n                        const filePath = 'TicketImages/' + fileRef._id +'.' + fileRef.extension;\n                        s3.putObject({\n                            StorageClass : 'STANDARD',\n                            Bucket       : s3Conf.bucket,         //s3Conf.bucket,\n                            Key          : filePath,\n                            Body         : fs.createReadStream(vRef.path),\n                            ContentType  : vRef.type,\n                        }, (error) => {\n                            bound(() => {\n                                if (error) {\n                                    console.error(error);\n                                } else {\n                                    const upd = { $set: {} };\n                                    upd['$set']['versions.' + version + '.meta.pipePath'] = filePath;\n\n                                    this.collection.update({\n                                        _id: fileRef._id\n                                    }, upd, (updError) => {\n                                        if (updError) {\n                                            console.error(updError);\n                                        } else {\n                                            this.unlink(this.collection.findOne(fileRef._id), version);\n                                        }\n                                    });\n                                }\n                            });\n                        });\n                    });\n                },\n\n                interceptDownload(http, fileRef, version) {\n                    let path;\n\n                    if (fileRef && fileRef.versions && fileRef.versions[version] && fileRef.versions[version].meta && fileRef.versions[version].meta.pipePath) {\n                        path = fileRef.versions[version].meta.pipePath;\n                    }\n\n                    if (path) {\n                        const opts = {\n                            Bucket: s3Conf.bucket,\n                            Key   : path\n                        };\n\n                        if (http.request.headers.range) {\n                            const vRef  = fileRef.versions[version];\n                            let range   = _.clone(http.request.headers.range);\n                            const array = range.split(/bytes=([0-9]*)-([0-9]*)/);\n                            const start = parseInt(array[1]);\n                            let end = parseInt(array[2]);\n                            if (isNaN(end)) {\n                                end = (start + this.chunkSize) - 1;\n                                if (end >= vRef.size) {\n                                    end = vRef.size - 1;\n                                }\n                            }\n                            opts.Range = `bytes=${start}-${end}`;\n                            http.request.headers.range = `bytes=${start}-${end}`;\n                        }\n\n                        const fileColl = this;\n                        s3.getObject(opts, function(error) {\n                            if (error) {\n                                console.error(error);\n                                if (!http.response.finished) {\n                                    http.response.end();\n                                }\n                            } else {\n                                if (http.request.headers.range && this.httpResponse.headers['content-range']) {\n                                    http.request.headers.range = this.httpResponse.headers['content-range'].split('/')[0].replace('bytes ', 'bytes=');\n                                }\n\n                                const dataStream = new stream.PassThrough();\n                                fileColl.serve(http, fileRef, fileRef.versions[version], version, dataStream);\n                                dataStream.end(this.data.Body);\n                            }\n                        });\n\n                        return true;\n                    }\n                    return false;\n                }\n            });\n\n            // Intercept FilesCollection's remove method to remove file from AWS:S3\n            const _origRemove = TicketImages.remove;\n            TicketImages.remove = function(search) {\n                const cursor = this.collection.find(search);\n                cursor.forEach((fileRef) => {\n                    _.each(fileRef.versions, (vRef) => {\n                        if (vRef && vRef.meta && vRef.meta.pipePath) {\n                            // Remove the object from AWS:S3 first, then we will call the original FilesCollection remove\n                            s3.deleteObject({\n                                Bucket: s3Conf.bucket,\n                                Key: vRef.meta.pipePath,\n                            }, (error) => {\n                                bound(() => {\n                                    if (error) {\n                                        console.error(error);\n                                    }\n                                });\n                            });\n                        }\n                    });\n                });\n\n                //remove original file from database\n                _origRemove.call(this, search);\n            };\n        } else {\n            throw new Meteor.Error(401, 'Missing Meteor file settings');\n        }\n    }\n}\n"]},"hash":"66b2a23b4cf18e1248e382f4be9badf6d52a7944"}
