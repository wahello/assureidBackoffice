{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"semver","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"semver"}]},{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]}],"exports":{"exported":["checkNpmVersions"],"specifiers":[{"kind":"local","local":"checkNpmVersions","exported":"checkNpmVersions"}]}}},"options":{"filename":"packages/tmeasday:check-npm-versions/check-npm-versions.js","filenameRelative":"packages/tmeasday:check-npm-versions/check-npm-versions.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/tmeasday:check-npm-versions/check-npm-versions.js.map","sourceFileName":"packages/tmeasday:check-npm-versions/check-npm-versions.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"check-npm-versions"},"ignored":false,"code":"var module1 = module;\nmodule1.export({\n  checkNpmVersions: function () {\n    return checkNpmVersions;\n  }\n});\nvar semver = void 0;\nmodule1.watch(require(\"semver\"), {\n  \"default\": function (v) {\n    semver = v;\n  }\n}, 0);\n\nvar _ = void 0;\n\nmodule1.watch(require(\"meteor/underscore\"), {\n  _: function (v) {\n    _ = v;\n  }\n}, 1);\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nvar compatibleVersionIsInstalled = function (name, range) {\n  try {\n    var installedVersion = require(name + \"/package.json\").version;\n\n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    console.log(e); // XXX I guess the only error here is that the module doesn't exist?\n\n    return false;\n  }\n};\n\nvar checkNpmVersions = function (packages, packageName) {\n  var failures = {};\n\n  _.forEach(packages, function (range, name) {\n    var failure = compatibleVersionIsInstalled(name, range);\n\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_.keys(failures).length === 0) {\n    return true;\n  }\n\n  var errors = [];\n\n  _.forEach(failures, function (installed, name) {\n    var requirement = name + \"@\" + packages[name];\n\n    if (installed) {\n      errors.push(\" - \" + name + \"@\" + installed + \" installed, \" + requirement + \" needed\");\n    } else {\n      errors.push(\" - \" + name + \"@\" + packages[name] + \" not installed.\");\n    }\n  });\n\n  var qualifier = packageName ? \"(for \" + packageName + \") \" : '';\n  console.warn(\"WARNING: npm peer requirements \" + qualifier + \"not installed:\\n\" + errors.join('\\n') + \"\\n\\nRead more about installing npm peer dependencies:\\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\\n\");\n};","map":{"version":3,"sources":["packages/tmeasday:check-npm-versions/check-npm-versions.js"],"names":["module1","module","export","checkNpmVersions","semver","watch","require","v","_","compatibleVersionIsInstalled","name","range","installedVersion","version","satisfies","e","console","log","packages","packageName","failures","forEach","failure","keys","length","errors","installed","requirement","push","qualifier","warn","join"],"mappings":"AAAA,IAAMA,UAAQC,MAAd;AAAqBD,QAAQE,MAAR,CAAe;AAACC,oBAAiB;AAAA,WAAIA,gBAAJ;AAAA;AAAlB,CAAf;AAAwD,IAAIC,eAAJ;AAAWJ,QAAQK,KAAR,CAAcC,QAAQ,QAAR,CAAd,EAAgC;AAAA,uBAASC,CAAT,EAAW;AAACH,aAAOG,CAAP;AAAS;AAArB,CAAhC,EAAuD,CAAvD;;AAA0D,IAAIC,UAAJ;;AAAMR,QAAQK,KAAR,CAAcC,QAAQ,mBAAR,CAAd,EAA2C;AAACE,GAAD,YAAGD,CAAH,EAAK;AAACC,QAAED,CAAF;AAAI;AAAV,CAA3C,EAAuD,CAAvD;;AAGxJ;AACA;AACA;AACA;AACA,IAAME,+BAA+B,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACpD,MAAI;AACF,QAAMC,mBAAmBN,QAAWI,IAAX,oBAAgCG,OAAzD;;AACA,QAAIT,OAAOU,SAAP,CAAiBF,gBAAjB,EAAmCD,KAAnC,CAAJ,EAA+C;AAC7C,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOC,gBAAP;AACD;AACF,GAPD,CAOE,OAAOG,CAAP,EAAU;AACVC,YAAQC,GAAR,CAAYF,CAAZ,EADU,CAEV;;AACA,WAAO,KAAP;AACD;AACF,CAbD;;AAeO,IAAMZ,mBAAmB,UAACe,QAAD,EAAWC,WAAX,EAA2B;AACzD,MAAMC,WAAW,EAAjB;;AACAZ,IAAEa,OAAF,CAAUH,QAAV,EAAoB,UAACP,KAAD,EAAQD,IAAR,EAAiB;AACnC,QAAMY,UAAUb,6BAA6BC,IAA7B,EAAmCC,KAAnC,CAAhB;;AACA,QAAIW,YAAY,IAAhB,EAAsB;AACpBF,eAASV,IAAT,IAAiBY,OAAjB;AACD;AACF,GALD;;AAOA,MAAId,EAAEe,IAAF,CAAOH,QAAP,EAAiBI,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,WAAO,IAAP;AACD;;AAED,MAAMC,SAAS,EAAf;;AACAjB,IAAEa,OAAF,CAAUD,QAAV,EAAoB,UAACM,SAAD,EAAYhB,IAAZ,EAAqB;AACvC,QAAMiB,cAAiBjB,IAAjB,SAAyBQ,SAASR,IAAT,CAA/B;;AAEA,QAAIgB,SAAJ,EAAe;AACbD,aAAOG,IAAP,SAAkBlB,IAAlB,SAA0BgB,SAA1B,oBAAkDC,WAAlD;AACD,KAFD,MAEO;AACLF,aAAOG,IAAP,SAAkBlB,IAAlB,SAA0BQ,SAASR,IAAT,CAA1B;AACD;AACF,GARD;;AAUA,MAAMmB,YAAYV,wBAAsBA,WAAtB,UAAwC,EAA1D;AACAH,UAAQc,IAAR,qCAA+CD,SAA/C,wBACAJ,OAAOM,IAAP,CAAY,IAAZ,CADA;AAMD,CA/BM","file":"packages/tmeasday:check-npm-versions/check-npm-versions.js.map","sourcesContent":["import semver from 'semver';\nimport { _ } from 'meteor/underscore';\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name, range) => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;  \n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    console.log(e)\n    // XXX I guess the only error here is that the module doesn't exist?\n    return false;\n  }\n};\n\nexport const checkNpmVersions = (packages, packageName) => {\n  const failures = {};\n  _.forEach(packages, (range, name) => {\n    const failure = compatibleVersionIsInstalled(name, range);\n    if (failure !== true) {\n      failures[name] = failure;\n    }\n  });\n\n  if (_.keys(failures).length === 0) {\n    return true;\n  }\n\n  const errors = [];\n  _.forEach(failures, (installed, name) => {\n    const requirement = `${name}@${packages[name]}`;\n\n    if (installed) {\n      errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n    } else {\n      errors.push(` - ${name}@${packages[name]} not installed.`);\n    }\n  });\n\n  const qualifier = packageName ? `(for ${packageName}) ` : '';\n  console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n${errors.join('\\n')}\n\nRead more about installing npm peer dependencies:\n  http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n`);\n};\n"]},"hash":"9b7437a7093c63329290955b8469fe90d3653a34"}
