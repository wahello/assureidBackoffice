{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["VideoLibrary"],"specifiers":[{"kind":"local","local":"VideoLibrary","exported":"VideoLibrary"}]}}},"options":{"filename":"imports/dashboard/reactCMS/api/VideoLibrary.js","filenameRelative":"imports/dashboard/reactCMS/api/VideoLibrary.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/reactCMS/api/VideoLibrary.js.map","sourceFileName":"imports/dashboard/reactCMS/api/VideoLibrary.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"VideoLibrary"},"ignored":false,"code":"module.export({\n    VideoLibrary: () => VideoLibrary\n});\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n    Mongo(v) {\n        Mongo = v;\n    }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor(v) {\n        Meteor = v;\n    }\n\n}, 1);\nconst VideoLibrary = new Mongo.Collection(\"videoLibrary\");\n\nif (Meteor.isServer) {\n    Meteor.publish('videoLibrary', () => {\n        return VideoLibrary.find({});\n    });\n    Meteor.methods({\n        'createVideoLibrary': function (videoLibraryName, videoLibraryUrl, videoLibraryCategory, youtubeVideoLink, videoLibraryBody, userId, updateTimestamp) {\n            VideoLibrary.insert({\n                'videoLibraryName': videoLibraryName,\n                'videoLibraryUrl': videoLibraryUrl,\n                'videoLibraryCategory': videoLibraryCategory,\n                'youtubeVideoLink': youtubeVideoLink,\n                'videoLibraryBody': videoLibraryBody,\n                'createdAt': new Date(),\n                'authorUserId': userId,\n                'lastModified': updateTimestamp\n            });\n        },\n        'updateVideoLibrary': function (id, videoLibraryName, videoLibraryUrl, videoLibraryCategory, youtubeVideoLink, videoLibraryBody, userId, updateTimestamp) {\n            console.log(\"update server method\");\n            console.log(id);\n            VideoLibrary.update({\n                '_id': id\n            }, {\n                $set: {\n                    'videoLibraryName': videoLibraryName,\n                    'videoLibraryUrl': videoLibraryUrl,\n                    'videoLibraryCategory': videoLibraryCategory,\n                    'youtubeVideoLink': youtubeVideoLink,\n                    'videoLibraryBody': videoLibraryBody,\n                    'authorUserId': userId,\n                    'lastModified': updateTimestamp //End of set\n\n                }\n            });\n        },\n        'deleteVideoLibrary': function (id) {\n            VideoLibrary.remove({\n                '_id': id\n            });\n        }\n    });\n}","map":{"version":3,"sources":["imports/dashboard/reactCMS/api/VideoLibrary.js"],"names":["module","export","VideoLibrary","Mongo","watch","require","v","Meteor","Collection","isServer","publish","find","methods","videoLibraryName","videoLibraryUrl","videoLibraryCategory","youtubeVideoLink","videoLibraryBody","userId","updateTimestamp","insert","Date","id","console","log","update","$set","remove"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,kBAAa,MAAIA;AAAlB,CAAd;AAA+C,IAAIC,KAAJ;AAAUH,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACF,UAAMG,CAAN,EAAQ;AAACH,gBAAMG,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,MAAJ;AAAWP,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,WAAOD,CAAP,EAAS;AAACC,iBAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAGzH,MAAMJ,eAAe,IAAIC,MAAMK,UAAV,CAAqB,cAArB,CAArB;;AAEP,IAAGD,OAAOE,QAAV,EAAmB;AACfF,WAAOG,OAAP,CAAe,cAAf,EAA8B,MAAI;AAC9B,eAAOR,aAAaS,IAAb,CAAkB,EAAlB,CAAP;AACH,KAFD;AAIAJ,WAAOK,OAAP,CAAe;AACd,8BAAqB,UAASC,gBAAT,EAA0BC,eAA1B,EAA0CC,oBAA1C,EAA+DC,gBAA/D,EAAgFC,gBAAhF,EAAiGC,MAAjG,EAAwGC,eAAxG,EAAwH;AAE5IjB,yBAAakB,MAAb,CAAoB;AACnB,oCAA0BP,gBADP;AAEnB,mCAA0BC,eAFP;AAGhB,wCAA0BC,oBAHV;AAIhB,oCAA0BC,gBAJV;AAKnB,oCAA0BC,gBALP;AAMnB,6BAA0B,IAAII,IAAJ,EANP;AAOhB,gCAA0BH,MAPV;AAQhB,gCAA0BC;AARV,aAApB;AAUA,SAba;AAcb,8BAAqB,UAASG,EAAT,EAAYT,gBAAZ,EAA6BC,eAA7B,EAA6CC,oBAA7C,EAAkEC,gBAAlE,EAAmFC,gBAAnF,EAAoGC,MAApG,EAA2GC,eAA3G,EAA2H;AAC9II,oBAAQC,GAAR,CAAY,sBAAZ;AACAD,oBAAQC,GAAR,CAAYF,EAAZ;AACFpB,yBAAauB,MAAb,CACC;AAAE,uBAAOH;AAAT,aADD,EAEO;AACEI,sBAAK;AACF,wCAA0Bb,gBADxB;AAEF,uCAA0BC,eAFxB;AAGF,4CAA0BC,oBAHxB;AAIF,wCAA0BC,gBAJxB;AAKF,wCAA0BC,gBALxB;AAMF,oCAA0BC,MANxB;AAOF,oCAA0BC,eAPxB,CAQL;;AARK;AADP,aAFP;AAcA,SA/Ba;AAgCb,8BAAqB,UAASG,EAAT,EAAY;AAC/BpB,yBAAayB,MAAb,CAAoB;AAAC,uBAAOL;AAAR,aAApB;AAEF;AAnCa,KAAf;AAqCH","file":"imports/dashboard/reactCMS/api/VideoLibrary.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const VideoLibrary = new Mongo.Collection(\"videoLibrary\");\n\nif(Meteor.isServer){\n    Meteor.publish('videoLibrary',()=>{\n        return VideoLibrary.find({});\n    });\n\n    Meteor.methods({\n    \t'createVideoLibrary':function(videoLibraryName,videoLibraryUrl,videoLibraryCategory,youtubeVideoLink,videoLibraryBody,userId,updateTimestamp){\n\n    \t\tVideoLibrary.insert({\n    \t\t\t'videoLibraryName'      : videoLibraryName,\n    \t\t\t'videoLibraryUrl'       : videoLibraryUrl,\n          'videoLibraryCategory'  : videoLibraryCategory,\n          'youtubeVideoLink'      : youtubeVideoLink,\n    \t\t\t'videoLibraryBody'      : videoLibraryBody,\n    \t\t\t'createdAt'             : new Date(),\n          'authorUserId'          : userId,\n          'lastModified'          : updateTimestamp,\n    \t\t});\n    \t},\n      'updateVideoLibrary':function(id,videoLibraryName,videoLibraryUrl,videoLibraryCategory,youtubeVideoLink,videoLibraryBody,userId,updateTimestamp){\n        console.log(\"update server method\");\n        console.log(id);\n    \t\tVideoLibrary.update(\n    \t\t\t{ '_id': id },\n    \t        {\n    \t          $set:{\n                  'videoLibraryName'      : videoLibraryName,\n                  'videoLibraryUrl'       : videoLibraryUrl,\n                  'videoLibraryCategory'  : videoLibraryCategory,\n                  'youtubeVideoLink'      : youtubeVideoLink,\n                  'videoLibraryBody'      : videoLibraryBody,\n                  'authorUserId'          : userId,\n                  'lastModified'          : updateTimestamp,\n    \t        } //End of set\n    \t      }\n    \t\t);\n    \t},\n      'deleteVideoLibrary':function(id){\n     \t\t VideoLibrary.remove({'_id': id});\n\n    \t},\n    });\n}\n"]},"hash":"2f265e1effdd3d59a4a4ab3b1e6ab065e1287713"}
