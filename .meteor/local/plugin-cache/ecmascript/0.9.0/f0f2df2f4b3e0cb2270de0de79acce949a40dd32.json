{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":["Services","TempServiceImages"],"specifiers":[{"kind":"local","local":"Services","exported":"Services"},{"kind":"local","local":"TempServiceImages","exported":"TempServiceImages"}]}}},"options":{"filename":"imports/dashboard/reactCMS/api/Services.js","filenameRelative":"imports/dashboard/reactCMS/api/Services.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/dashboard/reactCMS/api/Services.js.map","sourceFileName":"imports/dashboard/reactCMS/api/Services.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"Services"},"ignored":false,"code":"module.export({\n  Services: function () {\n    return Services;\n  },\n  TempServiceImages: function () {\n    return TempServiceImages;\n  }\n});\nvar Mongo = void 0;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Services = new Mongo.Collection(\"services\");\nvar TempServiceImages = new Mongo.Collection(\"tempServiceImages\");\n\nif (Meteor.isServer) {\n  var ServiceImage = void 0;\n  module.watch(require(\"../UploadToServer/UploadServiceImgsServer.js\"), {\n    ServiceImage: function (v) {\n      ServiceImage = v;\n    }\n  }, 2);\n  Meteor.publish('services', function () {\n    return Services.find({});\n  });\n  Meteor.publish('tempServiceImages', function () {\n    return TempServiceImages.find({});\n  });\n  Meteor.publish('singleServices', function (_id) {\n    return Services.find({\n      \"_id\": _id\n    });\n  });\n  Meteor.methods({\n    \"addNewTemporaryServiceImage\": function (id) {\n      var data = ServiceImage.findOne({\n        \"_id\": id\n      });\n      var imageLink = data.link();\n      TempServiceImages.insert({\n        \"userId\": Meteor.userId(),\n        \"imageLink\": imageLink,\n        \"createdAt\": new Date()\n      }, function (error, result) {});\n    },\n    //  'uploadTempServiceImages':function(id,amazonUrl,uploadTime){\n    // \tTempServiceImages.insert({\n    // \t\t'id'             : id,\n    // \t\t'amazonUrl'      : amazonUrl,\n    // \t\t'uploadTime'     : new Date(),\n    //      'authorUserId'   : id,\n    //      'submitted'      : false,\n    // \t});\n    // },\n    //  'updateTempServiceImages':function(_id,boolean){\n    // \tTempServiceImages.update({\n    // \t\t'_id'           : _id},\n    //      {$set:{\n    // \t\t'submitted'      : boolean,\n    // \t}}); \n    // },\n    // 'removeTempServiceImages':function(id){\n    //   TempServiceImages.remove({'_id':id,'submitted':true});\n    // },\n    // 'removeServiceUnsubmitImages':function(id){\n    //   TempServiceImages.remove({'id':id,'submitted':false});\n    // },\n    // 'removeServiceUrlImages':function(url){\n    //   TempServiceImages.remove({'amazonUrl':url});\n    // },\n    'createService': function (ProfileForms, StatutoryForm, AddressForm, EducationForm, WorkForm, SkillsCertificate, OtherInfoForm, serviceName, serviceRate, serviceDuration, servicesDescription, userId, lastModified) {\n      // var tempServiceImages = \n      // console.log(s3);\n      var getImage = TempServiceImages.findOne({}, {\n        sort: {\n          createdAt: -1,\n          limit: 1\n        }\n      });\n\n      if (getImage) {\n        var image = getImage.imageLink;\n      } else {\n        var image = \"/images/assureid/noImage.png\";\n      }\n\n      Services.insert({\n        'ProfileForms': ProfileForms,\n        'StatutoryForm': StatutoryForm,\n        'AddressForm': AddressForm,\n        'EducationForm': EducationForm,\n        'WorkForm': WorkForm,\n        'SkillsCertificate': SkillsCertificate,\n        'OtherInfoForm': OtherInfoForm,\n        'serviceName': serviceName,\n        'serviceRate': serviceRate,\n        'serviceDuration': serviceDuration,\n        'servicesDescription': servicesDescription,\n        'image': image,\n        'createdAt': new Date(),\n        'authorUserId': userId,\n        'lastModified': lastModified\n      });\n      TempServiceImages.remove({});\n    },\n    'updateService': function (id, ProfileForms, StatutoryForm, AddressForm, EducationForm, WorkForm, SkillsCertificate, OtherInfoForm, serviceName, serviceRate, serviceDuration, servicesDescription, userId, lastModified) {\n      var data = TempServiceImages.findOne({\n        \"userId\": Meteor.userId()\n      });\n\n      if (data) {\n        var imageLink = data.imageLink;\n      } else {\n        var oldImgData = Services.findOne({\n          \"_id\": id\n        }, {\n          sort: {\n            \"createdAt\": -1\n          }\n        });\n\n        if (oldImgData) {\n          var imageLink = oldImgData.image;\n        }\n      }\n\n      Services.update({\n        '_id': id\n      }, {\n        $set: {\n          'ProfileForms': ProfileForms,\n          'StatutoryForm': StatutoryForm,\n          'AddressForm': AddressForm,\n          'EducationForm': EducationForm,\n          'WorkForm': WorkForm,\n          'SkillsCertificate': SkillsCertificate,\n          'OtherInfoForm': OtherInfoForm,\n          'serviceName': serviceName,\n          'serviceRate': serviceRate,\n          'serviceDuration': serviceDuration,\n          'servicesDescription': servicesDescription,\n          'image': imageLink,\n          'authorUserId': userId,\n          'lastModified': lastModified //End of set\n\n        }\n      });\n      TempServiceImages.remove({});\n    },\n    //  'updateEditService':function(amazonUrl){\n    // \tServices.update(\n    // \t\t{ \"s3.amazonUrl\": amazonUrl },\n    //         {\n    //           $set:{\n    //              's3.$.amazonUrl'   : \"\",\n    //              's3.$.uploadTime'  : \"\",\n    //         } //End of set\n    //       }\n    // \t);\n    // },\n    //  'updateServiceAmazonUrl':function(amazonUrl,uploadTime,id){\n    // \tServices.update(\n    // \t\t   { '_id': id },\n    //         {\n    //           $push:{\n    //                's3':\n    //                {\n    //                  'amazonUrl': amazonUrl,\n    //                  'uploadTime':uploadTime,\n    //                }\n    //         }\n    //       }\n    // \t);\n    // },\n    'deleteService': function (id) {\n      Services.remove({\n        '_id': id\n      });\n    }\n  });\n}","map":{"version":3,"sources":["imports/dashboard/reactCMS/api/Services.js"],"names":["module","export","Services","TempServiceImages","Mongo","watch","require","v","Meteor","Collection","isServer","ServiceImage","publish","find","_id","methods","id","data","findOne","imageLink","link","insert","userId","Date","error","result","ProfileForms","StatutoryForm","AddressForm","EducationForm","WorkForm","SkillsCertificate","OtherInfoForm","serviceName","serviceRate","serviceDuration","servicesDescription","lastModified","getImage","sort","createdAt","limit","image","remove","oldImgData","update","$set"],"mappings":"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","file":"imports/dashboard/reactCMS/api/Services.js.map","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Meteor} from 'meteor/meteor';\n\nexport const Services = new Mongo.Collection(\"services\");\nexport const TempServiceImages = new Mongo.Collection(\"tempServiceImages\");\n\nif(Meteor.isServer){\nimport { ServiceImage } from \"../UploadToServer/UploadServiceImgsServer.js\";\n    Meteor.publish('services',()=>{\n      return Services.find({});\n    });\n    Meteor.publish('tempServiceImages',()=>{\n        return TempServiceImages.find({});\n    });\n    Meteor.publish('singleServices',(_id)=>{\n        return Services.find({\"_id\":_id});   \n    });\n\n    Meteor.methods({\n      \"addNewTemporaryServiceImage\": function (id) {\n        var data = ServiceImage.findOne({\"_id\" : id});\n        var imageLink = data.link();\n          TempServiceImages.insert({\n          \"userId\": Meteor.userId(),\n          \"imageLink\":imageLink,\n          \"createdAt\":new Date(),\n          },(error, result)=>{\n\n        });\n      }, \n     //  'uploadTempServiceImages':function(id,amazonUrl,uploadTime){\n    \t// \tTempServiceImages.insert({\n    \t// \t\t'id'             : id,\n    \t// \t\t'amazonUrl'      : amazonUrl,\n    \t// \t\t'uploadTime'     : new Date(),\n     //      'authorUserId'   : id,\n     //      'submitted'      : false,\n    \t// \t});\n    \t// },\n     //  'updateTempServiceImages':function(_id,boolean){\n    \t// \tTempServiceImages.update({\n    \t// \t\t'_id'           : _id},\n     //      {$set:{\n    \t// \t\t'submitted'      : boolean,\n    \t// \t}}); \n    \t// },\n      // 'removeTempServiceImages':function(id){\n      //   TempServiceImages.remove({'_id':id,'submitted':true});\n      // },\n      // 'removeServiceUnsubmitImages':function(id){\n      //   TempServiceImages.remove({'id':id,'submitted':false});\n      // },\n      // 'removeServiceUrlImages':function(url){\n      //   TempServiceImages.remove({'amazonUrl':url});\n      // },\n    \t'createService':function(ProfileForms,StatutoryForm,AddressForm,EducationForm,WorkForm,SkillsCertificate,OtherInfoForm,serviceName,serviceRate,serviceDuration,servicesDescription,userId,lastModified){\n        // var tempServiceImages = \n        // console.log(s3);\n        var getImage              = TempServiceImages.findOne({}, {sort: {createdAt: -1, limit: 1}});\n        if(getImage){\n          var image               = getImage.imageLink;\n        }else{\n          var image               = \"/images/assureid/noImage.png\";\n        }\n\n    \t\tServices.insert({\n          'ProfileForms'          : ProfileForms,\n          'StatutoryForm'         : StatutoryForm,\n          'AddressForm'           : AddressForm,\n          'EducationForm'         : EducationForm,\n          'WorkForm'              : WorkForm,\n          'SkillsCertificate'     : SkillsCertificate,\n          'OtherInfoForm'         : OtherInfoForm,\n          'serviceName'           : serviceName,\n    \t\t\t'serviceRate'           : serviceRate,\n          'serviceDuration'       : serviceDuration,\n    \t\t\t'servicesDescription'   : servicesDescription,\n          'image'                 : image,\n    \t\t\t'createdAt'     : new Date(),\n          'authorUserId'  : userId,\n          'lastModified'  : lastModified,\n    \t\t}); \n        TempServiceImages.remove({});\n     \t},\n      'updateService':function(id,ProfileForms,StatutoryForm,AddressForm,EducationForm,WorkForm,SkillsCertificate,OtherInfoForm,serviceName,serviceRate,serviceDuration,servicesDescription,userId,lastModified){\n    \t\t   var data = TempServiceImages.findOne({\"userId\":Meteor.userId()});\n            if(data){\n                var imageLink     = data.imageLink;\n            }else{\n                var oldImgData    = Services.findOne({\"_id\":id},{sort:{\"createdAt\":-1}});\n                if(oldImgData){\n                    var imageLink = oldImgData.image;\n                }\n            }\n             \n        Services.update(\n    \t\t\t{ '_id': id },\n    \t        {\n    \t          $set:{\n                  'ProfileForms'          : ProfileForms,\n                  'StatutoryForm'         : StatutoryForm,\n                  'AddressForm'           : AddressForm,\n                  'EducationForm'         : EducationForm,\n                  'WorkForm'              : WorkForm,\n                  'SkillsCertificate'     : SkillsCertificate,\n                  'OtherInfoForm'         : OtherInfoForm,\n                  'serviceName'           : serviceName,\n                  'serviceRate'           : serviceRate,\n                  'serviceDuration'       : serviceDuration,\n                  'servicesDescription'   : servicesDescription,\n                  'image'                 : imageLink,\n                  'authorUserId'          : userId,\n                  'lastModified'          : lastModified,\n    \t        } //End of set\n    \t      }\n    \t\t);\n        TempServiceImages.remove({});\n\n    \t},\n     //  'updateEditService':function(amazonUrl){\n    \t// \tServices.update(\n    \t// \t\t{ \"s3.amazonUrl\": amazonUrl },\n    \t//         {\n    \t//           $set:{\n     //              's3.$.amazonUrl'   : \"\",\n     //              's3.$.uploadTime'  : \"\",\n    \t//         } //End of set\n    \t//       }\n    \t// \t);\n    \t// },\n     //  'updateServiceAmazonUrl':function(amazonUrl,uploadTime,id){\n    \t// \tServices.update(\n    \t// \t\t   { '_id': id },\n    \t//         {\n    \t//           $push:{\n     //                's3':\n     //                {\n     //                  'amazonUrl': amazonUrl,\n     //                  'uploadTime':uploadTime,\n     //                }\n    \t//         }\n    \t//       }\n    \t// \t);\n    \t// },\n      'deleteService':function(id){\n     \t\t Services.remove({'_id': id});\n    \t},\n    });\n}\n"]},"hash":"f0f2df2f4b3e0cb2270de0de79acce949a40dd32"}
