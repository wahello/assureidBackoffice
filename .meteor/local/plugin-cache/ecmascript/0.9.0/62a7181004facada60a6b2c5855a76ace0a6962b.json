{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/underscore","imported":["_"],"specifiers":[{"kind":"named","imported":"_","local":"_"}]},{"source":"eventemitter3","imported":["EventEmitter"],"specifiers":[{"kind":"named","imported":"EventEmitter","local":"EventEmitter"}]},{"source":"./lib.js","imported":["formatFleURL"],"specifiers":[{"kind":"named","imported":"formatFleURL","local":"formatFleURL"}]},{"source":"meteor/check","imported":["check","Match"],"specifiers":[{"kind":"named","imported":"check","local":"check"},{"kind":"named","imported":"Match","local":"Match"}]},{"source":"./cursor.js","imported":["FilesCursor","FileCursor"],"specifiers":[{"kind":"named","imported":"FilesCursor","local":"FilesCursor"},{"kind":"named","imported":"FileCursor","local":"FileCursor"}]}],"exports":{"exported":["FilesCollectionCore"],"specifiers":[{"kind":"local","local":"FilesCollectionCore","exported":"default"}]}}},"options":{"filename":"packages/ostrio:files/core.js","filenameRelative":"packages/ostrio:files/core.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ostrio:files/core.js.map","sourceFileName":"packages/ostrio:files/core.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"core"},"ignored":false,"code":"module.export({\n  default: () => FilesCollectionCore\n});\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\nlet EventEmitter;\nmodule.watch(require(\"eventemitter3\"), {\n  EventEmitter(v) {\n    EventEmitter = v;\n  }\n\n}, 1);\nlet formatFleURL;\nmodule.watch(require(\"./lib.js\"), {\n  formatFleURL(v) {\n    formatFleURL = v;\n  }\n\n}, 2);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nlet FilesCursor, FileCursor;\nmodule.watch(require(\"./cursor.js\"), {\n  FilesCursor(v) {\n    FilesCursor = v;\n  },\n\n  FileCursor(v) {\n    FileCursor = v;\n  }\n\n}, 4);\n\nclass FilesCollectionCore extends EventEmitter {\n  constructor() {\n    super();\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _debug\n   * @summary Print logs in debug mode\n   * @returns {void}\n   */_debug() {\n    if (this.debug) {\n      (console.info || console.log || function () {}).apply(undefined, arguments);\n    }\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollectionCore\n     * @name _getFileName\n     * @param {Object} fileData - File Object\n     * @summary Returns file's name\n     * @returns {String}\n     */\n\n  _getFileName(fileData) {\n    const fileName = fileData.name || fileData.fileName;\n\n    if (_.isString(fileName) && fileName.length > 0) {\n      return (fileData.name || fileData.fileName).replace(/\\.\\./g, '').replace(/\\//g, '');\n    }\n\n    return '';\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollectionCore\n     * @name _getExt\n     * @param {String} FileName - File name\n     * @summary Get extension from FileName\n     * @returns {Object}\n     */\n\n  _getExt(fileName) {\n    if (!!~fileName.indexOf('.')) {\n      const extension = (fileName.split('.').pop().split('?')[0] || '').toLowerCase();\n      return {\n        ext: extension,\n        extension,\n        extensionWithDot: `.${extension}`\n      };\n    }\n\n    return {\n      ext: '',\n      extension: '',\n      extensionWithDot: ''\n    };\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollectionCore\n     * @name _updateFileTypes\n     * @param {Object} data - File data\n     * @summary Internal method. Classify file based on 'type' field\n     */\n\n  _updateFileTypes(data) {\n    data.isVideo = /^video\\//i.test(data.type);\n    data.isAudio = /^audio\\//i.test(data.type);\n    data.isImage = /^image\\//i.test(data.type);\n    data.isText = /^text\\//i.test(data.type);\n    data.isJSON = /^application\\/json$/i.test(data.type);\n    data.isPDF = /^application\\/(x-)?pdf$/i.test(data.type);\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollectionCore\n     * @name _dataToSchema\n     * @param {Object} data - File data\n     * @summary Internal method. Build object in accordance with default schema from File data\n     * @returns {Object}\n     */\n\n  _dataToSchema(data) {\n    const ds = {\n      name: data.name,\n      extension: data.extension,\n      path: data.path,\n      meta: data.meta,\n      type: data.type,\n      size: data.size,\n      userId: data.userId || null,\n      versions: {\n        original: {\n          path: data.path,\n          size: data.size,\n          type: data.type,\n          extension: data.extension\n        }\n      },\n      _downloadRoute: data._downloadRoute || this.downloadRoute,\n      _collectionName: data._collectionName || this.collectionName\n    }; //Optional fileId\n\n    if (data.fileId) {\n      ds._id = data.fileId;\n    }\n\n    this._updateFileTypes(ds);\n\n    ds._storagePath = data._storagePath || this.storagePath(_.extend(data, ds));\n    return ds;\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollectionCore\n     * @name findOne\n     * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n     * @param {Object} options - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)\n     * @summary Find and return Cursor for matching document Object\n     * @returns {FileCursor} Instance\n     */\n\n  findOne(selector = {}, options) {\n    this._debug(`[FilesCollection] [findOne(${JSON.stringify(selector)}, ${JSON.stringify(options)})]`);\n\n    check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));\n    check(options, Match.Optional(Object));\n    const doc = this.collection.findOne(selector, options);\n\n    if (doc) {\n      return new FileCursor(doc, this);\n    }\n\n    return doc;\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollectionCore\n     * @name find\n     * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n     * @param {Object}        options  - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)\n     * @summary Find and return Cursor for matching documents\n     * @returns {FilesCursor} Instance\n     */\n\n  find(selector = {}, options) {\n    this._debug(`[FilesCollection] [find(${JSON.stringify(selector)}, ${JSON.stringify(options)})]`);\n\n    check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));\n    check(options, Match.Optional(Object));\n    return new FilesCursor(selector, options, this);\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollectionCore\n     * @name update\n     * @see http://docs.meteor.com/#/full/update\n     * @summary link Mongo.Collection update method\n     * @returns {Mongo.Collection} Instance\n     */\n\n  update() {\n    this.collection.update.apply(this.collection, arguments);\n    return this.collection;\n  } /*\n     * @locus Anywhere\n     * @memberOf FilesCollectionCore\n     * @name link\n     * @param {Object} fileRef - File reference object\n     * @param {String} version - Version of file you would like to request\n     * @summary Returns downloadable URL\n     * @returns {String} Empty string returned in case if file not found in DB\n     */\n\n  link(fileRef, version = 'original') {\n    this._debug(`[FilesCollection] [link(${_.isObject(fileRef) ? fileRef._id : undefined}, ${version})]`);\n\n    check(fileRef, Object);\n    check(version, String);\n\n    if (!fileRef) {\n      return '';\n    }\n\n    return formatFleURL(fileRef, version);\n  }\n\n}\n\nFilesCollectionCore.schema = {\n  size: {\n    type: Number\n  },\n  name: {\n    type: String\n  },\n  type: {\n    type: String\n  },\n  path: {\n    type: String\n  },\n  isVideo: {\n    type: Boolean\n  },\n  isAudio: {\n    type: Boolean\n  },\n  isImage: {\n    type: Boolean\n  },\n  isText: {\n    type: Boolean\n  },\n  isJSON: {\n    type: Boolean\n  },\n  isPDF: {\n    type: Boolean\n  },\n  extension: {\n    type: String,\n    optional: true\n  },\n  _storagePath: {\n    type: String\n  },\n  _downloadRoute: {\n    type: String\n  },\n  _collectionName: {\n    type: String\n  },\n  public: {\n    type: Boolean,\n    optional: true\n  },\n  meta: {\n    type: Object,\n    blackbox: true,\n    optional: true\n  },\n  userId: {\n    type: String,\n    optional: true\n  },\n  updatedAt: {\n    type: Date,\n    optional: true\n  },\n  versions: {\n    type: Object,\n    blackbox: true\n  }\n};","map":{"version":3,"sources":["packages/ostrio:files/core.js"],"names":["module","export","default","FilesCollectionCore","_","watch","require","v","EventEmitter","formatFleURL","check","Match","FilesCursor","FileCursor","constructor","_debug","debug","console","info","log","apply","undefined","arguments","_getFileName","fileData","fileName","name","isString","length","replace","_getExt","indexOf","extension","split","pop","toLowerCase","ext","extensionWithDot","_updateFileTypes","data","isVideo","test","type","isAudio","isImage","isText","isJSON","isPDF","_dataToSchema","ds","path","meta","size","userId","versions","original","_downloadRoute","downloadRoute","_collectionName","collectionName","fileId","_id","_storagePath","storagePath","extend","findOne","selector","options","JSON","stringify","Optional","OneOf","Object","String","Boolean","Number","doc","collection","find","update","link","fileRef","version","isObject","schema","optional","public","blackbox","updatedAt","Date"],"mappings":"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","file":"packages/ostrio:files/core.js.map","sourcesContent":["import { _ }                       from 'meteor/underscore';\nimport { EventEmitter }            from 'eventemitter3';\nimport { formatFleURL }            from './lib.js';\nimport { check, Match }            from 'meteor/check';\nimport { FilesCursor, FileCursor } from './cursor.js';\n\nexport default class FilesCollectionCore extends EventEmitter {\n  constructor() {\n    super();\n  }\n\n  static schema = {\n    size: {\n      type: Number\n    },\n    name: {\n      type: String\n    },\n    type: {\n      type: String\n    },\n    path: {\n      type: String\n    },\n    isVideo: {\n      type: Boolean\n    },\n    isAudio: {\n      type: Boolean\n    },\n    isImage: {\n      type: Boolean\n    },\n    isText: {\n      type: Boolean\n    },\n    isJSON: {\n      type: Boolean\n    },\n    isPDF: {\n      type: Boolean\n    },\n    extension: {\n      type: String,\n      optional: true\n    },\n    _storagePath: {\n      type: String\n    },\n    _downloadRoute: {\n      type: String\n    },\n    _collectionName: {\n      type: String\n    },\n    public: {\n      type: Boolean,\n      optional: true\n    },\n    meta: {\n      type: Object,\n      blackbox: true,\n      optional: true\n    },\n    userId: {\n      type: String,\n      optional: true\n    },\n    updatedAt: {\n      type: Date,\n      optional: true\n    },\n    versions: {\n      type: Object,\n      blackbox: true\n    }\n  };\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _debug\n   * @summary Print logs in debug mode\n   * @returns {void}\n   */\n  _debug() {\n    if (this.debug) {\n      (console.info || console.log || function () { }).apply(undefined, arguments);\n    }\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _getFileName\n   * @param {Object} fileData - File Object\n   * @summary Returns file's name\n   * @returns {String}\n   */\n  _getFileName(fileData) {\n    const fileName = fileData.name || fileData.fileName;\n    if (_.isString(fileName) && (fileName.length > 0)) {\n      return (fileData.name || fileData.fileName).replace(/\\.\\./g, '').replace(/\\//g, '');\n    }\n    return '';\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _getExt\n   * @param {String} FileName - File name\n   * @summary Get extension from FileName\n   * @returns {Object}\n   */\n  _getExt(fileName) {\n    if (!!~fileName.indexOf('.')) {\n      const extension = (fileName.split('.').pop().split('?')[0] || '').toLowerCase();\n      return { ext: extension, extension, extensionWithDot: `.${extension}` };\n    }\n    return { ext: '', extension: '', extensionWithDot: '' };\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _updateFileTypes\n   * @param {Object} data - File data\n   * @summary Internal method. Classify file based on 'type' field\n   */\n  _updateFileTypes(data) {\n    data.isVideo  = /^video\\//i.test(data.type);\n    data.isAudio  = /^audio\\//i.test(data.type);\n    data.isImage  = /^image\\//i.test(data.type);\n    data.isText   = /^text\\//i.test(data.type);\n    data.isJSON   = /^application\\/json$/i.test(data.type);\n    data.isPDF    = /^application\\/(x-)?pdf$/i.test(data.type);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name _dataToSchema\n   * @param {Object} data - File data\n   * @summary Internal method. Build object in accordance with default schema from File data\n   * @returns {Object}\n   */\n  _dataToSchema(data) {\n    const ds = {\n      name: data.name,\n      extension: data.extension,\n      path: data.path,\n      meta: data.meta,\n      type: data.type,\n      size: data.size,\n      userId: data.userId || null,\n      versions: {\n        original: {\n          path: data.path,\n          size: data.size,\n          type: data.type,\n          extension: data.extension\n        }\n      },\n      _downloadRoute: data._downloadRoute || this.downloadRoute,\n      _collectionName: data._collectionName || this.collectionName\n    };\n\n    //Optional fileId\n    if (data.fileId) {\n      ds._id = data.fileId;\n    }\n\n    this._updateFileTypes(ds);\n    ds._storagePath = data._storagePath || this.storagePath(_.extend(data, ds));\n    return ds;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name findOne\n   * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n   * @param {Object} options - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)\n   * @summary Find and return Cursor for matching document Object\n   * @returns {FileCursor} Instance\n   */\n  findOne(selector = {}, options) {\n    this._debug(`[FilesCollection] [findOne(${JSON.stringify(selector)}, ${JSON.stringify(options)})]`);\n    check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));\n    check(options, Match.Optional(Object));\n\n    const doc = this.collection.findOne(selector, options);\n    if (doc) {\n      return new FileCursor(doc, this);\n    }\n    return doc;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name find\n   * @param {String|Object} selector - Mongo-Style selector (http://docs.meteor.com/api/collections.html#selectors)\n   * @param {Object}        options  - Mongo-Style selector Options (http://docs.meteor.com/api/collections.html#sortspecifiers)\n   * @summary Find and return Cursor for matching documents\n   * @returns {FilesCursor} Instance\n   */\n  find(selector = {}, options) {\n    this._debug(`[FilesCollection] [find(${JSON.stringify(selector)}, ${JSON.stringify(options)})]`);\n    check(selector, Match.Optional(Match.OneOf(Object, String, Boolean, Number, null)));\n    check(options, Match.Optional(Object));\n\n    return new FilesCursor(selector, options, this);\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name update\n   * @see http://docs.meteor.com/#/full/update\n   * @summary link Mongo.Collection update method\n   * @returns {Mongo.Collection} Instance\n   */\n  update() {\n    this.collection.update.apply(this.collection, arguments);\n    return this.collection;\n  }\n\n  /*\n   * @locus Anywhere\n   * @memberOf FilesCollectionCore\n   * @name link\n   * @param {Object} fileRef - File reference object\n   * @param {String} version - Version of file you would like to request\n   * @summary Returns downloadable URL\n   * @returns {String} Empty string returned in case if file not found in DB\n   */\n  link(fileRef, version = 'original') {\n    this._debug(`[FilesCollection] [link(${(_.isObject(fileRef) ? fileRef._id : undefined)}, ${version})]`);\n    check(fileRef, Object);\n    check(version, String);\n\n    if (!fileRef) {\n      return '';\n    }\n    return formatFleURL(fileRef, version);\n  }\n}\n"]},"hash":"62a7181004facada60a6b2c5855a76ace0a6962b"}
